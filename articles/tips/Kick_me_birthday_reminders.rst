.. post:: 2009-09-26
   :tags: abook, remind

“Kick me” birthday reminders
============================

Tony Collins asks on the EADS Linux list:

    I almost forgot the wife’s birthday last week, not wanting to do that again
    I’m turning to technology not deeper consideration.  So guys, how do you
    manage it?

My answer is to combine the excellent abook_ and remind_ tools in to a really
cool solution that nags you about birthdays every time you login.

For those that haven’t used it, :command:`abook` is a simple ncurses_ based
address book.  For some years now I’ve been using :command:`abook` to manage my
personal address book, as it is both small and quite featureful.  The address
file is in a standard ``ini`` format that I can easily import from and export
to practically anything with only a small Python_ script using
:class:`~configparser.ConfigParser`.

:command:`remind` is a functional **to the point of insanity** text-based
reminder tool.  I use it mainly to remind me of tasks that need completing when
I login, although I do have a hook in awesome_ to display the :command:`remind`
output at other times.  The file format is simple and expressive which makes
writing importers and exporters easy enough.  As an example, I generate my
:file:`~/.reminders.d/meetings` file from a hCalender_ page.

.. image:: /.images/2009-09-26-abook_screenshot-mini.png
   :alt: abook displaying custom tab

Now the birthday trick is a cool one, :command:`abook` allows the use of custom
fields that you can use for anything you like.  I use a custom field to store
birthdays in |ISO|-8601 format as in “1974-04-12”, and enable it by adding the
following to my :file:`~/.abook/abookrc`:

.. code-block:: text

    field birthday = Birthday, date

A little :command:`python` script is all that is needed to generate
a :command:`remind` input file from our address book now.

.. code-block:: python

    #! /usr/bin/python3 -tt

    from configparser import ConfigParser, NoOptionError
    from datetime import datetime
    from operator import attrgetter
    from os import path

    tmpl = 'REM {} +4 MSG {}’s [grn][_yr_num({})][nrm] Birthday %a'
    data = ConfigParser(converters={
        'isodate': lambda s: datetime.strptime(s, '%Y-%m-%d')
    })
    data.read(path.expanduser('~/.abook/addressbook'))

    birthdays = filter(lambda x: 'birthday' in data.options(x),
                       data.sections())

    print('# THIS FILE IS AUTOGENERATED FROM ABOOK DATA')

    for record in birthdays:
        try:
            name = data.get(record, 'nick')
        except NoOptionError:
            name = data.get(record, 'name')
        birthdate = data.getisodate(record, 'birthday')
        print(tmpl.format(birthdate.strftime('%d %B'), name, birthdate.year))

I use the following make_ snippet in my :file:`~/Makefile` to generate the
:file:`~/.reminders.d/birthdays` file:

.. code-block:: make

    .reminders.d/birthdays: .abook/addressbook .reminders.d/birthdays.py
        $(info - Generating remind’s birthdays file)
        $(word 2, $^) >$@

And finally, we need to tell :command:`remind` to include our newly created
file by editing :file:`~/.reminders`:

.. code-block:: text

    INCLUDE /home/jay/.reminders.d/birthdays

.. image:: /.images/2009-09-26-remind_screenshot.png
   :alt: shell login screenshot

You could trigger a rebuild in your :file:`~/.bashrc` before you call
:command:`rem` to see the reminders, so they are always up to date at login.
Or, you could be like me and have a post commit hook for git_ to manage this…
because you are keeping your home directory version controlled as a sanity
measure I hope!

.. _abook: http://abook.sourceforge.net/
.. _remind: http://www.roaringpenguin.com/products/remind
.. _ncurses: http://dickey.his.com/ncurses/
.. _Python: http://www.python.org/
.. _awesome: https://awesomewm.org/
.. _hCalender: http://microformats.org/wiki/hcalendar
.. _make: http://www.gnu.org/software/make/make.html
.. _git: http://www.git-scm.com/
