<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JNRowe</title><link href="http://jnrowe.github.com/" rel="alternate"></link><link href="http://jnrowe.github.com/updates.atom" rel="self"></link><id>http://jnrowe.github.com/</id><updated>2014-09-03T00:00:00Z</updated><author><name>James Rowe</name><email>jnrowe@gmail.com</email><uri>http://jnrowe.github.com/</uri></author><rights>2009-2014, James Rowe</rights><entry><title>Open Source and enjoyment</title><link href="http://jnrowe.github.com/thoughts/burn_out.html" rel="alternate"></link><updated>2014-09-03T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/burn_out.html</id><summary type="html">&lt;div class=section id=open-source-and-enjoyment&gt;
&lt;h1&gt;Open Source and enjoyment&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#open-source-and-enjoyment title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A few years ago I burned out on Open Source projects, to the point that it was
close to impacting other parts of my life.  I have only myself to blame as
I didn’t manage to distance myself at all well.  Distancing yourself is not easy
to do when your fun hobby for relaxation is the thing that is thing that is
working against you.&lt;/p&gt;
&lt;p&gt;There were a variety of incredibly minor issues that piled up Jenga-style.  Then
to carry the weak analogy forward, it toppled over in a split second like Jenga
in a rubber dingy on the rolling seas with a fumbling drunken friend wearing
a blindfold.&lt;/p&gt;
&lt;p&gt;I’ve decided to write down a few of the things that were happening, both as an
act of catharsis and to help me spot the problems in future.  Perhaps it will
help others who are experiencing the same thing but haven’t quite spotted the
catalysts yet.&lt;/p&gt;
&lt;div class=section id=dealing-with-needy-users&gt;
&lt;h2&gt;Dealing with needy users&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#dealing-with-needy-users title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some users seem to feel a disproportionate amount of “you work for me”,
seemingly more so than happens with actual paying customers on other projects
which strikes me as strange.  They’ll bug you endlessly in emails, in the issue
tracker, on IRC and in real life if you end up at the same conference.  You
&lt;em&gt;need&lt;/em&gt; to stop this before it takes hold.  It helps if you can be polite, but if
not just stop it anyway.  It is for &lt;em&gt;your&lt;/em&gt; welfare, so just do it.&lt;/p&gt;
&lt;p&gt;I actually found myself burning the wrong people towards the peak of that
imaginary Jenga tower.  You need to make a concerted effort to figure out which
people are delivering the seemingly endless grief or perhaps just relentless
&lt;a class="reference external" href=http://en.m.wikipedia.org/wiki/bikeshedding&gt;bikeshedding&lt;/a&gt;, and stop them.  It is all too easy to accidentally become
annoyed at well meaning useful contributors when you’ve been trawling through
a heap of useless meta-discussion about a change nobody is making.&lt;/p&gt;
&lt;p&gt;On one &lt;em&gt;library&lt;/em&gt; project I worked on there was a user who didn’t read the
documentation, couldn’t use the language enough to write tests, yet still
endlessly sucked up support time by opening awful issues and sending pointless
emails wishing to discuss changes they might make.  I kind of hesitate to say
awful issues, but - for example - if you can’t write a two line assertion in
a language you’re not in the target audience for a library in the first place.&lt;/p&gt;
&lt;p&gt;Those people aren’t even adding value in pointing out deficiencies in
documentation, because they’re not a target user.  It would be like me writing
to &lt;a class="reference external" href=http://www.jcb.com/&gt;JCB&lt;/a&gt; telling them they must document why they use round knobs on the digger
I saw someone else using.  So try spot it early, and put a stop to it.&lt;/p&gt;
&lt;p&gt;I suspect a big part of the issue here is cost.  I’m sure if there was even
a single penny cost to opening issues or sending a mail it would do wonders for
communication in general.  I suspect that would remain true even if you
reimbursed that penny immediately.&lt;/p&gt;
&lt;div class=section id=the-answer&gt;
&lt;h3&gt;The answer&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#the-answer title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I figured out how to work with this entirely by accident.  Politely offer
answers that move them away from you.  It is by far the easiest solution.&lt;/p&gt;
&lt;p&gt;In one instance I suggested alternatives packages to an expensive user, with the
hope they’d quietly move on.  Which is evil really, as what you’re really doing
is dreaming that they’ll move on to bother a developer who isn’t you.&lt;/p&gt;
&lt;p&gt;On another occasion I stole an idea from a friend and said “Sorry, I can’t
figure out how to implement this.  Open a pull request, and I’ll merge it!” to
another.  It worked well, because it stopped the direction-less discussion and
was never going to be followed up with a patch later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=dealing-with-unreasonable-requests&gt;
&lt;h2&gt;Dealing with unreasonable requests&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#dealing-with-unreasonable-requests title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used to get quite annoyed when I received an impolite or unreasonable request
on an Open Source project, nowadays I tend to just respond with pre-canned
answers for most of them.  If you can cut the time it takes to respond to them,
you’ll obviously spend far less time thinking about them.&lt;/p&gt;
&lt;p&gt;The typical one that springs to mind is a user complaining that you’ve not
licensed your GPL code in a way which allows them to use it without contributing
anything in return.  I choose reciprocating licences where I can, because
frankly that may be the only value you provide &lt;em&gt;me&lt;/em&gt; as a user.  I get that some
people need to use their Open Source projects as a way to improve their CV or
build a presence, but for many of us it is just for fun and reciprocation.&lt;/p&gt;
&lt;p&gt;Another example that I recall, but wish I didn’t, was a user &lt;em&gt;telling&lt;/em&gt; me to
recompress a tarball on PyPI because their infrastructure couldn’t support
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;bzip2&lt;/span&gt;&lt;/tt&gt;.  Seems reasonable enough, but it came wrapped in a tirade of abuse.
I ignored the abuse, uploaded another tarball and then received another abusive
email in return the next day.  That was a long time ago, far before the burnout
started to creep in so I just addressed the actual issue and moved on.&lt;/p&gt;
&lt;div class=section id=id1&gt;
&lt;h3&gt;The answer&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#id1 title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I had forgotten about that whole previous story until at &lt;a class="reference external" href=https://europython.eu/&gt;Europython&lt;/a&gt; a friend
was telling me about someone who was banned from a number of events, hell-banned
on various mailing lists and on forced lockout on Stack Overflow for poisonous
behaviour.  I started to tell my story as an example of strange abusive
behaviour, and it turned out to be the same guy.&lt;/p&gt;
&lt;p&gt;The point is these people can be everywhere so just don’t let them get to you.
I realise that is both obvious and feels hard to do, but it is quite easy in the
virtual world.  If you have the hell-ban option available just use
it; perhaps there is an ignore option in your issue tracker, add a “send to
trash” rule in your email filter.  Even in person it can be quite easy to do,
just politely acknowledge their issue and move away instead of engaging them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=the-solutions&gt;
&lt;h1&gt;The solutions&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/burn_out.html#the-solutions title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I chose a solution I hate, for all intents and purposes I don’t release new Open
Source projects any longer.  I still work on a lot of projects, and the code is
normally available somewhere for strangers.  However, for the most part I’ve
made a point of not hosting or releasing it in the common places.  This works
for me, but it saddens me deeply.&lt;/p&gt;
&lt;p&gt;I have a friend who does something interesting to combat the same problems I’ve
mentioned here.  He hooks the issue tracker to only show issues reported by
people in his second-degree &lt;a class="reference external" href=http://www.foaf-project.org/&gt;FOAF&lt;/a&gt; circle or people whose user profile is an
active Open Source contributor.  It works, and it cuts out most of the problem
users, but it is nasty.  I feel it is worse than my “solution” because it still
gives the impression of support to the users you won’t support, but also gives
the impression of bad support through heaps of unanswered issues to the users
who would receive good support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;The greatest trick the devil ever played was convincing users they had skin
in the game.&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I may be misappropriating a quote from a great film there, but it is important.
A lot of the actively poisonous people who contact you aren’t providing any real
value to you, and they’re probably never going to.  If you can remove them
somehow you’re probably not losing anything, but you’ll be gaining a whole lot
personally.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>jnrowe-misc - The unsorted package overlay</title><link href="http://jnrowe.github.com/articles/probits/jnrowe-misc.html" rel="alternate"></link><updated>2014-06-30T00:00:00Z</updated><id>http://jnrowe.github.com/articles/probits/jnrowe-misc.html</id><summary type="html">&lt;div class=section id=jnrowe-misc-the-unsorted-package-overlay&gt;
&lt;h1&gt;jnrowe-misc - The unsorted package overlay&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/jnrowe-misc.html#jnrowe-misc-the-unsorted-package-overlay title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;div&gt;A collection of &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ebuild&lt;/span&gt;&lt;/tt&gt; files with no overall theme.&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;TLDR; For what it was &lt;a class="reference external" href=https://github.com/JNRowe/jnrowe-misc&gt;jnrowe-misc&lt;/a&gt; served its purpose well.&lt;/p&gt;
&lt;div class=section id=an-island-unto-itself&gt;
&lt;h2&gt;An island unto itself&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/jnrowe-misc.html#an-island-unto-itself title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it may come as a surprise to a few of the users(which would be most of
them) the overlay available on GitHub wasn’t the deliverable at any point in
time.  In fact, the often convoluted merge history in the repository probably
hinted at that quite a bit.&lt;/p&gt;
&lt;a class="reference internal image-reference" href=http://jnrowe.github.com/_images/jnrowe-misc.png&gt;&lt;img alt="Tree view of ``jnrowe-misc`` history" class=align-right src=http://jnrowe.github.com/_images/jnrowe-misc.png style="width: 50%;"&gt;&lt;/a&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;jnrowe-misc&lt;/span&gt;&lt;/tt&gt; was always the combination of a few independently managed
repositories that I bundled up to make available for public consumption.
Eventually it ended up being mostly Python stuff, but that was because the
support burden of other packages was becoming more time consuming than I could
justify.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; audience for the overlay, my co-workers, saw a different beast
entirely.  It used our keyword types and rules, it came bundled &lt;a class="reference internal" href=http://jnrowe.github.com/articles/tdd_distros.html&gt;&lt;em&gt;with the
tests&lt;/em&gt;&lt;/a&gt; I was unable to share and had a tighter schedule for
maintenance.&lt;/p&gt;
&lt;p&gt;Still, I received a fair number of emails and live comments from users so I’ll
call that a success!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=upstreamed&gt;
&lt;h2&gt;Upstreamed&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/jnrowe-misc.html#upstreamed title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sadly, very little was ever taken upstream(even less if you count the parts that
were credited).  This was entirely my fault.  I originally started exporting the
overlay because I was fed up the new package process upstream, and it seemed
like the best way to deal with that for me.&lt;/p&gt;
&lt;p&gt;I had hoped that some packages would be picked up, but didn’t actively push them
after the first few.&lt;/p&gt;
&lt;p&gt;The overlay should have never touched packages that were available upstream, but
occasionally they overlapped when upstream added them.  The use of &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;::shadow&lt;/span&gt;&lt;/tt&gt;
to workaround problems when new packages were added upstream worked &lt;em&gt;really&lt;/em&gt;
well, and saved the few remaining hairs on my balding head.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=legacy&gt;
&lt;h2&gt;Legacy&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/jnrowe-misc.html#legacy title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It looks like the majority of packages will continue to be maintained for the
foreseeable future, but regrettably it looks like the result will not be
available beyond a “open to all people who know where to look” organisation on
GitHub.&lt;/p&gt;
&lt;p&gt;I’d like to change the new maintainer’s mind, but in all honesty I understand
their reasons.  I’ve stopped maintaining a lot of once public projects over the
past couple of years, and it is as refreshing as it is saddening.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Project postmortems</title><link href="http://jnrowe.github.com/articles/probits/index.html" rel="alternate"></link><updated>2014-06-30T00:00:00Z</updated><id>http://jnrowe.github.com/articles/probits/index.html</id><summary type="html">&lt;div class=section id=project-postmortems&gt;
&lt;h1&gt;Project postmortems&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/index.html#project-postmortems title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One of my favourite things about the day job is the post-project analysis and
postmortems, which we lovingly refer to as &lt;abbr title="Project Obituaries"&gt;probits&lt;/abbr&gt;
internally.&lt;/p&gt;
&lt;div class=section id=background&gt;
&lt;h2&gt;Background&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/index.html#background title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I work in heavily structured and standalone project-oriented environment.  In
a decade I can count the number of fluid projects on three fingers.  As I write
this in June 2014 my tier-one project started 21 months ago, and has a delivery
date locked down to a week in 2015.  We’ll deliver on time or a touch early, our
team is known for that.&lt;/p&gt;
&lt;p&gt;One of the benefits of working on such strict projects with definite ship dates
and locked schedules is that you always know when a project is complete.  This
also allows us to take advantage of that by inspecting the project as a whole,
spotting the successes and failures within.  Probits are the more informal
dialogue that we pin to the front of each folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=what-you-ll-find&gt;
&lt;h2&gt;What you’ll find&lt;a class=headerlink href=http://jnrowe.github.com/articles/probits/index.html#what-you-ll-find title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve recently decided I’d like to take a similar approach to some side projects
that I work on, and also try to apply the methods to some more real-life
situations.  This category, and the accompanying index, below are that attempt.&lt;/p&gt;
&lt;div class="toctree-wrapper compound"&gt;
&lt;ul&gt;
&lt;li class=toctree-l1&gt;&lt;a class="reference internal" href=http://jnrowe.github.com/articles/probits/jnrowe-misc.html&gt;jnrowe-misc - The unsorted package overlay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dropping Gentoo reflex</title><link href="http://jnrowe.github.com/articles/dropping_gentoo_reflex.html" rel="alternate"></link><updated>2014-06-29T00:00:00Z</updated><id>http://jnrowe.github.com/articles/dropping_gentoo_reflex.html</id><summary type="html">&lt;div class=section id=dropping-gentoo-reflex&gt;
&lt;h1&gt;Dropping Gentoo reflex&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html#dropping-gentoo-reflex title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After hitting the publish button on &lt;a class="reference internal" href=http://jnrowe.github.com/articles/dropping_gentoo.html&gt;&lt;em&gt;Dropping Gentoo&lt;/em&gt;&lt;/a&gt; a few friends
commented that I was either unnecessarily harsh about Gentoo or we wasted an
enormous amount of time on it.  It definitely was the former, and I feel
a touch ashamed for implying the latter.&lt;/p&gt;
&lt;p&gt;I was writing my thoughts in the “project obituary” form that I’m used to, and
that is entirely about spotting the downsides to make sure they don’t reoccur.
And with that in mind I &lt;em&gt;was&lt;/em&gt; being incredibly unfair to Gentoo, both the
project and by extension the people working on it.&lt;/p&gt;
&lt;p&gt;There were many, many good points about Gentoo and I’ll nod towards a few now.&lt;/p&gt;
&lt;div class=section id=speed&gt;
&lt;h2&gt;Speed&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html#speed title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No, no.  Not the “Oh my god, my KDEs are soooo fast” that many people fairly
associate with Gentoo users.  I’m talking about the basic package handling
tasks.&lt;/p&gt;
&lt;p&gt;There are very few other distributions that can match Gentoo when it comes to
the speed of editing a package.  Or, for that matter, the speed of installation
if you share binary packages.&lt;/p&gt;
&lt;p&gt;Almost the first thing you notice when switching to Debian or Fedora as a heavy
binary package user on Gentoo is just how slow package installation and removal
is.  Binary package installation on Gentoo feels on par with a distribution
like Slackware, and what passes for package management there is just choosing
the right argument to &lt;strong class=command&gt;tar&lt;/strong&gt;‘s &lt;em class="xref std std-option"&gt;-C&lt;/em&gt; option.&lt;/p&gt;
&lt;p&gt;Where Gentoo really excels though is in the speed of creating new packages or
editing existing packages.&lt;/p&gt;
&lt;p&gt;Lets take a look at an example.  Say, for example, that you just found out that
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;flask-dashed&lt;/span&gt;&lt;/tt&gt;‘s  &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ebuild&lt;/span&gt;&lt;/tt&gt; mistakenly installs a &lt;tt class="file docutils literal"&gt;&lt;span class=pre&gt;/usr/README&lt;/span&gt;&lt;/tt&gt; file.
We we can fix the problem with the following simple change and a call to
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;repoman&lt;/span&gt; &lt;span class=pre&gt;manifest&lt;/span&gt;&lt;/tt&gt;, the rest takes care of itself.&lt;/p&gt;
&lt;div class=highlight-diff&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=gh&gt;diff --git i/flask-dashed-0.1b_p2.ebuild w/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gh&gt;index dd64877a387e..cf3e3cbf272b 100644&lt;/span&gt;
&lt;span class=gd&gt;--- i/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gi&gt;+++ w/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gu&gt;@@ -29,5 +29,6 @@ S="${WORKDIR}/${MY_P}"&lt;/span&gt;

 src_prepare() {
        distutils-r1_src_prepare
&lt;span class=gi&gt;+       sed -i /data_files/d setup.py || die "sed failed"&lt;/span&gt;
        rm -rf "${S}/tests"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class=last&gt;Of course, you should fix the package properly and send the fix upstream but
this is just to prove a point.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have to mention a small downside here however, because very few people seem to
test &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt;‘s binary package support you’ll occasionally have to do some
leg work to fix problems.  This normally arises when an &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;eclass&lt;/span&gt;&lt;/tt&gt; changes needs
to ripple through, or when a library breaks compatibility and it’s ebuild hasn’t
been bumped properly.&lt;/p&gt;
&lt;p&gt;Almost every time that happens you can fix it with a quick loop in your shell
though.  A couple of such problems and solutions that I found in my shell
history can be seen below.&lt;/p&gt;
&lt;div class=highlight-sh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=c&gt;# When you were stuck with packages that used python-distutils-ng, and you&lt;/span&gt;
&lt;span class=c&gt;# needed to scrub packages because you changed Python version&lt;/span&gt;
&lt;span class=k&gt;for &lt;/span&gt;s in &lt;span class=k&gt;$(&lt;/span&gt;portageq pkgdir&lt;span class=k&gt;)&lt;/span&gt;/*-*/*.tbz2; &lt;span class=k&gt;do&lt;/span&gt;
&lt;span class=k&gt;    &lt;/span&gt;qtbz2 -xO &lt;span class=nv&gt;$s&lt;/span&gt; | qxpak -xO - &lt;span class=k&gt;${${&lt;/span&gt;&lt;span class=nv&gt;s&lt;/span&gt;&lt;span class=p&gt;##*/&lt;/span&gt;&lt;span class=k&gt;}&lt;/span&gt;&lt;span class=p&gt;/.tbz2&lt;/span&gt;&lt;span class=k&gt;}&lt;/span&gt;.ebuild | grep -q &lt;span class=s1&gt;'SUPPORT_PYTHON_ABIS'&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=nv&gt;$s&lt;/span&gt;
&lt;span class=k&gt;done&lt;/span&gt;

&lt;span class=c&gt;# When you were using packages that used python's "-r1" eclasses and all&lt;/span&gt;
&lt;span class=c&gt;# you could see is a flood of blockages in your update output&lt;/span&gt;
&lt;span class=k&gt;for &lt;/span&gt;s in &lt;span class=k&gt;$(&lt;/span&gt;portageq pkgdir&lt;span class=k&gt;)&lt;/span&gt;/*-*/*.tbz2; &lt;span class=k&gt;do&lt;/span&gt;
&lt;span class=k&gt;    &lt;/span&gt;qtbz2 -xO &lt;span class=nv&gt;$s&lt;/span&gt; | qxpak -xO - RDEPEND 2&amp;gt;/dev/null | grep -q &lt;span class=s2&gt;"dev-python/python-exec"&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=nv&gt;$s&lt;/span&gt;
&lt;span class=k&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=documentation&gt;
&lt;h2&gt;Documentation&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html#documentation title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The excellent &lt;a class="reference external" href=http://devmanual.gentoo.org/&gt;devmanual&lt;/a&gt; and the incredible &lt;a class="reference external" href=http://wiki.gentoo.org/wiki/Project:PMS&gt;Package Manager Specification&lt;/a&gt;
made life so much easier.  The devmanual was both short enough to be used as
quick reference and complete enough that you could learn most of what you’d need
to know from it.  The unfortunately named PMS acted as the reference that
finally allowed us to switch from away from &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt; completely at the
office.&lt;/p&gt;
&lt;p&gt;The PMS documented much of the nastiness that &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt; suffers from, and made
life in general a whole lot nicer when you were chasing bugs deep down the
rabbit hole.  And, let us be honest here it also stopped a little of the
fluidity that plagued &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt; too.&lt;/p&gt;
&lt;p&gt;Some people argue that it acts as unnecessary stop motion but those people must
be forgetting what happened when behaviour changed randomly between &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt;
versions.  PMS, and the EAPI process, also brought some much needed design and
stability to newer features.&lt;/p&gt;
&lt;p&gt;All Gentoo users owe Ciaran McCreesh a few beers for all the hard work he put in
to those documents, especially in the early days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=the-personal-touch&gt;
&lt;h2&gt;The personal touch&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html#the-personal-touch title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a personal note I’ve met some awesome people over the years as a result of
using Gentoo.  Many of them at the old Gentoo UK conferences, which were always
fun.  More recently at LoFu’s annual summit which seems to have taken Gentoo
UK’s place with practically everyone you saw at Gentoo UK(minus the students),
and oddly about the same Gentoo to non-Gentoo ratio of talks too.&lt;/p&gt;
&lt;p&gt;Two excellent people on our current team were recruited following the Gentoo UK
conference at UCL, and we met a spectacular contract hire at the one prior to
that as well.&lt;/p&gt;
&lt;p&gt;I’ve even been lucky enough to have a few doors held open for me via people I’ve
met at Gentoo-themed or Gentoo-heavy events, and I suspect I’d be writing this
from a less happy place without them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=wrapping-up&gt;
&lt;h2&gt;Wrapping up&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html#wrapping-up title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is true that you really can not always see the forest for trees.&lt;/p&gt;
&lt;p&gt;Had recent events not clouded my vision I would have commented on the train
wreck that is &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;webapp.eclass&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;app-admin/webapp-config&lt;/span&gt;&lt;/tt&gt; in
&lt;a class="reference internal" href=http://jnrowe.github.com/articles/dropping_gentoo.html&gt;&lt;em&gt;Dropping Gentoo&lt;/em&gt;&lt;/a&gt;.  It sucked tonnes and tonnes of time away until we
eventually just trashed any package that interacted with it and moved on.&lt;/p&gt;
&lt;p&gt;That was so long ago that I had forgotten about it until a co-worker asked me
why I hadn’t mentioned it.  I suspect most of the other negative comments I made
will feel equally inconsequential when compared to the benefits Gentoo gave us
as time moves on.&lt;/p&gt;
&lt;p&gt;Instead of making this rant even longer, I’ll take the time to reflect on the
fun memories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dropping Gentoo</title><link href="http://jnrowe.github.com/articles/dropping_gentoo.html" rel="alternate"></link><updated>2014-06-18T00:00:00Z</updated><id>http://jnrowe.github.com/articles/dropping_gentoo.html</id><summary type="html">&lt;div class=section id=dropping-gentoo&gt;
&lt;h1&gt;Dropping Gentoo&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#dropping-gentoo title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We’ve been using &lt;a class="reference external" href=http://gentoo.org&gt;Gentoo&lt;/a&gt; for shipped products since June 2005, and as
a development platform since September 2004.  A long time, an incredibly long
time in fact.&lt;/p&gt;
&lt;p&gt;Today our final Gentoo using product shipped, with a single scheduled update
promised in Q3-2015.  It is kind of sad day, but we all knew that day was coming
and it takes only a little inside knowledge to know why.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class=last&gt;A couple of people have rightly pointed out that I was a little harsh in
this document, so I’ve pushed a &lt;a class="reference internal" href=http://jnrowe.github.com/articles/dropping_gentoo_reflex.html&gt;&lt;em&gt;followup&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=landscapes-have-changed&gt;
&lt;h2&gt;Landscapes have changed&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#landscapes-have-changed title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back when we started using Gentoo it was clearly the best choice for what we
needed; a easily coercible base on which to construct our Linux devices.  There
actually weren’t a lot of viable choices back then.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href=http://debian.org&gt;Debian&lt;/a&gt;, which many of us loved, felt like the only mainstream distribution we
could have used.  Unfortunately, it wasn’t available for the arches we needed.
It also didn’t package many of things we used at that point, but to be fair
there were &lt;abbr title="Intent to Package"&gt;ITPs&lt;/abbr&gt; (were they called that beck then?)
already floating about for most of them.&lt;/p&gt;
&lt;p&gt;The “from source” options available then would, for all intents and purposes,
have meant taking on the support costs of the entire stack which nobody wanted
to commit to.  As it turns out that burden slowly crept up on us over the next
ten years anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=take-a-left-in-100-metres&gt;
&lt;h2&gt;Take a left in 100 metres&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#take-a-left-in-100-metres title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Regrettably over the years we diverged, almost to the point that saying we use
Gentoo almost feels like a lie.&lt;/p&gt;
&lt;p&gt;Before our first product shipped we had already switched to maintaining the
essential toolchain packages like GCC and glibc ourselves.  I can’t recall the
specific reasons as I didn’t work on them, but I recall agreeing with them.&lt;/p&gt;
&lt;p&gt;At some point we started using a custom package manager, initially just a new
drop-in resolver and eventually a completely independent package manager.
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/tt&gt; was ferociously buggy in places and also appeared to be moribund, so
it seemed like the correct choice.  We never supported the full range of
features that Gentoo’s &lt;a class="reference external" href=http://wiki.gentoo.org/wiki/Project:PMS&gt;PMS&lt;/a&gt; now defines, but it made the support surface a lot
nicer.&lt;/p&gt;
&lt;p&gt;There was a point where we seriously considered moving to a &lt;a class="reference external" href=http://en.wikipedia.org/wiki/Conary_(package_manager)&gt;Conary&lt;/a&gt;-based
infrastructure.  It did loads of the cool things we wanted to do and it mostly
fitted out workflow with its mostly “Gentoo done right” feel.  Sadly, it has
a &lt;abbr&gt;CLA &amp;lt;Contributor License Agreement&lt;/abbr&gt; which none of us could sign that
practically guaranteed we would eventually be in the same place we were with
Gentoo.  May have been a fortuitous roadblock in the end, as Conary never gained
the traction it once promised.&lt;/p&gt;
&lt;p&gt;Had we waited another five months, there would have been another open source
package manager for Gentoo we could have easily switched to and hacked on.
There is perhaps a pattern here...&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=upstreaming-changes&gt;
&lt;h2&gt;Upstreaming changes&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#upstreaming-changes title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course, running a non-standard package manager and a thick layer of custom
packages at the bottom of the stack made contributing changes back upstream very
time consuming.  Many of us tried, but eventually most stopped.&lt;/p&gt;
&lt;p&gt;Anyone who was running Gentoo in the mid-00’s will recall the giant wedge that
got in the way of reporting bugs, and sadly by the time it disappeared many of
us had lost interest.&lt;/p&gt;
&lt;p&gt;If you had ran the gauntlet and lucked out with a bug in front of a developer,
there was a new barrier that many were irked by: lack of attribution.  It never
bothered me, but the number of developers who wouldn’t even reference a bug
report in the ChangeLog was huge.  That taught me a valuable personal lesson,
I always attribute a commit to the reporter even when I’ve significantly mangled
a patch to make it acceptable.&lt;/p&gt;
&lt;p&gt;For a time, to ease the annoyance we used to play a game where we reported real
bugs with patches, but using silly data for &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;emerge&lt;/span&gt; &lt;span class=pre&gt;--info&lt;/span&gt;&lt;/tt&gt;.  It was
definitely fun it lasted, but it didn’t solve the pain points.  Not wanting to
be associated with the bugs made people use pseudonyms, which also removed the
hope of attribution too.&lt;/p&gt;
&lt;p&gt;I kept trying to report trivial and cosmetic bugs - ones which didn’t require
a huge upfront investment - for some time, but they’d go unchanged for weeks or
months so I stopped doing that too&lt;/p&gt;
&lt;p&gt;Looking around now there is an automatically generated list of bugs with patches
which we’ve fixed but haven’t upstreamed, and a few random entries from it look
like this:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/jay.rst
&lt;span class=go&gt;1157 /home/jay/gentoo/to_push/jay.rst&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/mattias.rst
&lt;span class=go&gt;2104 /home/jay/gentoo/to_push/mattias.rst&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/chrisp.rst
&lt;span class=go&gt;873 /home/jay/gentoo/to_push/chrisp.rst&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That genuinely upsets me greatly.  The amount of potential duplicated effort
they represent is enormous, and I don’t even want to attempt to put a figure on
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=supporting-upstream&gt;
&lt;h2&gt;Supporting upstream&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#supporting-upstream title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’re entirely to blame.  We always planned on supporting upstream in whichever
way we could.  That fell down for instances beyond sending patches too.&lt;/p&gt;
&lt;p&gt;The story that comes to mind is from a chance encounter at LinuxWorld back in
2005.  We had managed to gather a whole heap of really cool hardware to donate
to projects who were exhibiting on the day we attended, and it felt nice handing
out toys as a little “thank you” to the projects we depended on.&lt;/p&gt;
&lt;p&gt;It wasn’t all roses though.  My manager went off to offer some ARM-based devices
to the Gentoo guys who were there, but was met with “tremendous rudeness” from
the person manning their desk at the time.  In hindsight people could have
predicted a similar outcome, and it was just an unlucky moment for him to walk
up.  That soured his enthusiasm no end, and it was the last time we managed to
score bags of toys to randomly give away to developers on any project.&lt;/p&gt;
&lt;p&gt;If you were one of the people who received a Nokia tablet or ZipIt in the Hand
&amp;amp; Flower that evening, you now know the reason and perhaps you can even guess
who to thank.&lt;/p&gt;
&lt;p&gt;A year or so later I watched a similar scenario play out at the Gentoo UK
conference with a potential sponsor and the same developer.  Evening beers were
met with other people telling stories about that same person, which was a shame
as it probably cost them a few good cash and infrastructure sponsors that day
alone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=support-costs&gt;
&lt;h2&gt;Support costs&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#support-costs title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over time we’ve come to support most of the tree that people refer to as
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;gentoo-x86&lt;/span&gt;&lt;/tt&gt; ourselves.  The toolchain changes we needed at the time
necessitated supporting a few packages further up the stack.  Our desire to trim
the tree of a few categories that were problematic, meant replacing a variety of
packages with then unavailable dependencies.&lt;/p&gt;
&lt;p&gt;And there were many other examples too...&lt;/p&gt;
&lt;div class=section id=matchbox&gt;
&lt;h3&gt;matchbox&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#matchbox title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We packaged &lt;a class="reference internal" href=http://jnrowe.github.com/articles/dropping_gentoo.html#matchbox&gt;matchbox&lt;/a&gt; and its associated packages a long, long time before they
hit the official tree.  It was the first real pain point we had with packages
appearing in the tree after we had already been using them.&lt;/p&gt;
&lt;p&gt;When they did eventually hit the tree we had to carry workarounds for years.  At
some point we stopped trying and just scrubbed the ebuilds that got in the way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=python&gt;
&lt;h3&gt;Python&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#python title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The state of the Python packaging a few years ago made us take the jump to
replace or remove anything that packaged a Python module.  Initially very time
consuming, but it saved an enormous amount of grief.&lt;/p&gt;
&lt;p&gt;I suspect we could move closer to upstream at this point, but the point is now
moot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=systemd&gt;
&lt;h3&gt;systemd&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#systemd title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We switched to &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;systemd&lt;/span&gt;&lt;/tt&gt; before the package was in upstream’s tree, and we
have had to keep supporting it to this day because of insurmountable packaging
differences.&lt;/p&gt;
&lt;p&gt;In a few places that means taking on packages with a reverse dependency too,
where differences create issues.  And it clearly means taking on any package
that depend on &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;openrc&lt;/span&gt;&lt;/tt&gt; or Gentoo’s &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;baselayout&lt;/span&gt;&lt;/tt&gt; package.  Those packages
are becoming fewer and fewer by the day though, so that would have become
a non-issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=x-org&gt;
&lt;h3&gt;X.org&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#x-org title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We had been packaging x.org’s packages to work around some implementation
differences with upstream since the dawn of modular X.  Mostly just to do with
how dependencies were specified to start with, but they’re not even similar
anymore.&lt;/p&gt;
&lt;p&gt;Luckily there isn’t a great deal of churn in the packages we care about for the
most part, so it never caused a huge time sink.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=the-end-is-nigh&gt;
&lt;h2&gt;The end is nigh&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#the-end-is-nigh title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At some point it began to feel like we were maintaining our own distribution
from end-to-end, and that wasn’t fun.  It also wasn’t what any of us needed to
do, and the time it was taking measurably ate in to &lt;em&gt;real&lt;/em&gt; project time.&lt;/p&gt;
&lt;p&gt;The decision to start weaning ourselves off of Gentoo was made back in the
summer of last year, and it has finally started to come in to effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=the-times-they-are-a-changing&gt;
&lt;h2&gt;The Times They Are a-Changing&lt;a class=headerlink href=http://jnrowe.github.com/articles/dropping_gentoo.html#the-times-they-are-a-changing title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are plenty of good alternatives out there now for building systems that
need to run on a variety of architectures.  Some binary, some source-based and
a few hybrid approaches.&lt;/p&gt;
&lt;p&gt;The project I’m working on right now is using Debian &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;testing&lt;/span&gt;&lt;/tt&gt;, and it appears
to be working out fine.  Some things still annoy me, like the time it takes to
patch and recreate a package.  It is a trivial thing with Gentoo, but requires
far too much work with Debian.  Perhaps we’ll improve the workflow enough as we
develop more experience.&lt;/p&gt;
&lt;p&gt;We’ve also hit a good moment to use Debian because a whole heap of work has gone
in to making Debian easier to bootstrap, and it definitely shows.  When I find
out who has done all the magic to make that happen I’ll scribble down a note to
owe them some beers.&lt;/p&gt;
&lt;p&gt;We’re also lucky in that we employ two Debian developers, one is practically
a funded full-time Debian developer.  They’re incredibly knowledgeable and it
makes working with Debian a lot easier, so thanks guys!&lt;/p&gt;
&lt;p&gt;All told, things look good.  We’re still playing with some alternatives and as
yet no concrete decisions have been made, but I feel like we’re on the right
track for the next ten years.&lt;/p&gt;
&lt;p&gt;So long Gentoo, and thanks for all fish!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Delayed flashover</title><link href="http://jnrowe.github.com/thoughts/delayed_flashover.html" rel="alternate"></link><updated>2014-04-09T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/delayed_flashover.html</id><summary type="html">&lt;div class=section id=delayed-flashover&gt;
&lt;h1&gt;Delayed flashover&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/delayed_flashover.html#delayed-flashover title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This weekend a very good friend of mine is taking part in the London Marathon,
and we’re all looking forward to the no-doubt incredible time she’ll finish in.&lt;/p&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;“Fun run” is the excuse losers give &lt;em&gt;before&lt;/em&gt; a race&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Normally, I wouldn’t bother writing anything about such an event but this is
different.  It is different because she is practically a hero to me.&lt;/p&gt;
&lt;p&gt;I’m talking about Rach.&lt;/p&gt;
&lt;p&gt;Last summer she gave birth to a bouncing baby girl &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/delayed_flashover.html#s1 id=id1&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Seven months later she is going to complete a marathon.  I would say “planning
to complete”, but I know better at this point.&lt;/p&gt;
&lt;p&gt;This is made all the more impressive because a decade ago we thought we’d lose
her following a serious accident.  As time went on and things improved the
realisation that we’d have a wheelchair-bound-for-life friend kicked in.  And
slowly it became clear that we’d have a crutch-bound-for-life friend.  And
eventually it became quite obvious we’d have a soul-filling running machine to
envy once again.&lt;/p&gt;
&lt;p&gt;Now she has been lucky, very lucky.  But we make our own luck too, and she is an
awesome luck making machine.  To poorly misuse a Pasteur quote that I already
tend to overuse, “luck favours the prepared mind.”&lt;/p&gt;
&lt;p&gt;If I have one tip for the Dear Reader this week it is this: Keep your
sponsorship options in check, she’ll destroy the target time.  Go Rach!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class=last&gt;&lt;strong&gt;Update&lt;/strong&gt;: Sub-four finish, ‘nuff said.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame=void id=s1 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/delayed_flashover.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;a term which always make me think I should call child services &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/delayed_flashover.html#s2 id=id2&gt;[2]&lt;/a&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame=void id=s2 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/delayed_flashover.html#id2&gt;[2]&lt;/a&gt;&lt;td&gt;a term which makes me think they bring fizzy drinks and sugary cakes&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary></entry><entry><title>Hitting life&amp;#8217;s reset button</title><link href="http://jnrowe.github.com/thoughts/reset_in_ten.html" rel="alternate"></link><updated>2014-02-24T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/reset_in_ten.html</id><summary type="html">&lt;div class=section id=hitting-life-s-reset-button&gt;
&lt;h1&gt;Hitting life’s reset button&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/reset_in_ten.html#hitting-life-s-reset-button title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Seven months ago while enjoying a little Saturday afternoon cricket picnic,
a friend posed the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;“If life had a reset button when would you have used it?”&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, I understand the point and the purpose of this.  Catherine was hoping to
elicit some deep truths, with the eventual goal that people would bond further.
That doesn’t mean I played the game though.&lt;/p&gt;
&lt;p&gt;I recall my answer was somewhat flippant:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;“I’d have used it repeatedly half an ago, until I figured out the magic
incantation that convinces that cashier in the ‘Express to join me for
a picnic...  and then I would have ditched you suckers.”&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;It was an honest-ish answer;  I mean yeah, she may have been worth messing with
the universe for.  It wasn’t, however, the correct kind of reply.  I should
have been describing some dreadful mistake I made, both to make my friends
laugh and also to let them in a little closer.&lt;/p&gt;
&lt;p&gt;I didn’t choose to answer that way to be deliberately obtuse, I answered
that way simply because it was how I felt at the time.&lt;/p&gt;
&lt;p&gt;Since then, and I direct you to the first three words of this post, I’ve been
mildly obsessed with the question.  I have a twenty heading document where I’ve
described branch points in my life, specifically the ones with the deepest joy
and most painful regrets.  I hoped I’d see a pattern of some kind, and that
would allow me to direct myself toward the happier paths in future.&lt;/p&gt;
&lt;p&gt;I didn’t, and it hasn’t.  Not even a little bit.&lt;/p&gt;
&lt;p&gt;I don’t seem to find myself in the situations where I could repeat the most
foolish decisions that I really regret.  And I wonder whether that is because
I’ve eventually been smart enough to learn my lessons, or stupid enough that
I’m unable to spot the new mistakes yet.&lt;/p&gt;
&lt;p&gt;The whole process has been very cathartic though. Despite having
a &lt;em&gt;significantly&lt;/em&gt; higher proportion of regrets than successes in my list,
I kind of enjoying reviewing it in a cringe ridden way.&lt;/p&gt;
&lt;p&gt;I’d really like to thank Catherine for offering the mirror, it has been
intriguing in a terrifying and horrific kind of way.  Unfortunately, I can’t.
It is too late, and there is another lesson for me to learn.&lt;/p&gt;
&lt;hr class=docutils&gt;
&lt;p&gt;For what it’s worth, that girl still works at the ‘Express and I’ve done
nothing useful about it.  Internet, this is the foolish truth I proffer you
today.  The others well, they’ll hopefully remain hidden away from view.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Return to rambling</title><link href="http://jnrowe.github.com/thoughts/the_returned.html" rel="alternate"></link><updated>2014-01-27T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/the_returned.html</id><summary type="html">&lt;div class=section id=return-to-rambling&gt;
&lt;h1&gt;Return to rambling&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/the_returned.html#return-to-rambling title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I kept a public journal from about 2003 until 2009, with a new entry about every
three days.  I enjoyed the act of writing it greatly, and often looked forward
to the period of contemplation it would create.  However, eventually I found
I had to kill it, but not because of waning enthusiasm as is so often the case.&lt;/p&gt;
&lt;p&gt;I had simply become incredibly frustrated and entirely fed up with having to
censor myself; “unprofessional” thoughts, fear of discussing hot political
issues, &amp;amp;c.  I realised, towards the end, that I would spend about the same
amount of time editing a post as I would writing it.  Sometimes I would spend an
hour on a short post and finally delete it entirely.  &lt;em&gt;All&lt;/em&gt; the love was gone,
&lt;em&gt;all&lt;/em&gt; of it.&lt;/p&gt;
&lt;div class=section id=unleash-the-shout-hole&gt;
&lt;h2&gt;Unleash the shout-hole&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/the_returned.html#unleash-the-shout-hole title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So why return?  Simple, I’ve reached a stage in my life where I don’t have to be
quite so concerned with outbound appearances for the sake of professional life,
and I should feel free to express myself how I wish in my personal life.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, I’m not about to start writing about whatever noisy issue
I can find just because I can.  I’m not, nor have I ever wished to be, a tabloid
journalist.&lt;/p&gt;
&lt;p&gt;The purpose of this resurrection and the previous incarnations has always been
as an outlet for some of my views.  It is a side-effect should it be read by
others.  However, some of my fondest memories of writing have been the
conversations that have arisen from folks who’ve contacted me about an entry.
I’ve engaged with some extremely interesting people this way, some of whom
I remain in touch with to this day.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;always&lt;/em&gt; have an open invitation to thank me, correct me, shame me or berate
me for the opinions I express or information I spread.  And that invitation is
absolutely extended to this site and the new content I post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Murdering morality with ferocious fire</title><link href="http://jnrowe.github.com/thoughts/important_balance.html" rel="alternate"></link><updated>2014-01-25T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/important_balance.html</id><summary type="html">&lt;div class=section id=murdering-morality-with-ferocious-fire&gt;
&lt;h1&gt;Murdering morality with ferocious fire&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/important_balance.html#murdering-morality-with-ferocious-fire title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;“Morality is herd instinct in the individual.”&lt;/p&gt;
&lt;p class=attribution&gt;—Friedrich Nietzsche&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;When I look back at my life’s work thus far I often find myself asking the
question “was it worth it?”&lt;/p&gt;
&lt;p&gt;That question isn’t meant in some kind of crazed suicidal manner, I just mean
specifically the projects I’ve worked on and the things I do.  Are they just?
Should I be doing this?&lt;/p&gt;
&lt;p&gt;I truly hope it doesn’t come as a surprise to people who know me, but I consider
myself to be a person of strong moral values &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/important_balance.html#s1 id=id1&gt;[1]&lt;/a&gt;.  I probably shouldn’t admit
this publicly, but over the years I have turned down several projects I didn’t
feel ethically comfortable working on.  And it has &lt;em&gt;demonstrably&lt;/em&gt; held my career
progression back.  I mostly fine with that.  No, I really am.&lt;/p&gt;
&lt;p&gt;The simple fact is that I’m due for a HR review, overdue actually, and these
questions have started to come to the fore again.  I’ll lay in bed thinking
about them, I’ll sit here typing about them, I’ll judge other people to gauge
the validity of my position and I’ll bore people who’ll listen with my
dilemmas.&lt;/p&gt;
&lt;p&gt;One shouldn’t really use the word “dilemma” here, these issues are practically
the definition of “First World Problems”.  Part of me is disgusted to waste so
much time on frankly trivial introspection, but for better or worse it is
a &lt;em&gt;huge&lt;/em&gt; part of my self-identity.&lt;/p&gt;
&lt;p&gt;I feel that – to some extent – I’m living a weak, self-imposed and
inconsequential version of &lt;a class="reference external" href="http://en.m.wikipedia.org/wiki/Pascal's_wager"&gt;Pascal’s Gambit&lt;/a&gt;.  I know full well that the works
I’ve rejected have been seen to completion by others.  I’ve not scuppered them,
nor have I even attempted to.  Not having me work on them has perhaps even made
them far more effective at whatever aspect I took exception to.  I’m making
moral decisions with no weight beyond my own mind, no ripple beyond my own
insignificant life puddle and no wake beyond this now excessively long essay.&lt;/p&gt;
&lt;p&gt;However, in the face of these realisations I still find myself unable to
consider the decisions wrong.  I’d still choose to reject them now, and
I suspect that will remain true in the future.  I like that these decisions are
defensible to &lt;em&gt;me&lt;/em&gt;, that they &lt;em&gt;must&lt;/em&gt; be defensible to me.  I love that the thing
that keeps me awake at night is not the thought of the possibly nefarious
effects of my works, but rather the exceedingly minor issue of not having
a glistening and well-specced M6 in the garage.&lt;/p&gt;
&lt;p&gt;Now, let me sleep.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame=void id=s1 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/important_balance.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;For those values to be strong doesn’t necessarily mean they have to
line up with your definition of “strong moral values” ;)&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dopplr defects</title><link href="http://jnrowe.github.com/thoughts/dopplr_effects.html" rel="alternate"></link><updated>2014-01-06T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/dopplr_effects.html</id><summary type="html">&lt;div class=section id=dopplr-defects&gt;
&lt;h1&gt;Dopplr defects&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/dopplr_effects.html#dopplr-defects title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;Dopplr was a free social networking service, launched in 2007, that allowed
users to create itineraries of their travel plans and spot correlations with
their contacts’ travel plans in order to arrange meetings at any point on
their journey.&lt;/p&gt;
&lt;p class=attribution&gt;—&lt;a class="reference external" href=http://en.m.wikipedia.org/wiki/Dopplr&gt;dopplr&lt;/a&gt; wikipedia entry&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;A couple of months ago &lt;a class="reference external" href=http://en.m.wikipedia.org/wiki/Dopplr&gt;dopplr&lt;/a&gt; was shut down.  It was perhaps my most
favouritistist of websites, but I didn’t use it.  In fact, I hadn’t visited in
nearly three years and it contained no data I was interested in saving…  but
I still counted it among my favourite sites.&lt;/p&gt;
&lt;p&gt;dopplr had an elegant, yet jaw droppingly beautiful design; a marvel of
simplicity and discoverability.  The functionality was great, who doesn’t like
the idea of discovering happy collisions with old friends?  The implementation
was cool, introducing me to OpenID.  I loved the site enough to read the
&lt;a class="reference internal" href=http://jnrowe.github.com/thoughts/dopplr_effects.html#backstory&gt;backstory&lt;/a&gt; when the shutdown news was being passed around, but I still didn’t
want to use it again.  The cost for this functionality was just far too great
for me.&lt;/p&gt;
&lt;p&gt;I simply couldn’t stomach giving up the information that dopplr required to
function.  It required an enormous amount of vigilance to police your own data
on the way in, to make sure you weren’t sharing things you couldn’t or
shouldn’t.  You could often glean things that people didn’t perhaps realise they
were sharing.  A friend’s weekend to somewhere odd like Bedford wasn’t just
a sign that you could meet up for lunch, it was probably also a sign that they
were visiting Lockheed Martin &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/dopplr_effects.html#s1 id=id1&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;“Oh, Kevin is going to be near me next week!  Hmm, either he is on an
exceptionally long pub crawl or he is about to sign a contract”&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I know that dopplr was cool though, it was powerful and it did squeeze a lot
more serendipity out of the world(I forget their actual tagline).  I couldn’t
imagine a better present for 2014 than to find a replacement that I could
actually use, but sadly I can’t even picture how it should work.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame=void id=s1 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/dopplr_effects.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;Your personal examples may vary&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;span class=target id=backstory&gt;&lt;/span&gt;&lt;/div&gt;
</summary></entry><entry><title>Tell me a nice story, please</title><link href="http://jnrowe.github.com/thoughts/nice_stories.html" rel="alternate"></link><updated>2013-12-23T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/nice_stories.html</id><summary type="html">&lt;div class=section id=tell-me-a-nice-story-please&gt;
&lt;h1&gt;Tell me a nice story, please&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#tell-me-a-nice-story-please title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I’m fed up of hearing bad stories, I really am.  Often it feels like every
person I know simply revels in the misfortune or missteps of others, and it is
beginning to truly annoy me.&lt;/p&gt;
&lt;p&gt;I can’t work out if it is the result of malicious envy, angry spitefulness or
just a sad realisation that those stories seem to engage others more easily.
That said I don’t believe the reason matters, it is wrong and it needs to stop.&lt;/p&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;“You cannot strengthen one by weakening another; and you cannot add to the
stature of a dwarf by cutting off the leg of a giant”&lt;/p&gt;
&lt;p class=attribution&gt;—Benjamin Franklin Fairless&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class=section id=in-examples&gt;
&lt;h2&gt;In examples&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#in-examples title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hmm, this is hard.  How does one express examples without explicitly re-telling
the nasty stories?&lt;/p&gt;
&lt;p&gt;The stories you are about to hear are true.  The scenes have been munged to
protect the innocent.&lt;/p&gt;
&lt;div class=section id=exhibit-a&gt;
&lt;h3&gt;Exhibit A&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#exhibit-a title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;About five years ago I found out that an old school friend had made a serious,
yet possibly singular, morally irresponsible mistake.  This is a man who was
close to the top of his chosen career tree, with a string of impressive
achievements to his name.&lt;/p&gt;
&lt;p&gt;The thing that bugged me about it, and to this day it is still does, is that I’d
never heard anyone remark on his successes prior to this.  I was &lt;em&gt;entirely&lt;/em&gt;
unaware of how his life had turned out prior to this story, and I was completely
unaware of any of the success he had made for himself.&lt;/p&gt;
&lt;p&gt;However, the moment there is a tale with the sprinkled essence of schadenfreude
it felt like you couldn’t go a week without being told about it.  People would
post about it on social-network-du-jour, drop it in to unrelated conversations
and literally stop you in the street to tell you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why couldn’t I have heard a fantastic story about an old friend’s success when
trying to feed my shocking biscuit habit at Sainsbury’s?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=exhibit-b&gt;
&lt;h3&gt;Exhibit B&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#exhibit-b title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the mid-naughties a conference friend sold his web service for an apparently
healthy chunk of change.  I remember bumping in to the founding team at a boring
conference and listening to their happiness at the outcome.  They were looking
forward to working on the service itself more, and removing some of the
day-to-day woes of running the business on fumes.  All seemed good.&lt;/p&gt;
&lt;p&gt;That same day we, along with a bunch of ten or so others, headed off for lunch.
We got to hear some interesting war stories, and some fun tales of moments when
they were writing their “service suicide” notes.  The end of the lunch arrives,
and they decided to pick up the whole tab.  An absolutely unnecessary gesture
given that most, if not all, of us were expensed for the day anyway.  They did
it simply because they’re nice guys.&lt;/p&gt;
&lt;p&gt;As we started to break up and head back I noticed a few people were now telling
other stories.  Some had heard that the specific amount of money wasn’t worth
the grief, others expressed doubts the site would live on post acquisition, etc.&lt;/p&gt;
&lt;p&gt;I hadn’t realised initially, but this change in tone appeared to happen almost
the moment the founders left.  Friends who had found success, regaled us with
their stories and kindly paid for our semi-liquid lunch were suddenly being
beaten down for their apparent success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why can’t people just find some happiness in the happiness of others?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=what-to-do&gt;
&lt;h2&gt;What to do&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#what-to-do title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m not perfect, well not quite anyway ;)&lt;/p&gt;
&lt;p&gt;If I wasn’t so terribly, terribly ill today I’d be preparing to head to our
Winterval shutdown party.  You’d no doubt find I like to have a little gossip
and moan about things I shouldn’t, and I might even commit a couple of the faux
pas I’ve mentioned above.  Yes, that upsets me. It really does, but I’m trying
to change.&lt;/p&gt;
&lt;div class=section id=a-pledge&gt;
&lt;h3&gt;A pledge&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#a-pledge title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you catch me using the failure of others for entertainment or to make
a point, feel free to berate me for it.  It might even be time to start offering
fantastic prizes &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/nice_stories.html#s1 id=id1&gt;[1]&lt;/a&gt; to people who catch me doing so, as it is probably the only
way I’ll really learn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=what-i-want-to-hear&gt;
&lt;h2&gt;What I want to hear&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/nice_stories.html#what-i-want-to-hear title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Simply tell me about that friend who is getting married, don’t tell the story by
mentioning that it is their third marriage.  I also don’t need to hear about
that messy relationship breakdown.  [The exception – of course – being if it
is that one girl who I’d sell my soul for a second chance with]&lt;/p&gt;
&lt;p&gt;Tell me about that friend whose child aced the &lt;a class="reference external" href=http://en.wikipedia.org/wiki/Eleven_plus_exam&gt;Eleven Plus&lt;/a&gt;, and has been
accepted in to the school we all wish we had attended.&lt;/p&gt;
&lt;p&gt;Tell me about that old school friend who is building their own &lt;a class="reference external" href=http://www.channel4.com/programmes/grand-designs&gt;Grand
Designs&lt;/a&gt;-esque house.&lt;/p&gt;
&lt;p&gt;I guess there is one reason I want to hear the bad stories, and it is very
simple.  &lt;em&gt;If&lt;/em&gt; there is some actionable thing I can do to help, then I &lt;em&gt;want&lt;/em&gt; to
know about it.  If that isn’t the case, just keep it to yourself.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame=void id=s1 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/nice_stories.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;Okay, probably just a coffee or a beer&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Side-projects</title><link href="http://jnrowe.github.com/thoughts/side_projects.html" rel="alternate"></link><updated>2013-12-16T00:00:00Z</updated><id>http://jnrowe.github.com/thoughts/side_projects.html</id><summary type="html">&lt;div class=section id=side-projects&gt;
&lt;h1&gt;Side-projects&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#side-projects title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Chatting with my brother yesterday he expressed some disbelief when I mentioned
&lt;em&gt;yet another&lt;/em&gt; friend who has a website related to some topic we were discussing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;Does everyone you know run a website?&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, yes, they do.&lt;/p&gt;
&lt;p&gt;It hadn’t really occurred to me until I was reading a write up of a co-workers
weekend hack.  The majority of nerdy people I know run websites, create
iPhone/android apps or have other side projects in various states of completion.
It’s just How Things Work®&lt;/p&gt;
&lt;p&gt;I guess it is mostly a cultural issue, one which is quite strong behind the
engineering side of the curtain in my workplace.  Sure, there are some “5:01”
types who are out of the door as soon as the bell rings, but there are an awful
lot who extend their tech creations in to a downtime hobby or side business.&lt;/p&gt;
&lt;p&gt;To relate this to my brother I think of a family party we attended this past
weekend.  When people asked me what my brother does I proudly say he works in
logistics, and I like to tell people how well he’s done for himself.  When
talking to the extended family that often seemed to end up being about material
possessions or such.  However, I’ve noticed in the past when I’m talking to
people I’d call friends it often quickly digresses in to strange discussions
about box packing, routing, &lt;a class="reference external" href=http://en.wikipedia.org/wiki/Travelling_salesman_problem&gt;the curse of travelling salesmen&lt;/a&gt; or &lt;a class="reference external" href=http://en.wikipedia.org/wiki/Bridges_of_Konigsberg&gt;bridges in
some foreign land&lt;/a&gt;.  Because of the math and technology implications many of
my friends have written tools to explore some of the practical and theoretical
issues faced in logistics… for fun.&lt;/p&gt;
&lt;div class=section id=it-is-all-about-me&gt;
&lt;h2&gt;It is all about me&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#it-is-all-about-me title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m not working on any public facing websites right now &lt;a class=footnote-reference href=http://jnrowe.github.com/thoughts/side_projects.html#s1 id=id1&gt;[1]&lt;/a&gt;, but I do play
with a few public facing projects from time to time that should head towards
proving my point.  I’m picking a few semi-randomly to illustrate a little
diversity.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class=last&gt;To save myself some researching effort I’ll only link to things from &lt;a class="reference external" href=https://github.com/JNRowe/&gt;my
GitHub profile&lt;/a&gt; or links from my browser’s bookmarks, but that should be
descriptive enough to get the point across.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=gentoo&gt;
&lt;h3&gt;Gentoo&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#gentoo title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the past decade I’ve spent a lot of time hacking on things related to
&lt;a class="reference external" href=http://gentoo.org/&gt;Gentoo&lt;/a&gt;.  Some of that for work projects and some of it for &lt;a class="reference external" href=https://jnrowe-misc.rtfd.org/&gt;personal
projects&lt;/a&gt;.  I’ve also experienced my fair share of troubles, and have &lt;a class="reference external" href="https://bugs.gentoo.org/buglist.cgi?email1=jnrowe%40gmail.com&amp;amp;emailassigned_to1=1&amp;amp;emailcc1=1&amp;amp;emaillongdesc1=1&amp;amp;emailreporter1=1&amp;amp;emailtype1=substring&amp;amp;query_format=advanced"&gt;reported
a few bugs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At one time I even hoped to &lt;a class="reference external" href="https://bugs.gentoo.org/show_bug.cgi?id=142090"&gt;become a developer&lt;/a&gt;, but that didn’t work out for
a bunch of reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=github2&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;github2&lt;/span&gt;&lt;/tt&gt;&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#github2 title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a year I &lt;a class="reference external" href=https://github.com/ask/python-github2/graphs/contributors&gt;maintained&lt;/a&gt; a relatively popular &lt;a class="reference external" href=https://github.com/ask/python-github2&gt;API wrapper&lt;/a&gt; to GitHub.  I did
this because I found it fun.  It provided no economic benefit to me, and I never
expected it to.  I know a lot of people used it when building their own toy
projects and websites, because many were kind enough to link to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=pyisbn&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;pyisbn&lt;/span&gt;&lt;/tt&gt;&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#pyisbn title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For seven years I’ve maintained a small library for &lt;a class="reference external" href=https://github.com/JNRowe/pyisbn/&gt;validating ISBNs&lt;/a&gt;.
&lt;em&gt;Yes, that is absolutely as boring as it sounds&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was never meant to be used by others, I just needed something to validate
entries in my e-book database.  Other people started using it, many for their
own weird side projects including a number of book retail websites.  It has
amassed literally tens of thousands of downloads from PyPI, but you really
shouldn’t trust the dubious statistics from PyPI ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=rdial&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rdial&lt;/span&gt;&lt;/tt&gt;&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#rdial title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href=http://rdial.rtfd.org/&gt;rdial&lt;/a&gt; is a time tracking tool, and a perfect example for me.  I played with it
for over a year before anyone else saw it, just because it scratched an itch
I had.  I never imagined it would be useful to others.  Turns out it was, and
there is now a small yet faithful band of users.&lt;/p&gt;
&lt;p&gt;I even received the great honour of a few summer evening beers for releasing it.
A beer being second only to a patch in the table of project endorsements
that I subscribe to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=upoints&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;upoints&lt;/span&gt;&lt;/tt&gt;&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#upoints title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href=https://jnrowe.github.com/upoints/&gt;upoints&lt;/a&gt; is a strange one.  It started as a &lt;a class="reference external" href=http://jnrowe.github.io/upoints/geolocation_and_pathcross.html&gt;stupid hack&lt;/a&gt; to figure out some
silly travel planning drama, it proceeded to take on a life of its own.  Over
the years it attracted a fair amount of users, and I still receive email about
it now.&lt;/p&gt;
&lt;p&gt;It did have some tangible benefit though, the sadly now defunct website it
eventually spawned opened some nice doors for me.  I didn’t know it would or
could at the time, so it didn’t affect how I spent my time when playing with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=section id=cut-from-the-pattern&gt;
&lt;h2&gt;Cut from the pattern&lt;a class=headerlink href=http://jnrowe.github.com/thoughts/side_projects.html#cut-from-the-pattern title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This isn’t specific to me, or even to the particularly nerdy among my
co-workers.  If you &lt;a class="reference external" href=https://github.com/explore&gt;dig around on GitHub&lt;/a&gt;, or even &lt;a class="reference external" href=http://makezine.com/&gt;makezine&lt;/a&gt;, you’ll see
people creating purely because they can.  This isn’t a new phenomenon either.
If you were around pre-GitHub you’d see people making things on Sourceforge.  If
you were around before Sourceforge, you’ll remember the good old days when life
was simpler and people held doors open for you.&lt;/p&gt;
&lt;p&gt;The point is simple.  Yes, I &lt;em&gt;may&lt;/em&gt; know someone who is working on
project/website related to some topic, but that is only because many of the
people I know are spitting out new projects on what often appears to be a weekly
basis.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame=void id=s1 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/thoughts/side_projects.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;I really don’t count &lt;a class="reference external" href=http://jnrowe.github.io/&gt;this site&lt;/a&gt;, as it
is just a jumbled content dump with no real purpose.&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>TDD distro development</title><link href="http://jnrowe.github.com/articles/tdd_distros.html" rel="alternate"></link><updated>2011-06-13T00:00:00Z</updated><id>http://jnrowe.github.com/articles/tdd_distros.html</id><summary type="html">&lt;div class=section id=tdd-distro-development&gt;
&lt;h1&gt;TDD distro development&lt;a class=headerlink href=http://jnrowe.github.com/articles/tdd_distros.html#tdd-distro-development title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using &lt;abbr title="Test Driven Development"&gt;TDD&lt;/abbr&gt; for distribution development is a
hot topic in some of the more geeky circles I move in, and I’m very happy about
this.  Anything that increases the robustness of my desktop computer, my phone
or any other device I use is a great goal!&lt;/p&gt;
&lt;div class=section id=why&gt;
&lt;h2&gt;Why?&lt;a class=headerlink href=http://jnrowe.github.com/articles/tdd_distros.html#why title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This answer should be obvious; more testing is good.  However, what about the
current system needs improving?&lt;/p&gt;
&lt;p&gt;The first point is that commonly deployed distributions base their stabilisation
processes on the lack of &lt;em&gt;reported&lt;/em&gt; bugs.  This implies that packages with a
minimal set of tests(or human testers in the common case) go through much less
testing than popular packages on their way to be marked as stable.  Of course,
this also implies that bugs in popular packages that will affect many users are
often discovered before a package is stabilised.&lt;/p&gt;
&lt;p&gt;The second point is that a small set of bugs are actually regressions of
previously fixed bugs.  This, by itself, is a reason to look at alternatives.
Fixing the same bug more than once is an horrendous waste of developer
resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=how&gt;
&lt;h2&gt;How?&lt;a class=headerlink href=http://jnrowe.github.com/articles/tdd_distros.html#how title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We, the fine folks of AST’s London office, already use a test-based
stabilisation policy in the preparation of our distribution images.  Adding
tests for new and bumped packages is something Leal Hétu and I have been
enforcing for the past few years.&lt;/p&gt;
&lt;p&gt;Our packages and distribution images are used for the embedded devices we sell,
the desktops we develop on and the laptops we play on.  The methods we use vary
greatly, so I’m going to present the simple case of testing console applications
only.  It is the practise that is important, not the process.&lt;/p&gt;
&lt;p&gt;The easiest method we use is via &lt;a class="reference external" href=http://pypi.python.org/pypi/shelldoctest/&gt;shelldoctest&lt;/a&gt;, a module that implements a
&lt;a class="reference external" href=http://docs.python.org/library/doctest.html#module-doctest title="(in Python v2.7)"&gt;&lt;tt class="xref py py-mod docutils literal"&gt;&lt;span class=pre&gt;doctest&lt;/span&gt;&lt;/tt&gt;&lt;/a&gt; interface for testing shell commands.  The package provides a
user-level script for running shell sessions in Python docstrings.  A simple
example could be:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;span class=sd&gt;$ echo test&lt;/span&gt;
&lt;span class=sd&gt;test&lt;/span&gt;
&lt;span class=sd&gt;$ echo fail&lt;/span&gt;
&lt;span class=sd&gt;liaf&lt;/span&gt;
&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Running the previous file with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;shell-doctest&lt;/span&gt; &lt;span class=pre&gt;test&lt;/span&gt; &lt;span class=pre&gt;testdoc.py&lt;/span&gt;&lt;/tt&gt; produces the
following output:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=go&gt;**********************************************************************&lt;/span&gt;
&lt;span class=go&gt;File "testdoc.py", line 4, in testdoc&lt;/span&gt;
&lt;span class=go&gt;Failed example:&lt;/span&gt;
&lt;span class=go&gt;    echo fail&lt;/span&gt;
&lt;span class=go&gt;Expected:&lt;/span&gt;
&lt;span class=go&gt;    liaf&lt;/span&gt;
&lt;span class=go&gt;Got:&lt;/span&gt;
&lt;span class=go&gt;    fail&lt;/span&gt;
&lt;span class=go&gt;**********************************************************************&lt;/span&gt;
&lt;span class=go&gt;1 items had failures:&lt;/span&gt;
&lt;span class=go&gt;   1 of   2 in testdoc&lt;/span&gt;
&lt;span class=go&gt;***Test Failed*** 1 failures.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each time we bump a package, or add a completely new package, we also commit a
file containing a minimal series of tests that we consider important for the
package.  This allows us to almost instantly ascertain whether a future package
bump breaks functionality we require.&lt;/p&gt;
&lt;p&gt;We also add a test &lt;em&gt;every single time&lt;/em&gt; we fix a packaging bug, to make sure it
doesn’t come up again.  A good example can be gleaned from a bug that was fixed
in our &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=1567"&gt;rails&lt;/a&gt; vim package.  Given the way the &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=1567"&gt;vim scripts site&lt;/a&gt; is organised
the files you want to download have awful download locations, so our ebuild for
the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/tt&gt; plugin contains the following snippet:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=nv&gt;DESCRIPTION&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"vim plugin: RoR - easy file navigation, enhanced syntax highlighting"&lt;/span&gt;
&lt;span class=nv&gt;HOMEPAGE&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"http://www.vim.org/scripts/script.php?script_id=1567"&lt;/span&gt;
&lt;span class=nv&gt;SRC_URI&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"http://www.vim.org/scripts/download_script.php?src_id=13800 -&amp;gt; ${P}.zip"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;SRC_URI&lt;/span&gt;&lt;/tt&gt; declaration says we need to fetch the file from
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;http://www.vim.org/scripts/download_script.php?src_id=13800&lt;/span&gt;&lt;/tt&gt; and name it
locally as &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rails-4.3.zip&lt;/span&gt;&lt;/tt&gt;.  I’m sure you can guess what happened here,
someone saved a copy of the file locally for testing and forgot to update the
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;src_id&lt;/span&gt;&lt;/tt&gt; parameter correctly &lt;a class=footnote-reference href=http://jnrowe.github.com/articles/tdd_distros.html#id2 id=id1&gt;[1]&lt;/a&gt;.  The result was an apparently new build
that installed an older package release.&lt;/p&gt;
&lt;p&gt;When a fix for this bug was committed a test similar to the following snippet
was added to the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/tt&gt; test suite:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;span class=sd&gt;$ grep -l "autoloaded_rails = '${PV}'" /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=sd&gt;/usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All this does is check the reported version is correct, and it clearly only took
a few seconds to write.  This is important, it shouldn’t cost a lot to write a
test and this is especially true for the simplest task.&lt;/p&gt;
&lt;p&gt;I use a similar technique for managing my public Gentoo overlay, &lt;a class="reference external" href=https://github.com/JNRowe/jnrowe-misc&gt;jnrowe-misc&lt;/a&gt;.
For example, the &lt;a class="reference external" href=http://pypi.python.org/pypi/blockdiag/&gt;blockdiag&lt;/a&gt; ebuild is accompanied by a series of tests that are
run when bumping or stabilising the package, all of which are cribbed from my
actual &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;blockdiag&lt;/span&gt;&lt;/tt&gt; usage.  This massively reduces the time required to
evaluate a package at bump time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=result&gt;
&lt;h2&gt;Result?&lt;a class=headerlink href=http://jnrowe.github.com/articles/tdd_distros.html#result title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The time it takes to stabilise, or bump, a package may be massively reduced
while simultaneously increasing the robustness of the packages.  This is a huge
win, much bigger than we initially envisaged.&lt;/p&gt;
&lt;p&gt;We still use time-based stabilisation, but in union with test-based
stabilisation.  It means that on the time-based stabilisation date we can
conveniently script the progression to stable including a final run of the test
suite.&lt;/p&gt;
&lt;p&gt;I would, of course, prefer to see &lt;em&gt;any&lt;/em&gt; tests upstreamed and where possible this
is already happening.  However, we’re pragmatists and this means we often use
existing content as input for tests.  The use of existing input makes writing
the test faster and means each test exercises functionality we actually require,
but it also means we occasionally can’t submit the data upstream owing to
licensing concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=bonus&gt;
&lt;h2&gt;Bonus&lt;a class=headerlink href=http://jnrowe.github.com/articles/tdd_distros.html#bonus title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve used the upstream supported &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/tt&gt; method for writing tests on
this page, but you can also easily specify them in &lt;a class="reference external" href=http://docutils.sourceforge.net/docs/user/rst/&gt;reST syntax&lt;/a&gt; files too.
Doing this encourages you to write nicely formatted documentation to accompany
your tests.  You can also leverage your tests that are written in this way as
documentation using the excellent &lt;a class="reference external" href=http://sphinx-doc.org/&gt;Sphinx&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;The following script shows an extremely basic, yet fully functional, example of
how to combine the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;doctest&lt;/span&gt;&lt;/tt&gt; module’s &lt;a class="reference external" href=http://docs.python.org/library/doctest.html#doctest.testfile title="(in Python v2.7)"&gt;&lt;tt class="xref py py-func docutils literal"&gt;&lt;span class=pre&gt;testfile()&lt;/span&gt;&lt;/tt&gt;&lt;/a&gt; function with
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span class=c&gt;#! /usr/bin/python -tt&lt;/span&gt;
&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;doctest&lt;/span&gt;
&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;sys&lt;/span&gt;

&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;shelldoctest&lt;/span&gt; &lt;span class=kn&gt;as&lt;/span&gt; &lt;span class=nn&gt;sd&lt;/span&gt;

&lt;span class=n&gt;sys&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;exit&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;doctest&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;testfile&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;sys&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;],&lt;/span&gt; &lt;span class=n&gt;module_relative&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=bp&gt;False&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
                          &lt;span class=n&gt;extraglobs&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=p&gt;{&lt;/span&gt;&lt;span class=s&gt;"system_command"&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;sd&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;system_command&lt;/span&gt;&lt;span class=p&gt;},&lt;/span&gt;
                          &lt;span class=n&gt;parser&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=n&gt;sd&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;ShellDocTestParser&lt;/span&gt;&lt;span class=p&gt;())[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=p&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This script parses the first argument on the command line when it is run and
executes any &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/tt&gt; blocks it finds.  It returns the count of failed
tests as its exit code, helpfully allowing you to execute a command with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/tt&gt;
if all the tests pass.&lt;/p&gt;
&lt;p&gt;We operate this way at AST, the above &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/tt&gt; test would actually be part of
a &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;reST&lt;/span&gt;&lt;/tt&gt; formatted file as follows:&lt;/p&gt;
&lt;div class=highlight-rst&gt;&lt;div class=highlight&gt;&lt;pre&gt;Fix bug #xx, incorrect archive file&lt;span class=se&gt;::&lt;/span&gt;

&lt;span class=s&gt;    $ grep -l "autoloaded_rails = '${PV}'" /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=s&gt;    /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table class="docutils footnote" frame=void id=id2 rules=none&gt;
&lt;col class=label&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign=top&gt;
&lt;tr&gt;&lt;td class=label&gt;&lt;a class=fn-backref href=http://jnrowe.github.com/articles/tdd_distros.html#id1&gt;[1]&lt;/a&gt;&lt;td&gt;Okay, it was me.  I’ll confess.&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Introduction to RCS</title><link href="http://jnrowe.github.com/articles/rcs.html" rel="alternate"></link><updated>2003-09-05T00:00:00Z</updated><id>http://jnrowe.github.com/articles/rcs.html</id><summary type="html">&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class=last&gt;I’ve resurrected this text from my old UKFSN site because a couple of people
asked me to, but I wouldn’t recommend using RCS to anyone at this point.  It
is mainly to help people who need to understand RCS because they have no
choice, for example Gentoo users who are stuck with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;dispatch-conf&lt;/span&gt;&lt;/tt&gt; (or so
my mails tell me).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=introduction-to-rcs&gt;
&lt;h1&gt;Introduction to RCS&lt;a class=headerlink href=http://jnrowe.github.com/articles/rcs.html#introduction-to-rcs title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;div class=section id=abstract&gt;
&lt;h2&gt;Abstract&lt;a class=headerlink href=http://jnrowe.github.com/articles/rcs.html#abstract title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This introduction is aimed at people with no experience of a &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; at all, but who do have a need for an easy to use and
non-intrusive way to backup, store and annotate configuration files or 5000 file
C source trees. This text is by no means an in-depth &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; usage manual, it is a short and fast way to get working with
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is great for small projects or
managing the wealth of configuration files in &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;/etc&lt;/span&gt;&lt;/tt&gt;. It provides a way to
reduce the need for file backups(without losing any backup quality or quantity),
to annotate changes made to a file, to allow other people to work on a file and
an easy method to package patch/diff files for distribution.&lt;/p&gt;
&lt;p&gt;If you want more in-depth information about using &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, or when you find you need more functionality from &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, there is a HOW-TO at &lt;a class="reference external" href=http://www.tldp.org&gt;The Linux Documentation
Project&lt;/a&gt; (&lt;a class="reference external" href=http://tldp.org/HOWTO/RCS.html&gt;direct link&lt;/a&gt;) and fantastic documentation is provided with the
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=diving-in&gt;
&lt;h2&gt;Diving in&lt;a class=headerlink href=http://jnrowe.github.com/articles/rcs.html#diving-in title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is that simple to use that I will jump
straight in to an example.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ mkdir RCS
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; directory holds the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; control files, they contain all the data
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; needs to work.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ cat &amp;gt;myscript.sh &amp;lt;&amp;lt;EOF
#! /bin/sh
# $Id$
echo "Hello World!"
exit 0
EOF

$ ci myscript.sh
RCS/myscript.sh,v  &amp;lt;--  myscript.sh
enter description, terminated with single '.' or end of file:
NOTE: This is NOT the log message!
&amp;gt;&amp;gt; /bin/sh "Hello World!" example
&amp;gt;&amp;gt; .
initial revision: 1.1
done
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; (check in) is where the magic of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; takes place. We have decided we want to make a snapshot of our
file, &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;myscript.sh&lt;/span&gt;&lt;/tt&gt;, and use &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; to add the file to revision control.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ ls
RCS
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The file we checked in appears to have disappeared, obviously it hasn’t but the
default behaviour of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is to remove the
file we check in. You can choose to keep a working copy with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt; &lt;span class=pre&gt;-u&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;
&lt;span class=pre&gt;-l&lt;/span&gt;&lt;/tt&gt; (covered below).&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ ls ./RCS/
myscript.sh,v
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; directory a file now exists
with the same name as our script plus a ”,v”. This is the file &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses to store all of its data in.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ co myscript.sh
RCS/myscript.sh,v  --&amp;gt;  myscript.sh
revision 1.1
done
$ ls -l ./
drwxr-xr-x    2 james    james        1024 Nov  4 11:29 RCS
-r--r--r--    1 james    james          95 Nov  4 11:29 myscript.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;co&lt;/span&gt;&lt;/tt&gt; (check out) pulls a current version(by default) from the
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; repository and places it in the
current directory. Default behaviour is to check out a read-only version of the
file.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ co -l myscript.sh
./RCS/myscript.sh,v  --&amp;gt;  ./myscript.sh
revision 1.1 (locked)
done
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-l&lt;/span&gt;&lt;/tt&gt; option to &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;co&lt;/span&gt;&lt;/tt&gt; (and also &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; ) is used to lock the file. This
file now becomes a working file, which is writable, and it also means other
people can’t edit it until you have released it or checked it in again.&lt;/p&gt;
&lt;p&gt;Blindly using the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-l&lt;/span&gt;&lt;/tt&gt; option to &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;co&lt;/span&gt;&lt;/tt&gt; is not advisable, you should
get in to the habit now of only locking files you are working on. &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses locking to block other users from checking
in changes and will cause much grief if you use &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; on multi-user projects. It is much better to use &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-u&lt;/span&gt;&lt;/tt&gt; (or unlocked)
when you &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; in new files/changes this way you will have access to
a read-only version of the file and it will allow other users to edit it.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ cat myscript.sh
#! /bin/sh
# $Id: myscript.sh,v 1.1 2002/11/04 11:29:48 james Exp james $
echo "Hello World!"
exit 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you remember from the original file it contained &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt; on a commented
line, this &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt; is a keyword used by &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; that is substituted with information about the current file. In this
example the tag &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt; is expanded to read the filename, the revision number,
the date and time of the check in, the person who checked in the file, the state
of the file and the owner of the lock(if any).&lt;/p&gt;
&lt;p&gt;There are many keywords available, including:&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Author$&lt;/span&gt;&lt;/tt&gt; - the name of the person who did the check in&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Header$&lt;/span&gt;&lt;/tt&gt; - the same as &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt; but including the path for the file&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Log$&lt;/span&gt;&lt;/tt&gt; - a full changelog for file from the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although using &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Log$&lt;/span&gt;&lt;/tt&gt; seems like a good idea it does mean the size of the
file is increased a huge amount. All the changelog data is available with the
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt;&lt;/tt&gt; command at any time and without filling the source file.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ sed -ie 's/World/${USER}/' myscript.sh
$ cat myscript.sh
#! /bin/sh
# $Id: myscript.sh,v 1.1 2002/11/04 11:29:48 james Exp james $
echo "Hello ${USER}!"
exit 0
$ sh ./myscript.sh
Hello james!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So we have decided to make some changes to the file, and then tested it
works.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ rcsdiff myscript.sh
===================================================================
RCS file: RCS/myscript.sh,v
retrieving revision 1.1
diff -r1.1 myscript.sh
3c3
&amp;lt; echo "Hello World!"
---
&amp;gt; echo "Hello ${USER}!"
TEST$  rcsdiff -u myscript.sh
===================================================================
RCS file: RCS/myscript.sh,v
retrieving revision 1.1
diff -u -r1.1 myscript.sh
--- myscript.sh 2002/11/04 11:57:51     1.1
+++ myscript.sh 2002/11/05 03:52:14
@@ -1,4 +1,4 @@
 #! /bin/sh
 # $Id: myscript,v 1.1 2002/11/04 11:29:48 james Exp james $
-echo "Hello World!"
+echo "Hello ${USER}!"
 exit 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt; supplies an easy way to check changes in a file. Using
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/tt&gt; will output a generic context-free diff(and a small
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; header to &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;STDERR&lt;/span&gt;&lt;/tt&gt; ), or you can
pass normal &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;diff&lt;/span&gt;&lt;/tt&gt; (1) options to &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt;.  In the second &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt;
command the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;diff&lt;/span&gt;&lt;/tt&gt; option &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-u&lt;/span&gt;&lt;/tt&gt; is given to tell &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt; it should output
a unified context diff.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ ci -u ./myscript.sh
./RCS/myscript.sh,v  &amp;lt;--  ./myscript.sh
new revision: 1.2; previous revision: 1.1
enter log message, terminated with single '.' or end of file:
&amp;gt;&amp;gt; Changed World to ${USER} to give a more personal feeling
&amp;gt;&amp;gt; .
done
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So now we have seen the changes made to the file, and are happy with them, we
check in our new revision. &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; asks for
a log entry, this will make our changelog output later. You can cancel the check
in using the normal &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;C-c&lt;/span&gt;&lt;/tt&gt; (control C) method.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ cat myscript.sh
#! /bin/sh
# $Id: myscript,v 1.2 2002/11/04 11:34:21 james Exp james $
echo "Hello ${USER}!"
exit 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can see above that when &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; checked in
the new revision it also updated the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt; tag.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;$ rlog ./myscript.sh

RCS file: ./RCS/myscript.sh,v
Working file: ./myscript.sh
head: 1.2
branch:
locks: strict
access list:
symbolic names:
keyword substitution: kv
total revisions: 2;     selected revisions: 2
description:
----------------------------
revision 1.2
date: 2002/11/05 04:01:13;  author: james;  state: Exp;  lines: +2 -2
Changed World to ${USER} to give a more personal feeling
----------------------------
revision 1.1
date: 2002/11/04 11:57:51;  author: james;  state: Exp;
Initial revision
=============================================================================
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt;&lt;/tt&gt; provides quick access to revision history for files, it
accepts multiple files per command line(using normal shell wild-carding) and
provides all the information &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; has on
a file. Should you ever need to only know the changes that were made to the
current revision you can use the &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/tt&gt; option as in &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt; &lt;span class=pre&gt;-r&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/tt&gt;. You
can also check changes between revisions of files using the command like &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt;
&lt;span class=pre&gt;-r1.1,1.2&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/tt&gt; option of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is one of its
most powerful, it is available in all the commands and shares the same semantics
throughout. If &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/tt&gt; is used with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; it forces a bump, for example &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;
&lt;span class=pre&gt;-r1.7&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/tt&gt; will force &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; to check
in filename as revision 1.7. Used with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;co&lt;/span&gt;&lt;/tt&gt; you can pull any revision of the
file from &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; history. Used with
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt; you can create a diff between any revision under &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, for example &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt; &lt;span class=pre&gt;-r1.1,1.8&lt;/span&gt; &lt;span class=pre&gt;-u&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/tt&gt; will
output a unified context diff of the changes from revision
1.1 to 1.8.&lt;/p&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; really is that simple to use, it does
have many more options that are not covered here(see the man pages) but the
power of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is how simple it is to use.
It takes almost no time to setup, and probably less time then you currently
spend on arranging backups. The command syntax is simple, and stable across the
separate commands. It provides an immensely powerful way to control
configuration files, source code, even revisions of binary files and of course
silly little shell Hello World examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=section id=recap&gt;
&lt;h2&gt;Recap&lt;a class=headerlink href=http://jnrowe.github.com/articles/rcs.html#recap title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To recap on &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; usage&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;Make the RCS directory.&lt;/li&gt;
&lt;li&gt;Insert &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; tags, such as &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/tt&gt;, in to
your original files to help you keep track.&lt;/li&gt;
&lt;li&gt;Edit your files.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt;&lt;/tt&gt; to commit your revisions to the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; history and annotate changes made. You can also use &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt;&lt;/tt&gt; to
see what changes you have made, maybe to help you build your changelog
information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=section id=advanced&gt;
&lt;h2&gt;Advanced&lt;a class=headerlink href=http://jnrowe.github.com/articles/rcs.html#advanced title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class=figure&gt;
&lt;a class="reference internal image-reference" href=http://jnrowe.github.com/_images/rcsi.png&gt;&lt;img alt="rcsi screenshot" src=http://jnrowe.github.com/_images/rcsi.png style="width: 500px; height: 114px;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;There are many tools available that can help you to manage your &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; files, including the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; status monitor &lt;a class="reference external" href=http://www.colinbrough.pwp.blueyonder.co.uk/rcsi.README.html&gt;rcsi&lt;/a&gt; and &lt;a class="reference external" href=http://blame.sourceforge.net/&gt;blame&lt;/a&gt; &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; file annotator.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsi&lt;/span&gt;&lt;/tt&gt; will display information about the files within a directory.&lt;/p&gt;
&lt;p&gt;The screenshot to the right shows &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;rcsi&lt;/span&gt;&lt;/tt&gt; in use on a sample partially
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; controlled directory.  All the
information it contains should be fairly self explanatory, and even if it isn’t
the package comes with a comprehensive man page and README.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;1.2          (root     21-Aug-05):             eval find . -xdev -depth ${exceptions}   -type d -empty -exec rmdir '{}' \\';'
1.2          (root     21-Aug-05):             eend 0
1.2          (root     21-Aug-05):         else
1.1          (root     16-Jul-05):             ebegin "Cleaning /tmp directory"
1.4          (root     21-Jan-06):             {
1.2          (root     21-Aug-05):                 rm -f /tmp/.X*-lock /tmp/esrv* /tmp/kio* /tmp/jpsock.* /tmp/.fam*
1.2          (root     21-Aug-05):                 rm -rf /tmp/.esd* /tmp/orbit-* /tmp/ssh-* /tmp/ksocket-* /tmp/.*-unix
1.4          (root     21-Jan-06):                 # Make sure our X11 stuff have the correct permissions
1.4          (root     21-Jan-06):                 mkdir -p /tmp/.{ICE,X11}-unix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above excerpt is a sample of the output from &lt;a class="reference external" href=http://blame.sourceforge.net/&gt;blame&lt;/a&gt; being run against
a config file which is maintained using &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; by Gentoo’s &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;dispatch-conf&lt;/span&gt;&lt;/tt&gt; tool.  It allows you to simply see which
revision introduced a change to a specific line.  You can also choose to
annotate specific &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; revisions using the
&lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;--revision&lt;/span&gt;&lt;/tt&gt; option, or specific dates with &lt;tt class="docutils literal"&gt;&lt;span class=pre&gt;--date&lt;/span&gt;&lt;/tt&gt; option.  &lt;a class="reference external" href=http://blame.sourceforge.net/&gt;blame&lt;/a&gt; has
also has a very comprehensive manual page included with it which you should read
if you want to enjoy its full power.&lt;/p&gt;
&lt;p&gt;There are many other tools available which use &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; as a backend, and as long as you can access the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; data files blame can help to understand what is
happening with them too.&lt;/p&gt;
&lt;p&gt;If you know of any interesting &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses
please drop me a mail, and I hope this short text has been helpful to you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>