<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>JNRowe</title><link rel="alternate" href=""></link><link rel="self" href=""></link><id></id><updated>2017-09-03T00:00:00Z</updated><rights>2009-2017  James Rowe</rights><entry><title>Burning down the streets</title><link href="/thoughts/metro_city.html" rel="alternate"></link><updated>2017-09-03T00:00:00Z</updated><id>/thoughts/metro_city.html</id><summary type="html">&lt;div id=burning-down-the-streets class=section&gt;
&lt;h1&gt;Burning down the streets&lt;a title="Permalink to this headline" href=/thoughts/metro_city.html#burning-down-the-streets class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;The whole thing makes me wonder whether a modern reintroduction of the
&lt;a href=https://en.m.wikipedia.org/wiki/Charivari class="reference external"&gt;skimmington ride&lt;/a&gt; for social media is long overdue.&lt;/p&gt;
&lt;p class=attribution&gt;—Stephen Roberts, eloquent friend&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;A few months ago a work colleague asked if I could help his wife with an art
project she was working on.  The premise was simple and rather enticing, so
I jumped at the chance.&lt;/p&gt;
&lt;p&gt;The basic idea was to mine Twitter for its copious poison and visualise any
patterns that emerge.  We quickly hit upon the idea that some poison was so
obvious that &lt;em&gt;even&lt;/em&gt; the Twitter folks would acknowledge and reject it, and
piggybacking off of that would trim down the work considerably.&lt;/p&gt;
&lt;div id=mining-the-abyss class=section&gt;
&lt;h2&gt;Mining the abyss&lt;a title="Permalink to this headline" href=/thoughts/metro_city.html#mining-the-abyss class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My task was simple: ingest a massive lump of &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt;, process it &lt;em&gt;somehow&lt;/em&gt; and spit out results that could be used in an
artsy manner that I would likely not understand.&lt;/p&gt;
&lt;p&gt;The initial concept worked by scanning a firehose of tweets for keywords which
seemed likely to be hugely poisonous, and then create a &lt;abbr title="Directed Acyclic Graph"&gt;DAG&lt;/abbr&gt; as the basis to rate users who were retweeting them.  Later
versions were self-training using a naïve Bayes classifier, which allowed us to
find offensive tweets using words I was previously happily unaware of.&lt;/p&gt;
&lt;p&gt;Early on it became obvious that another effect presented itself.  There were
&lt;em&gt;masses&lt;/em&gt; of users who were retweeting users who would later be banned, and
those retweeting users would move on to retweeting new users who themselves
would often end up banned.&lt;/p&gt;
&lt;img src=/_images/final_plight.png class=align-right alt="Route of evil"&gt;
&lt;p&gt;The interesting point to me was that there were large numbers of &lt;em&gt;actual&lt;/em&gt; users
— not bots — who redirect the hate storm and almost nothing else.  Many of
these users were in an anechoic chamber, sucking in tweets from many users and
spitting them back out to virtually no one.  I thought it would be interesting
to work only on the final nodes; weighted by those users who receive close to
no retweets and low user interaction but with histories of retweeting large
numbers of banned and suspended users.  I called it RageRank, because I’m aware
of &lt;a href=https://en.m.wikipedia.org/wiki/Pagerank class="reference external"&gt;Page Rank&lt;/a&gt; and lack an imagination.&lt;/p&gt;
&lt;p&gt;The arty part of the project became known informally as Final Spite, after an
early visualisation effort with animated clone after clone walking along
a &lt;a href=https://en.m.wikipedia.org/wiki/Final_Fight class="reference external"&gt;Final Fight&lt;/a&gt; background spewing a tweet bubble as their energy bar
depleted.  Each new visualisation started from a map, much like the game’s
levels, and showed a real city with its real occupants.  The intent was to
allow people to experience a location they knew but with its foetid underbelly
exposed.&lt;/p&gt;
&lt;a href=https://en.m.wikipedia.org/wiki/Final_Fight class="reference external image-reference"&gt;&lt;img style="width: 237.60000000000002px; height: 158.4px;" src=/_images/final_fight_one.png class=align-right alt="Final Fight One on the GBA"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div id=what-happened-next class=section&gt;
&lt;h2&gt;What happened next?&lt;a title="Permalink to this headline" href=/thoughts/metro_city.html#what-happened-next class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What happened next saddened and surprised me in equal quantities; visitors to
the site doxxed a heap of the displayed retweeters almost immediately.  So much
in fact that the site was taken down within a day, and the work became a mostly
offline exhibit in a little gallery for other evening school art students.&lt;/p&gt;
&lt;p&gt;I can understand the sentiment in many ways, and perhaps should have seen it
coming.  When I saw people I knew in a visualisation I was ashamed, truly
ashamed.  I mean not to the point of thinking it is appropriate to post all
their personal details for the internet vigilantes, but enough that I knew
I would not want to be linked to them through work or social circles.&lt;/p&gt;
&lt;p&gt;However, the end result was really neat even on the smaller canvas it has to
live on.  Seeing that level of vitriolic rage is not fun, but realising that
much of it is vented in to nowhere does soften it a little.&lt;/p&gt;
&lt;div class=sidebar&gt;
&lt;p class=sidebar-title&gt;Alternative mappings&lt;/p&gt;
&lt;p&gt;Having seen the tweets of someone I know pop up, and digging around a little
to see how hateful those tweets were it became clear there was an equally
toxic topic that could be mapped in a similar manner.&lt;/p&gt;
&lt;p&gt;Following the game theme, perhaps a &lt;a href=https://en.m.wikipedia.org/wiki/Prince_of_Persia:_The_Sands_of_Time class="reference external"&gt;Prince of Persia: The Sands of Time&lt;/a&gt;
affair that shows the changing hopes, dreams and promises of the anechoic
brexit promoters from early 2016 up to today.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=fall-out class=section&gt;
&lt;h2&gt;Fall out&lt;a title="Permalink to this headline" href=/thoughts/metro_city.html#fall-out class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things that surprised me most was that initially I had primed the
data by looking at users who followed users that have been suspended or banned.
After digging in to a few examples to verify the method’s efficacy I noticed
that there are bidirectional follows to the final nodes where one user appears
to be the polar opposite of the other, almost in an &lt;a href=https://en.m.wikipedia.org/wiki/Alf_Garnett class="reference external"&gt;Alf Garnett&lt;/a&gt; versus
&lt;a href=https://en.m.wikipedia.org/wiki/Peppa_Pig class="reference external"&gt;Peppa Pig&lt;/a&gt; scale.&lt;/p&gt;
&lt;p&gt;It took me a while to think of a possible cause — beyond a simple modelling
error — that could explain this.  Sadly after recognising a top five rage
retweeter in a local town it became somewhat obvious, there are occasionally
business and familial ties involved.  There are seemingly swathes of the
populace who choose to accept public association with the caustic members of
society, even when there is a simple unfollow button you can hit to distance
yourself from them.&lt;/p&gt;
&lt;p&gt;Let us be frank and honest for a moment.  You’re giving the appearance of tacit
approval to people’s views when you continue to follow them, even if you’re not
actively engaging with them.  The simple act of not confronting them is
normalising the behaviour.  If you’re not calling them out on it, you’re doing
yourself and society at large a serious injustice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>&lt;strong class="command"&gt;fossil&lt;/strong&gt; experiments</title><link href="/articles/fossil.html" rel="alternate"></link><updated>2014-11-12T00:00:00Z</updated><id>/articles/fossil.html</id><summary type="html">&lt;div id=fossil-experiments class=section&gt;
&lt;h1&gt;&lt;strong class=command&gt;fossil&lt;/strong&gt; experiments&lt;a title="Permalink to this headline" href=/articles/fossil.html#fossil-experiments class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For a variety of reasons we can no longer use GitHub at work for any project
which isn’t Open Source.  And since that decision was thrust upon us we’ve been
playing with some alternatives for our workflow.  We’ll probably end up choosing
one of the self hosted clones at some point, but it was decided early on that we
should evaluate a variety of options.&lt;/p&gt;
&lt;p&gt;I was tasked with testing out &lt;a href=http://www.fossil-scm.org/ class="reference external"&gt;fossil&lt;/a&gt; on a couple of small side projects, and
these are my &lt;em&gt;absolutely&lt;/em&gt; biased personal findings.&lt;/p&gt;
&lt;p&gt;Before I start I should add that while what I’m about to write probably sounds
harsh, I do like &lt;strong class=command&gt;fossil&lt;/strong&gt; the concept.  I like the single &lt;a href=http://sqlite.org/ class="reference external"&gt;sqlite&lt;/a&gt;
project repository, I like the small-enough-to-grok-in-an-afternoon code base
and I like the idea of a totally reproducible project state including all
metadata.&lt;/p&gt;
&lt;div id=testing-fossil class=section&gt;
&lt;h2&gt;Testing &lt;strong class=command&gt;fossil&lt;/strong&gt;&lt;a title="Permalink to this headline" href=/articles/fossil.html#testing-fossil class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good news is that testing &lt;strong class=command&gt;fossil&lt;/strong&gt; is a piece of cake.  It
supports both reading and writing &lt;strong class=command&gt;git&lt;/strong&gt;’s &lt;a href=http://git-scm.com/docs/git-fast-import class="reference external"&gt;fast-import&lt;/a&gt; format.  If you
want to test it out just dump an existing &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; repository(or &lt;a href=http://mercurial.selenic.com/wiki/FastImportExtension class="reference external"&gt;mercurial with an
extension&lt;/a&gt;), and feed it &lt;strong class=command&gt;fossil import&lt;/strong&gt;.  If you later change your
mind you can run &lt;strong class=command&gt;fossil export&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sadly supporting incremental two-way mirroring didn’t work out for us, but
perhaps it will for simpler projects.  In the end I simply mirrored the
&lt;strong class=command&gt;git&lt;/strong&gt; repositories to &lt;strong class=command&gt;fossil&lt;/strong&gt;, marked the &lt;strong class=command&gt;git&lt;/strong&gt;
repositories as read-only and forced contributors to work with
&lt;strong class=command&gt;fossil&lt;/strong&gt; from the outset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=packaging class=section&gt;
&lt;h2&gt;Packaging&lt;a title="Permalink to this headline" href=/articles/fossil.html#packaging class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;strong class=command&gt;fossil&lt;/strong&gt; project sells itself on being a single file binary
install, and that probably works well for a subset of users.  We’re not that in
that subset though, and &lt;strong class=command&gt;fossil&lt;/strong&gt; is more than a little annoying to
wrangle in to our environment.&lt;/p&gt;
&lt;p&gt;The tarball ships without any &lt;em&gt;directly&lt;/em&gt; usable documentation, so you end up
with either no system documentation or a collection of docs sprinkled with wiki
markup in &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;/usr/share/doc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default &lt;strong class=command&gt;fossil&lt;/strong&gt; builds in a manner which breaks most packaging
standard unfortunately.  If you’re building packages you’ll likely need to
write an awful lot of custom workarounds to get a compliant and usable package,
see &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;lst-pkgs/utils/dev/fossil&lt;/span&gt;&lt;/code&gt; build for the gory details of our hacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=uptake class=section&gt;
&lt;h2&gt;Uptake&lt;a title="Permalink to this headline" href=/articles/fossil.html#uptake class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don’t really want to hold this against &lt;strong class=command&gt;fossil&lt;/strong&gt;, but it &lt;em&gt;is&lt;/em&gt;
important to note that for all intents and purposes no one is familiar with it.
No upstream projects we actively track use it, there isn’t a single person who
chooses to use it on our site(which is why I had to handle the packaging) and
expecting new hires to have even heard of it is probably a stretch.&lt;/p&gt;
&lt;p&gt;It wouldn’t be such an issue if the choice was a &lt;strong class=command&gt;git&lt;/strong&gt; vs &lt;a href=http://mercurial.selenic.com/ class="reference external"&gt;mercurial&lt;/a&gt;
one, where the few differences are mostly cosmetic.  &lt;strong class=command&gt;fossil&lt;/strong&gt; is
a completely different beast, and requires an enormous rethink in the way you
handle version control.&lt;/p&gt;
&lt;p&gt;Ten years ago when people were on the whole still familiar with the &lt;abbr title="Concurrent Versions System"&gt;CVS&lt;/abbr&gt; and
Subversion way of working that wouldn’t have been such an issue, but times have
most definitely changed.&lt;/p&gt;
&lt;p&gt;The vocabulary in the documentation is likely to be foreign to users of any
version control system, and the workflow examples in the documentation are
entirely foreign to how we have developed any project in at least the past
decade.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=all-in-one-solution class=section&gt;
&lt;h2&gt;All-in-one solution&lt;a title="Permalink to this headline" href=/articles/fossil.html#all-in-one-solution class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the proclaimed benefits of using &lt;strong class=command&gt;fossil&lt;/strong&gt; is that it handles
many aspects of a project’s &lt;abbr title="Application Lifecycle Management"&gt;ALM&lt;/abbr&gt;; version control, issue tracking,
documentation(via a wiki), etc.  However, and this is only my opinion, it feels
like it does of all of these in a suboptimal manner.&lt;/p&gt;
&lt;div id=version-control class=section&gt;
&lt;h3&gt;Version control&lt;a title="Permalink to this headline" href=/articles/fossil.html#version-control class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The version control feels quite nice for the most part, definitely usable but
a little annoying to work with if you’re used to a modern &lt;abbr title="Distributed Version Control System"&gt;DVCS&lt;/abbr&gt; like we are.&lt;/p&gt;
&lt;p&gt;That said it does feel like a &lt;em&gt;huge&lt;/em&gt; step backwards when working with branches,
and you should set aside quite a lot of time for integration issues when you
have &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;autosync&lt;/span&gt;&lt;/code&gt; disabled.  And I can’t imagine a scenario where &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;autosync&lt;/span&gt;&lt;/code&gt;
could work for us, without rewriting our entire way of working or returning to
&lt;abbr title="Concurrent Versions System"&gt;CVS&lt;/abbr&gt;-style mega commits and a manual patch stack layered on top.&lt;/p&gt;
&lt;p&gt;If you read &lt;strong class=command&gt;fossil&lt;/strong&gt;’s &lt;a href=http://www.bugzilla.org class="reference external"&gt;Branching, Forking, Merging, and Tagging&lt;/a&gt;
documentation it appears that this is a design feature for the creators.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=issue-tracker class=section&gt;
&lt;h3&gt;Issue tracker&lt;a title="Permalink to this headline" href=/articles/fossil.html#issue-tracker class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The issue tracker feels like someone has tried to improve on &lt;a href=http://www.bugzilla.org class="reference external"&gt;Bugzilla&lt;/a&gt;, without
taking a look at modern trackers.  It is definitely the weakest part of
&lt;strong class=command&gt;fossil&lt;/strong&gt; in my opinion, using it is both a mental and eye-stabbing
pain at the same time.&lt;/p&gt;
&lt;p&gt;Luckily you can rework a lot of it by fiddling around with the administration
settings exposed by &lt;strong class=command&gt;fossil ui&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This also exposes one of the best features of &lt;strong class=command&gt;fossil&lt;/strong&gt;, you can create
a custom &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; script that configures the project(issue tracking, pretty theme,
etc) and just blast it in to the project’s database.  Or you can create
a custom file that makes all your edits and pump it in with &lt;strong class=command&gt;fossil
config import&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=wiki class=section&gt;
&lt;h3&gt;Wiki&lt;a title="Permalink to this headline" href=/articles/fossil.html#wiki class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The wiki system is actually really good for what it does, but it has very few of
the features we use for our documentation.  I don’t want to hold that against it
though, as it just a impedance mismatch.&lt;/p&gt;
&lt;p&gt;The end result of the integrated components feels to me like you’ve chosen
a usable, but weak, component for some of the  most important parts of your
project’s &lt;abbr title="Application Lifecycle Management"&gt;ALM&lt;/abbr&gt;.  The bits work well together, but none of them seem like an
option you’d choose on their own.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=interface class=section&gt;
&lt;h2&gt;Interface&lt;a title="Permalink to this headline" href=/articles/fossil.html#interface class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The help output for new users is, in my opinion, really irritating.  The default
command message tells you to run &lt;strong class=command&gt;fossil help&lt;/strong&gt; or &lt;strong class=command&gt;fossil
help COMMAND&lt;/strong&gt;, without providing the names of any of the common commands.  The
&lt;strong class=command&gt;fossil help&lt;/strong&gt; output emulates a &lt;strong class=command&gt;tsort&lt;/strong&gt; filter of the command
names, listing commands with unique to &lt;strong class=command&gt;fossil&lt;/strong&gt; terminology and no
short descriptions.  &lt;strong class=command&gt;fossil help --all&lt;/strong&gt; feels like it should be more
useful, but just creates a larger table of commands with uncommon names and
still no descriptions.&lt;/p&gt;
&lt;p&gt;It makes very little sense to organise the help in this manner because as you
get used to the naming and non-standard option style you will need the help
less.  I’ve patched this for our packages, and if people like it I’ll try to
push it upstream.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;It turns out I won’t be pushing the changes upstream.  They require
a &lt;abbr title="Contributor License Agreement"&gt;CLA&lt;/abbr&gt; that I can not sign in good faith, which is a shame.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The option handling &lt;em&gt;will&lt;/em&gt; trip you up endlessly.  Just the little things like
being unable to chain options, and needing an endless stream of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;C-p&lt;/span&gt; &lt;span class=pre&gt;M-5&lt;/span&gt; &lt;span class=pre&gt;M-b&lt;/span&gt;
&lt;span class=pre&gt;&amp;lt;space&amp;gt;&lt;/span&gt;&lt;/code&gt; to add a space before a commit message for example.  Yes, I know some
people don’t like standard &lt;strong class=command&gt;getopt&lt;/strong&gt; or GNU-style option parsing, but
every other tool you use has chosen it.&lt;/p&gt;
&lt;p&gt;Some of the interface decisions are actively bad, for example there appears to
be no way to delegate password configuration to a trusted system service or even
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;netrc&lt;/span&gt;&lt;/code&gt;.  Specifying passwords in &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt;s on the command line is a &lt;strong&gt;huge&lt;/strong&gt;
anti-pattern, and I just hope you don’t have any multiseat systems if you’re
using that method.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=speed class=section&gt;
&lt;h2&gt;Speed&lt;a title="Permalink to this headline" href=/articles/fossil.html#speed class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the whole &lt;strong class=command&gt;fossil&lt;/strong&gt; is fast, not &lt;strong class=command&gt;git&lt;/strong&gt; fast but fast
nonetheless.  Commits do take a disturbingly long time to complete for some
reason, but most of the other commands are fast enough.&lt;/p&gt;
&lt;p&gt;Mangling a repository is actually a lot faster with &lt;strong class=command&gt;fossil&lt;/strong&gt; than any
other system I can think of, as you can just throw the power of &lt;abbr title="Structured Query Language"&gt;SQL&lt;/abbr&gt; at it.
You can find some &lt;a href=http://www.sqlalchemy.org/ class="reference external"&gt;sqlalchemy&lt;/a&gt; &lt;abbr title="Object relational mapping"&gt;ORM&lt;/abbr&gt;
definitions in &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;/usr/share/doc/fossil/orm&lt;/span&gt;&lt;/code&gt; in my packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=conclusion class=section&gt;
&lt;h2&gt;Conclusion&lt;a title="Permalink to this headline" href=/articles/fossil.html#conclusion class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I mentioned this in this first paragraph, but I don’t see us moving to
&lt;strong class=command&gt;fossil&lt;/strong&gt;.  It is a nice system, but it just wouldn’t work for us as
is.&lt;/p&gt;
&lt;p&gt;Part of me is tempted to attempt to fix the problems, but then we’d be left with
a system that is more obscure than &lt;strong class=command&gt;fossil&lt;/strong&gt;.  If you read the &lt;a href=http://fossil-scm.org/xfer/doc/tip/www/concepts.wiki class="reference external"&gt;Fossil
Concepts&lt;/a&gt; and &lt;a href=http://www.fossil-scm.org/xfer/doc/tip/www/faq.wiki class="reference external"&gt;Frequently Asked Questions&lt;/a&gt; documents you’ll see that the most
significant problems for us are actually features for upstream, and that is
obviously fine but it does mean upstreaming changes would be impossible.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;As noted above, it turns out they require a &lt;abbr title="Contributor License Agreement"&gt;CLA&lt;/abbr&gt; which means we couldn’t
send changes upstream anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That said I’m am planning on stealing some of the ideas that I really liked
about &lt;strong class=command&gt;fossil&lt;/strong&gt; for my own use.  &lt;strong class=command&gt;fossil all&lt;/strong&gt;’s ability to run
a command against all repositories configured in &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.fossil&lt;/span&gt;&lt;/code&gt; for example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Cleanse thy soul</title><link href="/thoughts/disconnect.html" rel="alternate"></link><updated>2014-09-18T00:00:00Z</updated><id>/thoughts/disconnect.html</id><summary type="html">&lt;div id=cleanse-thy-soul class=section&gt;
&lt;h1&gt;Cleanse thy soul&lt;a title="Permalink to this headline" href=/thoughts/disconnect.html#cleanse-thy-soul class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For the past few years I’ve taken to having routine breaks from certain
timesinks to help me focus and also to denoise some of my thoughts.  The number
one timesink in my world is without doubt the interwebs, and there are a few
steps I’ve taken to weaken its stranglehold.&lt;/p&gt;
&lt;p&gt;Perhaps the following will help you, or perhaps you’ll &lt;a href=mailto:jnrowe%40gmail.com class="reference external"&gt;email&lt;/a&gt; me to point out
your ideas for me to try.&lt;/p&gt;
&lt;div id=cut-the-tether class=section&gt;
&lt;h2&gt;Cut the tether&lt;a title="Permalink to this headline" href=/thoughts/disconnect.html#cut-the-tether class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I track every thing that I &lt;em&gt;practically&lt;/em&gt; can, doing so can be very empowering.
This is something which the buzzwordy types apparently refer to as The
Quantified Self, and despite knowing that I continue to do so.&lt;/p&gt;
&lt;p&gt;With a query of my network logs&lt;a id=id1 href=/thoughts/disconnect.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt; I can tell you that for the first nine
months of this year I’ve been entirely without internet access for thirty-one
percent of the time.  Last year the final amount was thirty-eight percent, and
once our Winterval shutdown is included I’d expect this year to be about the
same.&lt;/p&gt;
&lt;p&gt;It isn’t just a case of being without internet access for a few hours or on
certain days either, my longest &lt;em&gt;complete&lt;/em&gt; break this year was a straight
thirteen days back in May.&lt;/p&gt;
&lt;p&gt;The number one thing I’ve learnt is that a lot of the things I burnt time on
were genuinely just burnt.  For example, news sites feel mostly pointless to
me at this point.&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;&lt;p&gt;Popular news sources are invariably a PR copy’n’paste fest, which is &lt;em&gt;really&lt;/em&gt;
noticeable when you come back from a break and catch up on various feeds in
one huge chunk.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sites with a slightly more tech bias like HackerNews and its ilk are just
a complete time hole.  Often the really interesting tech stories will bubble
up elsewhere in a curated fashion(such as &lt;a href=http://chneukirchen.org/trivium/ class="reference external"&gt;Trivium&lt;/a&gt;), and for example on HN the
majority of posts and comments are just US politics or occasionally
interesting insights from the SV bubble anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll still catch up from a couple of, in my opinion, trusted sources.  That is
to say I’ll dip in to a few categories on &lt;abbr title="British Broadcasting Corporation"&gt;BBC&lt;/abbr&gt; news and perhaps visit The Guardian’s site(although I do that
considerably less over the past year according to my data).  I also like to
avail myself of a little &lt;a href=http://rt.com/ class="reference external"&gt;Russia Today&lt;/a&gt; and &lt;a href=http://www.aljazeera.net/ class="reference external"&gt;Al Jazeera&lt;/a&gt; to keep the bias in
check a touch.&lt;/p&gt;
&lt;p&gt;With a simple &lt;a href=https://pypi.python.org/pypi/rdial class="reference external"&gt;rdial&lt;/a&gt; report I can also tell you that on an average
internet connected day I can spend an hour reading news, friend’s blogs, sports
stories, &amp;amp;c.  A big chunk of that time is also combined with breakfast, so
I choose to let it slide for the most part.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=tighten-the-noose class=section&gt;
&lt;h2&gt;Tighten the noose&lt;a title="Permalink to this headline" href=/thoughts/disconnect.html#tighten-the-noose class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the two-thirds of the year that I have internet access, I’ve started to
severely restrict access.&lt;/p&gt;
&lt;p&gt;It all started with a friend who — while wearing his tinfoil hat — preached
about how we all need to consider blocking sites that use &lt;abbr title="Content Delivery Network"&gt;CDNs&lt;/abbr&gt; in much the
same way that many of us block web analytics companies.  We’re probably giving
up more tracking data to the large &lt;abbr title="Content Delivery Network"&gt;CDNs&lt;/abbr&gt;s then we do to the simple analytics
companies.&lt;/p&gt;
&lt;p&gt;The thought popped in to my mind that a whitelist, instead of a blacklist, might
actually be workable and since last November I’ve taken to doing just that.&lt;/p&gt;
&lt;p&gt;The strangest result in my mind is just how short the list is.  My old advert
and analytics blacklist had close to 1500 entries, and would obviously miss many
”nasties” that I either hadn’t seen or that were simply new.&lt;/p&gt;
&lt;p&gt;The whitelist, on the other hand, has only ever had 900 entries. Right now it
has less than 150 thanks to the automated decay-based-on-visits purging of the
entries it contains.&lt;/p&gt;
&lt;p&gt;The whitelist approach also feeds in to my data tracking habit, as I can now
tell from the decay tracking data when bursts of certain sites appear.  For
example, StackOverflow(and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;cdn.sstatic.net/stackoverflow/&lt;/span&gt;&lt;/code&gt; for styling) was
on the whitelist for two weeks in June with six visits, which happens to
coincide with a project that involved porting a tool to Windows.&lt;/p&gt;
&lt;p&gt;The act of using a whitelist makes the point of procrastination noticeable and
adds a cost to even starting it.  Every time I want to visit a new site&lt;a id=id2 href=/thoughts/disconnect.html#s2 class="footnote-reference brackets"&gt;2&lt;/a&gt;,
I have to highlight the &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; and rattle a key combo in &lt;a href=http://awesome.naquadah.org/ class="reference external"&gt;awesome&lt;/a&gt; that updates
the whitelist to enable access to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=on-the-knoll class=section&gt;
&lt;h2&gt;On the knoll&lt;a title="Permalink to this headline" href=/thoughts/disconnect.html#on-the-knoll class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know the whole “go without the internet” thing is going to strike people as
unworkable.  Questions abound about contact via email, missing bug reports,
skipping meeting logs, depriving myself of invites to weddings I don’t wish to
attend and so on.  I do realise it isn’t achievable for everyone, but with
a little effort it should at the very least be achievable for one day a week.&lt;/p&gt;
&lt;p&gt;The other advantage of doing so is the forced removal from services that
actively destroy your privacy and the privacy of your friends and family, which
is something that feels increasingly important in recent years.  For example,
I no longer actively store my addressbook online&lt;a id=id3 href=/thoughts/disconnect.html#s3 class="footnote-reference brackets"&gt;3&lt;/a&gt; nor do I use a service
to help me process receipts any more.&lt;/p&gt;
&lt;div class=sidebar&gt;
&lt;p class=sidebar-title&gt;Admission of guilt&lt;/p&gt;
&lt;p&gt;I have to admit that I haven’t quite dropped all the services I’d like to,
here are a few:&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;&lt;p&gt;Strava - I’m still kind of using for the time being, although Keith’s
replacement looks like it will fulfil my needs &lt;abbr title="Real Soon Now™"&gt;RSN&lt;/abbr&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;status.net - There are one or two people I don’t want to lose contact with
who aren’t able to access our private server because of geo-filtering, and
I don’t know how that can be fixed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;There are a myriad of benefits to dropping the reliance on &lt;abbr title="Software as a Service"&gt;SaaS&lt;/abbr&gt; affairs.  The chance of any of them existing tomorrow is frankly
not all that great: shuttering, buy-out closures, “pivoting”, &amp;amp;c.  You can
also retain some level of control over your own data, knowing that for example
it isn’t being sold or stored in regions with little to no data protection
regulation.&lt;/p&gt;
&lt;p&gt;In all honesty, I — no, &lt;em&gt;we&lt;/em&gt; — should have resisted the urge to use so called
cloud services from the outset.  One doesn’t need to be a fully paid up member
of the tinfoil hat brigade to know that it is just not acceptable to entrust
your important data to external companies for the sake of a little convenience
or a shiny interface.&lt;/p&gt;
&lt;p&gt;Killing my internet access for chunks of time really pointed out how much I had
come to rely on services far beyond my control, and the freedom one feels when
you regain some of that is very comforting.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/disconnect.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The code I use is an unreleased project created by a friend, but
&lt;a href=http://humdi.net/vnstat/ class="reference external"&gt;vnstat&lt;/a&gt; may work equally well for the same purpose.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt id=s2 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/disconnect.html#id2 class=fn-backref&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For the most part I whitelist based on hostname, but as in the
StackOverflow styling example will whitelist specific paths on hosts on some
occasions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt id=s3 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/disconnect.html#id3 class=fn-backref&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m aware that Google has access to a small corner of my contacts graph
via gmail, but I haven’t yet decided how I plan to resolve.  I’ve never used
gmail for work or mail that I’d be uncomfortable reading in public, but it
does act as a nice sieve for everything else right now.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Open Source and enjoyment</title><link href="/thoughts/burn_out.html" rel="alternate"></link><updated>2014-09-03T00:00:00Z</updated><id>/thoughts/burn_out.html</id><summary type="html">&lt;div id=open-source-and-enjoyment class=section&gt;
&lt;h1&gt;Open Source and enjoyment&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#open-source-and-enjoyment class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A few years ago I burned out on Open Source projects, to the point that it was
close to impacting other parts of my life.  I have only myself to blame as
I didn’t manage to distance myself at all well.  Distancing yourself is not easy
to do when your fun hobby for relaxation is the thing that is working against
you.&lt;/p&gt;
&lt;p&gt;There were a variety of incredibly minor issues that piled up Jenga-style.  Then
to carry the weak analogy forward, it toppled over in a split second like Jenga
in a rubber dingy on the rolling seas with a fumbling drunken friend wearing
a blindfold.&lt;/p&gt;
&lt;p&gt;I’ve decided to write down a few of the things that were happening, both as an
act of catharsis and to help me spot the problems in future.  Perhaps it will
help others who are experiencing the same thing but haven’t quite spotted the
catalysts yet.&lt;/p&gt;
&lt;div id=dealing-with-needy-users class=section&gt;
&lt;h2&gt;Dealing with needy users&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#dealing-with-needy-users class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some users seem to feel a disproportionate amount of “you work for me”,
seemingly more so than happens with actual paying customers on other projects
which strikes me as strange.  They’ll bug you endlessly in emails, in the issue
tracker, on &lt;abbr title="Internet Relay Chat"&gt;IRC&lt;/abbr&gt; and in real life if you end up at the same conference.  You
&lt;em&gt;need&lt;/em&gt; to stop this before it takes hold.  It helps if you can be polite, but
if not just stop it anyway.  It is for &lt;em&gt;your&lt;/em&gt; welfare, so just do it.&lt;/p&gt;
&lt;p&gt;I actually found myself burning the wrong people towards the peak of that
imaginary Jenga tower.  You need to make a concerted effort to figure out which
people are delivering the seemingly endless grief or perhaps just relentless
&lt;a href=http://en.m.wikipedia.org/wiki/bikeshedding class="reference external"&gt;bikeshedding&lt;/a&gt;, and stop them.  It is all too easy to accidentally become
annoyed at well meaning useful contributors when you’ve been trawling through
a heap of useless meta-discussion about a change nobody is making.&lt;/p&gt;
&lt;p&gt;On one &lt;em&gt;library&lt;/em&gt; project I worked on there was a user who didn’t read the
documentation, couldn’t use the language enough to write tests, yet still
endlessly sucked up support time by opening awful issues and sending pointless
emails wishing to discuss changes they might make.  I kind of hesitate to say
awful issues, but - for example - if you can’t write a two line assertion in
a language you’re not in the target audience for a library in the first place.&lt;/p&gt;
&lt;p&gt;Those people aren’t even adding value in pointing out deficiencies in
documentation, because they’re not a target user.  It would be like me writing
to &lt;a href=http://www.jcb.com/ class="reference external"&gt;JCB&lt;/a&gt; telling them they must document why they use round knobs on the digger
I saw someone else using.  So try spot it early, and put a stop to it.&lt;/p&gt;
&lt;p&gt;I suspect a big part of the issue here is cost.  I’m sure if there was even
a single penny cost to opening issues or sending a mail it would do wonders for
communication in general.  I suspect that would remain true even if you
reimbursed that penny immediately.&lt;/p&gt;
&lt;div id=the-answer class=section&gt;
&lt;h3&gt;The answer&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#the-answer class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I figured out how to work with this entirely by accident.  Politely offer
answers that move them away from you.  It is by far the easiest solution.&lt;/p&gt;
&lt;p&gt;In one instance I suggested alternative packages to an expensive user, with the
hope they’d quietly move on.  Which is evil really, as what you’re really doing
is dreaming that they’ll move on to bother a developer who isn’t you.&lt;/p&gt;
&lt;p&gt;On another occasion I stole an idea from a friend and said “Sorry, I can’t
figure out how to implement this.  Open a pull request, and I’ll merge it!” to
another.  It worked well, because it stopped the direction-less discussion and
was never going to be followed up with a patch later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=dealing-with-unreasonable-requests class=section&gt;
&lt;h2&gt;Dealing with unreasonable requests&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#dealing-with-unreasonable-requests class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used to get quite annoyed when I received an impolite or unreasonable request
on an Open Source project, nowadays I tend to just respond with pre-canned
answers for most of them.  If you can cut the time it takes to respond to them,
you’ll obviously spend far less time thinking about them.&lt;/p&gt;
&lt;p&gt;The typical one that springs to mind is a user complaining that you’ve not
licensed your &lt;abbr title="GNU General Public License"&gt;GPL&lt;/abbr&gt; code in a way which allows them to use it without
contributing anything in return.  I choose reciprocating licences where I can,
because frankly that may be the only value you provide &lt;em&gt;me&lt;/em&gt; as a user.  I get
that some people need to use their Open Source projects as a way to improve
their CV or build a presence, but for many of us it is just for fun and
reciprocation.&lt;/p&gt;
&lt;p&gt;Another example that I recall, but wish I didn’t, was a user &lt;em&gt;telling&lt;/em&gt; me to
recompress a tarball on &lt;abbr title="Python Package Index"&gt;PyPI&lt;/abbr&gt; because their infrastructure couldn’t support
&lt;strong class=command&gt;bzip2&lt;/strong&gt;.  Seems reasonable enough, but it came wrapped in a tirade of
abuse.  I ignored the abuse, uploaded another tarball and then received another
abusive email in return the next day.  That was a long time ago, far before the
burnout started to creep in so I just addressed the actual issue and moved on.&lt;/p&gt;
&lt;div id=id1 class=section&gt;
&lt;h3&gt;The answer&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#id1 class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I had forgotten about that whole previous story until at &lt;a href=https://europython.eu/ class="reference external"&gt;Europython&lt;/a&gt; a friend
was telling me about someone who was banned from a number of events, hell-banned
on various mailing lists and on forced lockout on Stack Overflow for poisonous
behaviour.  I started to tell my story as an example of strange abusive
behaviour, and it turned out to be the same guy.&lt;/p&gt;
&lt;p&gt;The point is these people can be everywhere so just don’t let them get to you.
I realise that is both obvious and feels hard to do, but it is quite easy in the
virtual world.  If you have the hell-ban option available just use
it; perhaps there is an ignore option in your issue tracker, add a “send to
trash” rule in your email filter.  Even in person it can be quite easy to do,
just politely acknowledge their issue and move away instead of engaging them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=the-solutions class=section&gt;
&lt;h2&gt;The solutions&lt;a title="Permalink to this headline" href=/thoughts/burn_out.html#the-solutions class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I chose a solution I hate, for all intents and purposes I don’t release new Open
Source projects any longer.  I still work on a lot of projects, and the code is
normally available somewhere for strangers.  However, for the most part I’ve
made a point of not hosting or releasing it in the common places.  This works
for me, but it saddens me deeply.&lt;/p&gt;
&lt;p&gt;I have a friend who does something interesting to combat the same problems I’ve
mentioned here.  He hooks the issue tracker to only show issues reported by
people in his second-degree &lt;a href=http://www.foaf-project.org/ class="reference external"&gt;FOAF&lt;/a&gt; circle or people whose user profile is an
active Open Source contributor.  It works, and it cuts out most of the problem
users, but it is nasty.  I feel it is worse than my “solution” because it still
gives the impression of support to the users you won’t support, but also gives
the impression of bad support through heaps of unanswered issues to the users
who would receive good support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;The greatest trick the devil ever played was convincing users they had skin
in the game.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I may be misappropriating a quote from a great film there, but it is important.
A lot of the actively poisonous people who contact you aren’t providing any real
value to you, and they’re probably never going to.  If you can remove them
somehow you’re probably not losing anything, but you’ll be gaining a whole lot
personally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>jnrowe-misc - The unsorted package overlay</title><link href="/articles/probits/jnrowe-misc.html" rel="alternate"></link><updated>2014-06-30T00:00:00Z</updated><id>/articles/probits/jnrowe-misc.html</id><summary type="html">&lt;div id=jnrowe-misc-the-unsorted-package-overlay class=section&gt;
&lt;h1&gt;jnrowe-misc - The unsorted package overlay&lt;a title="Permalink to this headline" href=/articles/probits/jnrowe-misc.html#jnrowe-misc-the-unsorted-package-overlay class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;A collection of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ebuild&lt;/span&gt;&lt;/code&gt; files with no overall theme.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;abbr title="Too Long; Didn’t Read"&gt;TLDR&lt;/abbr&gt;; For what it was &lt;a href=https://github.com/JNRowe/jnrowe-misc class="reference external"&gt;jnrowe-misc&lt;/a&gt; served its
purpose well.&lt;/p&gt;
&lt;div id=an-island-unto-itself class=section&gt;
&lt;h2&gt;An island unto itself&lt;a title="Permalink to this headline" href=/articles/probits/jnrowe-misc.html#an-island-unto-itself class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it may come as a surprise to a few of the users(which would be most of
them) the overlay available on GitHub wasn’t the deliverable at any point in
time.  In fact, the often convoluted merge history in the repository probably
hinted at that quite a bit.&lt;/p&gt;
&lt;a href=/_images/jnrowe-misc.png class="reference internal image-reference"&gt;&lt;img style="width: 50%;" src=/_images/jnrowe-misc.png class=align-right alt="Tree view of ``jnrowe-misc`` history"&gt;&lt;/a&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;jnrowe-misc&lt;/span&gt;&lt;/code&gt; was always the combination of a few independently managed
repositories that I bundled up to make available for public consumption.
Eventually it ended up being mostly Python stuff, but that was because the
support burden of other packages was becoming more time consuming than I could
justify.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; audience for the overlay, my co-workers, saw a different beast
entirely.  It used our keyword types and rules, it came bundled &lt;a href=/articles/tdd_distros.html class="reference internal"&gt;&lt;span class=doc&gt;with the
tests&lt;/span&gt;&lt;/a&gt; I was unable to share and had a tighter schedule for
maintenance.&lt;/p&gt;
&lt;p&gt;Still, I received a fair number of emails and live comments from users so I’ll
call that a success!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=upstreamed class=section&gt;
&lt;h2&gt;Upstreamed&lt;a title="Permalink to this headline" href=/articles/probits/jnrowe-misc.html#upstreamed class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sadly, very little was ever taken upstream(even less if you count the parts that
were credited).  This was entirely my fault.  I originally started exporting the
overlay because I was fed up with the new package process upstream, and it seemed
like the best way to deal with that for me.&lt;/p&gt;
&lt;p&gt;I had hoped that some packages would be picked up, but didn’t actively push them
after the first few.&lt;/p&gt;
&lt;p&gt;The overlay should have never touched packages that were available upstream, but
occasionally they overlapped when upstream added them.  The use of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;::shadow&lt;/span&gt;&lt;/code&gt;
to workaround problems when new packages were added upstream worked &lt;em&gt;really&lt;/em&gt;
well, and saved the few remaining hairs on my balding head.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=legacy class=section&gt;
&lt;h2&gt;Legacy&lt;a title="Permalink to this headline" href=/articles/probits/jnrowe-misc.html#legacy class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It looks like the majority of packages will continue to be maintained for the
foreseeable future, but regrettably it looks like the result will not be
available beyond a “open to all people who know where to look” organisation on
GitHub.&lt;/p&gt;
&lt;p&gt;I’d like to change the new maintainer’s mind, but in all honesty I understand
their reasons.  I’ve stopped maintaining a lot of once public projects over the
past couple of years, and it is as refreshing as it is saddening.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Project postmortems</title><link href="/articles/probits/index.html" rel="alternate"></link><updated>2014-06-30T00:00:00Z</updated><id>/articles/probits/index.html</id><summary type="html">&lt;div id=project-postmortems class=section&gt;
&lt;h1&gt;Project postmortems&lt;a title="Permalink to this headline" href=/articles/probits/index.html#project-postmortems class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One of my favourite things about the day job is the post-project analysis and
postmortems, which we lovingly refer to as &lt;abbr title="Project Obituaries"&gt;probits&lt;/abbr&gt;
internally.&lt;/p&gt;
&lt;div id=background class=section&gt;
&lt;h2&gt;Background&lt;a title="Permalink to this headline" href=/articles/probits/index.html#background class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I work in heavily structured and standalone project-oriented environment.  In
a decade I can count the number of fluid projects on three fingers.  As I write
this in June 2014 my tier-one project started 21 months ago, and has a delivery
date locked down to a week in 2015.  We’ll deliver on time or a touch early, our
team is known for that.&lt;/p&gt;
&lt;p&gt;One of the benefits of working on such strict projects with definite ship dates
and locked schedules is that you always know when a project is complete.  This
also allows us to take advantage of that by inspecting the project as a whole,
spotting the successes and failures within.  Probits are the more informal
dialogue that we pin to the front of each folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=what-youll-find class=section&gt;
&lt;h2&gt;What you’ll find&lt;a title="Permalink to this headline" href=/articles/probits/index.html#what-youll-find class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve recently decided I’d like to take a similar approach to some side projects
that I work on, and also try to apply the methods to some more real-life
situations.  This category, and the accompanying index, below are that attempt.&lt;/p&gt;
&lt;div class="toctree-wrapper compound"&gt;
&lt;ul&gt;
&lt;li class=toctree-l1&gt;&lt;a href=/articles/probits/jnrowe-misc.html class="reference internal"&gt;jnrowe-misc - The unsorted package overlay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dropping Gentoo reflex</title><link href="/articles/dropping_gentoo_reflex.html" rel="alternate"></link><updated>2014-06-29T00:00:00Z</updated><id>/articles/dropping_gentoo_reflex.html</id><summary type="html">&lt;div id=dropping-gentoo-reflex class=section&gt;
&lt;h1&gt;Dropping Gentoo reflex&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo_reflex.html#dropping-gentoo-reflex class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After hitting the publish button on &lt;a href=/articles/dropping_gentoo.html class="reference internal"&gt;&lt;span class=doc&gt;Dropping Gentoo&lt;/span&gt;&lt;/a&gt; a few friends
commented that I was either unnecessarily harsh about Gentoo or we wasted an
enormous amount of time on it.  It definitely was the former, and I feel
a touch ashamed for implying the latter.&lt;/p&gt;
&lt;p&gt;I was writing my thoughts in the “project obituary” form that I’m used to, and
that is entirely about spotting the downsides to make sure they don’t reoccur.
And with that in mind I &lt;em&gt;was&lt;/em&gt; being incredibly unfair to Gentoo, both the
project and by extension the people working on it.&lt;/p&gt;
&lt;p&gt;There were many, many good points about Gentoo and I’ll nod towards a few now.&lt;/p&gt;
&lt;div id=speed class=section&gt;
&lt;h2&gt;Speed&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo_reflex.html#speed class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No, no.  Not the “Oh my god, my KDEs are so fast” that many people fairly
associate with Gentoo users.  I’m talking about the basic package handling
tasks.&lt;/p&gt;
&lt;p&gt;There are very few other distributions that can match Gentoo when it comes to
the speed of editing a package.  Or, for that matter, the speed of installation
if you share binary packages.&lt;/p&gt;
&lt;p&gt;Almost the first thing you notice when switching to Debian or Fedora as a heavy
binary package user on Gentoo is just how slow package installation and removal
is.  Binary package installation on Gentoo feels on par with a distribution
like Slackware, and what passes for package management there is just choosing
the right argument to &lt;strong class=command&gt;tar&lt;/strong&gt;’s &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/trace.html#cmdoption-trace-C class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-C&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt;
&lt;p&gt;Where Gentoo really excels though is in the speed of creating new packages or
editing existing packages.&lt;/p&gt;
&lt;p&gt;Lets take a look at an example.  Say, for example, that you just found out that
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;flask-dashed&lt;/span&gt;&lt;/code&gt;’s  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ebuild&lt;/span&gt;&lt;/code&gt; mistakenly installs a &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;/usr/README&lt;/span&gt;&lt;/code&gt; file.
We we can fix the problem with the following simple change and a call to
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;repoman&lt;/span&gt; &lt;span class=pre&gt;manifest&lt;/span&gt;&lt;/code&gt;, the rest takes care of itself.&lt;/p&gt;
&lt;div class=highlight-diff&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gh&gt;diff --git i/flask-dashed-0.1b_p2.ebuild w/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gh&gt;index dd64877a387e..cf3e3cbf272b 100644&lt;/span&gt;
&lt;span class=gd&gt;--- i/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gi&gt;+++ w/flask-dashed-0.1b_p2.ebuild&lt;/span&gt;
&lt;span class=gu&gt;@@ -29,5 +29,6 @@ S="${WORKDIR}/${MY_P}"&lt;/span&gt;

 src_prepare() {
        distutils-r1_src_prepare
&lt;span class=gi&gt;+       sed -i /data_files/d setup.py || die "sed failed"&lt;/span&gt;
        rm -rf "${S}/tests"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;Of course, you should fix the package properly and send the fix upstream but
this is just to prove a point.  Calling &lt;strong class=command&gt;die&lt;/strong&gt; with &lt;strong class=command&gt;sed&lt;/strong&gt;
there isn’t recommended and is practically pointless, but it is the style
upstream.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I have to mention a small downside here however, because very few people seem to
test &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt;’s binary package support you’ll occasionally have to do some
leg work to fix problems.  This normally arises when you have an &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;eclass&lt;/span&gt;&lt;/code&gt;
change that needs to ripple through, or when a library breaks compatibility and
its &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ebuild&lt;/span&gt;&lt;/code&gt; hasn’t been bumped properly.&lt;/p&gt;
&lt;p&gt;Almost every time that happens you can fix it with a quick loop in your shell
though.  A couple of such problems and solutions that I found in my shell
history can be seen below.&lt;/p&gt;
&lt;div class=highlight-zsh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=c1&gt;# When you were stuck with packages that used python-distutils-ng, and you&lt;/span&gt;
&lt;span class=c1&gt;# needed to scrub packages because you changed Python version&lt;/span&gt;
&lt;span class=k&gt;for&lt;/span&gt; p in &lt;span class=k&gt;$(&lt;/span&gt;portageq pkgdir&lt;span class=k&gt;)&lt;/span&gt;/*-*/*.tbz2&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=k&gt;do&lt;/span&gt;
    qtbz2 -xO &lt;span class=nv&gt;$p&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; qxpak -xO - &lt;span class=si&gt;${${&lt;/span&gt;&lt;span class=nv&gt;p&lt;/span&gt;&lt;span class=p&gt;##*/&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=p&gt;/.tbz2&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;.ebuild &lt;span class=p&gt;|&lt;/span&gt; grep -q &lt;span class=s1&gt;'SUPPORT_PYTHON_ABIS'&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=nv&gt;$p&lt;/span&gt;
&lt;span class=k&gt;done&lt;/span&gt;

&lt;span class=c1&gt;# When you were using packages that used python’s “-r1” eclasses and all&lt;/span&gt;
&lt;span class=c1&gt;# you could see is a flood of blockages in your update output&lt;/span&gt;
&lt;span class=k&gt;for&lt;/span&gt; p in &lt;span class=k&gt;$(&lt;/span&gt;portageq pkgdir&lt;span class=k&gt;)&lt;/span&gt;/*-*/*.tbz2&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=k&gt;do&lt;/span&gt;
    qtbz2 -xO &lt;span class=nv&gt;$p&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; qxpak -xO - RDEPEND &lt;span class=m&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class=p&gt;|&lt;/span&gt; grep -q &lt;span class=s2&gt;"dev-python/python-exec"&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=nv&gt;$p&lt;/span&gt;
&lt;span class=k&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=documentation class=section&gt;
&lt;h2&gt;Documentation&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo_reflex.html#documentation class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The excellent &lt;a href=http://devmanual.gentoo.org/ class="reference external"&gt;devmanual&lt;/a&gt; and the incredible &lt;a href=http://wiki.gentoo.org/wiki/Project:PMS class="reference external"&gt;Package Manager Specification&lt;/a&gt;
made life so much easier.  The devmanual was both short enough to be used as
quick reference and complete enough that you could learn most of what you’d need
to know from it.  The unfortunately named &lt;abbr title="Package Manager Specification"&gt;PMS&lt;/abbr&gt; acted as the reference that
finally allowed us to switch from away from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt; completely at the
office.&lt;/p&gt;
&lt;p&gt;The &lt;abbr title="Package Manager Specification"&gt;PMS&lt;/abbr&gt; documented much of the nastiness that &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt; suffers from, and
made life in general a whole lot nicer when you were chasing bugs deep down the
rabbit hole.  And, let us be honest here it also stopped a little of the
fluidity that plagued &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Some people argue that it acts as unnecessary stop motion but those people must
be forgetting what happened when behaviour changed randomly between &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt;
versions.  &lt;abbr title="Package Manager Specification"&gt;PMS&lt;/abbr&gt;, and the EAPI process, also brought some much needed design
and stability to newer features.&lt;/p&gt;
&lt;p&gt;All Gentoo users owe Ciaran McCreesh a few beers for all the hard work he put in
to those documents, especially in the early days.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=the-personal-touch class=section&gt;
&lt;h2&gt;The personal touch&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo_reflex.html#the-personal-touch class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On a personal note I’ve met some awesome people over the years as a result of
using Gentoo.  Many of them at the old Gentoo UK conferences, which were always
fun.  More recently at LoFu’s annual summit which seems to have taken Gentoo
UK’s place with practically everyone you saw at Gentoo UK(minus the students),
and oddly about the same Gentoo to non-Gentoo ratio of talks too.&lt;/p&gt;
&lt;p&gt;Two excellent people on our current team were recruited following the Gentoo UK
conference at &lt;abbr title="University College London"&gt;UCL&lt;/abbr&gt;, and we met a spectacular
contract hire at the one prior to that as well.&lt;/p&gt;
&lt;p&gt;I’ve even been lucky enough to have a few doors held open for me via people I’ve
met at Gentoo-themed or Gentoo-heavy events, and I suspect I’d be writing this
from a less happy place without them.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=wrapping-up class=section&gt;
&lt;h2&gt;Wrapping up&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo_reflex.html#wrapping-up class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is true that you really can not always see the forest for trees.&lt;/p&gt;
&lt;p&gt;Had recent events not clouded my vision I would have commented on the train
wreck that is &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;webapp.eclass&lt;/span&gt;&lt;/code&gt; and &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;app-admin/webapp-config&lt;/span&gt;&lt;/code&gt; in
&lt;a href=/articles/dropping_gentoo.html class="reference internal"&gt;&lt;span class=doc&gt;Dropping Gentoo&lt;/span&gt;&lt;/a&gt;.  It sucked tonnes and tonnes of time away until we
eventually just trashed any package that interacted with it and moved on.&lt;/p&gt;
&lt;p&gt;That was so long ago that I had forgotten about it until a co-worker asked me
why I hadn’t mentioned it.  I suspect most of the other negative comments I made
will feel equally inconsequential when compared to the benefits Gentoo gave us
as time moves on.&lt;/p&gt;
&lt;p&gt;Instead of making this rant even longer, I’ll take the time to reflect on the
fun memories.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dropping Gentoo</title><link href="/articles/dropping_gentoo.html" rel="alternate"></link><updated>2014-06-18T00:00:00Z</updated><id>/articles/dropping_gentoo.html</id><summary type="html">&lt;div id=dropping-gentoo class=section&gt;
&lt;h1&gt;Dropping Gentoo&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#dropping-gentoo class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We’ve been using &lt;a href=http://gentoo.org class="reference external"&gt;Gentoo&lt;/a&gt; for shipped products since June 2005, and as
a development platform since September 2004.  A long time, an incredibly long
time in fact.&lt;/p&gt;
&lt;p&gt;Today our final Gentoo using product shipped, with a single scheduled update
promised in Q3-2015.  It is kind of sad day, but we all knew that day was coming
and it takes only a little inside knowledge to know why.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;A couple of people have rightly pointed out that I was a little harsh in
this document, so I’ve pushed a &lt;a href=/articles/dropping_gentoo_reflex.html class="reference internal"&gt;&lt;span class=doc&gt;followup&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=landscapes-have-changed class=section&gt;
&lt;h2&gt;Landscapes have changed&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#landscapes-have-changed class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back when we started using Gentoo it was clearly the best choice for what we
needed; a easily coercible base on which to construct our Linux devices.  There
actually weren’t a lot of viable choices back then.&lt;/p&gt;
&lt;p&gt;&lt;a href=http://debian.org class="reference external"&gt;Debian&lt;/a&gt;, which many of us loved, felt like the only mainstream distribution we
could have used.  Unfortunately, it wasn’t available for the arches we needed.
It also didn’t package many of things we used at that point, but to be fair
there were &lt;abbr title="Intent to Package"&gt;ITPs&lt;/abbr&gt; (were they called that back then?)
already floating about for most of them.&lt;/p&gt;
&lt;p&gt;The “from source” options available then would, for all intents and purposes,
have meant taking on the support costs of the entire stack which nobody wanted
to commit to.  As it turns out that burden slowly crept up on us over the next
ten years anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=take-a-left-in-100-metres class=section&gt;
&lt;h2&gt;Take a left in 100 metres&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#take-a-left-in-100-metres class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the years we regrettably diverged heavily from upstream, almost to the
point that saying we use Gentoo almost feels like a lie.&lt;/p&gt;
&lt;p&gt;Before our first product shipped we had already switched to maintaining the
essential toolchain packages like GCC and glibc ourselves.  I can’t recall the
specific reasons as I didn’t work on them, but I recall agreeing with them.&lt;/p&gt;
&lt;p&gt;At some point we started using a custom package manager, initially just a new
drop-in resolver and eventually a completely independent package manager.
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;portage&lt;/span&gt;&lt;/code&gt; was ferociously buggy in places and also appeared to be moribund, so
it seemed like the correct choice.  We never supported the full range of
features that Gentoo’s &lt;a href=http://wiki.gentoo.org/wiki/Project:PMS class="reference external"&gt;PMS&lt;/a&gt; now defines, but it made the support surface a lot
nicer.&lt;/p&gt;
&lt;p&gt;There was a point where we seriously considered moving to a &lt;a href=http://en.wikipedia.org/wiki/Conary_(package_manager) class="reference external"&gt;Conary&lt;/a&gt;-based
infrastructure.  It did loads of the cool things we wanted to do and it mostly
fitted our workflow with its “Gentoo done right” feel.  Sadly, it has
a &lt;abbr title="Contributor License Agreement"&gt;CLA&lt;/abbr&gt; which none of us could sign that practically guaranteed we would
eventually be in the same place we were with Gentoo.  May have been
a fortuitous roadblock in the end, as Conary never gained the traction it
once promised(perhaps in part because of that &lt;abbr title="Contributor License Agreement"&gt;CLA&lt;/abbr&gt;?).&lt;/p&gt;
&lt;p&gt;Had we waited another five months, there would have been another open source
package manager for Gentoo we could have easily switched to and hacked on.
There is perhaps a pattern here…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=upstreaming-changes class=section&gt;
&lt;h2&gt;Upstreaming changes&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#upstreaming-changes class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course, running a non-standard package manager and a thick layer of custom
packages at the bottom of the stack made contributing changes back upstream very
time consuming.  Many of us tried, but eventually most stopped.&lt;/p&gt;
&lt;p&gt;Anyone who was running Gentoo in the mid-00’s will recall the giant wedge that
got in the way of reporting bugs, and sadly by the time it disappeared many of
us had lost interest.&lt;/p&gt;
&lt;p&gt;If you had ran the gauntlet and lucked out with a bug in front of a developer,
there was a new barrier that many were irked by: lack of attribution.  It never
bothered me, but the number of developers who wouldn’t even reference a bug
report in the ChangeLog was huge.  That taught me a valuable personal lesson,
I always attribute a commit to the reporter even when I’ve significantly mangled
a patch to make it acceptable.&lt;/p&gt;
&lt;p&gt;For a time, to ease the annoyance we used to play a game where we reported real
bugs with patches, but using silly data for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;emerge&lt;/span&gt; &lt;span class=pre&gt;--info&lt;/span&gt;&lt;/code&gt;.  It was
definitely fun while it lasted, but it didn’t solve the pain points.  Not
wanting to be associated with the bugs made people use pseudonyms, which also
removed the expectation of attribution too.&lt;/p&gt;
&lt;p&gt;I kept trying to report trivial and cosmetic bugs - ones which didn’t require
a huge upfront investment - for some time, but they’d go unchanged for weeks or
months so I stopped doing that too&lt;/p&gt;
&lt;p&gt;Looking around now there is an automatically generated list of bugs with patches
which we’ve fixed but haven’t upstreamed, and a few random entries from it look
like this:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/jay.rst
&lt;span class=go&gt;1157 /home/jay/gentoo/to_push/jay.rst&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/mattias.rst
&lt;span class=go&gt;2104 /home/jay/gentoo/to_push/mattias.rst&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; wc -l ~/gentoo/to_push/chrisp.rst
&lt;span class=go&gt;873 /home/jay/gentoo/to_push/chrisp.rst&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That genuinely upsets me greatly.  The amount of potential duplicated effort
they represent is enormous, and I don’t even want to attempt to put a figure on
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=supporting-upstream class=section&gt;
&lt;h2&gt;Supporting upstream&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#supporting-upstream class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’re entirely to blame.  We always planned on supporting upstream in whichever
way we could.  That fell down for instances beyond sending patches too.&lt;/p&gt;
&lt;p&gt;The story that comes to mind is from a chance encounter at LinuxWorld back in
2005.  We had managed to gather a whole heap of really cool hardware to donate
to projects who were exhibiting on the day we attended, and it felt nice handing
out toys as a little “thank you” to the projects we depended on.&lt;/p&gt;
&lt;p&gt;It wasn’t all roses though.  My manager went off to offer some ARM-based devices
to the Gentoo guys who were there, but was met with “tremendous rudeness” from
the person manning their desk at the time.  In hindsight people could have
predicted a similar outcome, and it was just an unlucky moment for him to walk
up.  That soured his enthusiasm no end, and it was the last time we managed to
score bags of toys to randomly give away to developers on any project.&lt;/p&gt;
&lt;p&gt;If you were one of the people who received a Nokia tablet or ZipIt in the Hand
&amp;amp; Flower that evening, you now know the reason and perhaps you can even guess
who to thank.&lt;/p&gt;
&lt;p&gt;A year or so later I watched a similar scenario play out at the Gentoo UK
conference with a potential sponsor and the same developer.  Evening beers were
met with other people telling stories about that same person, which was a shame
as it probably cost them a few good cash and infrastructure sponsors that day
alone.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=support-costs class=section&gt;
&lt;h2&gt;Support costs&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#support-costs class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over time we’ve come to support most of the tree that people refer to as
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gentoo-x86&lt;/span&gt;&lt;/code&gt; ourselves.  The toolchain changes we needed at the time
necessitated supporting a few packages further up the stack.  Our desire to trim
the tree of a few categories that were problematic, meant replacing a variety of
packages with then unavailable dependencies.&lt;/p&gt;
&lt;p&gt;And there were many other examples too…&lt;/p&gt;
&lt;div id=matchbox class=section&gt;
&lt;h3&gt;matchbox&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#matchbox class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We packaged &lt;a href=/articles/dropping_gentoo.html#matchbox class="reference internal"&gt;matchbox&lt;/a&gt; and its associated packages a long, long time before they
hit the official tree.  It was the first real pain point we had with packages
appearing in the tree after we had already been using them.&lt;/p&gt;
&lt;p&gt;When they did eventually hit the tree we had to carry workarounds for years.  At
some point we stopped trying and just scrubbed the ebuilds that got in the way.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=python class=section&gt;
&lt;h3&gt;Python&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#python class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The state of the Python packaging a few years ago made us take the jump to
replace or remove anything that packaged a Python module.  Initially very time
consuming, but it saved an enormous amount of grief.&lt;/p&gt;
&lt;p&gt;I suspect we could move closer to upstream at this point, but the point is now
moot.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=systemd class=section&gt;
&lt;h3&gt;systemd&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#systemd class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We switched to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;systemd&lt;/span&gt;&lt;/code&gt; before the package was in upstream’s tree, and we
have had to keep supporting it to this day because of insurmountable packaging
differences.&lt;/p&gt;
&lt;p&gt;In a few places that means taking on packages with a reverse dependency too,
where differences create issues.  And it clearly means taking on any package
that depends on &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;openrc&lt;/span&gt;&lt;/code&gt; or Gentoo’s &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;baselayout&lt;/span&gt;&lt;/code&gt; package.  Those packages
are becoming fewer and fewer by the day though, so that would have become
a non-issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=x-org class=section&gt;
&lt;h3&gt;X.org&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#x-org class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We had been packaging x.org’s packages to work around some implementation
differences with upstream since the dawn of modular X.  Mostly just to do with
how dependencies were specified to start with, but they’re no longer even
remotely similar.&lt;/p&gt;
&lt;p&gt;Luckily there isn’t a great deal of churn in the packages we care about for the
most part, so it never caused a huge time sink.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=the-end-is-nigh class=section&gt;
&lt;h2&gt;The end is nigh&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#the-end-is-nigh class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At some point it began to feel like we were maintaining our own distribution
from end-to-end, and that wasn’t fun.  It also wasn’t what any of us needed to
do, and the time it was taking measurably ate in to &lt;em&gt;real&lt;/em&gt; project time.&lt;/p&gt;
&lt;p&gt;The decision to start weaning ourselves off of Gentoo was made back in the
summer of last year, and it has finally started to come in to effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=the-times-they-are-a-changing class=section&gt;
&lt;h2&gt;The Times They Are a-Changing&lt;a title="Permalink to this headline" href=/articles/dropping_gentoo.html#the-times-they-are-a-changing class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are plenty of good alternatives out there now for building systems that
need to run on a variety of architectures.  Some binary, some source-based and
a few hybrid approaches.&lt;/p&gt;
&lt;p&gt;The project I’m working on right now is using Debian &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;testing&lt;/span&gt;&lt;/code&gt;, and it appears
to be working out fine.  Some things still annoy me, like the time it takes to
patch and recreate a package.  It is a trivial thing with Gentoo, but requires
far too much work with Debian.  Perhaps we’ll improve the workflow enough as we
develop more experience.&lt;/p&gt;
&lt;p&gt;We’ve also hit a good moment to use Debian because a whole heap of work has gone
in to making Debian easier to bootstrap, and it definitely shows.  When I find
out who has done all the magic to make that happen I’ll scribble down a note to
owe them some beers.&lt;/p&gt;
&lt;p&gt;We’re also lucky in that we employ two Debian developers, one is practically
a funded full-time Debian developer.  They’re incredibly knowledgeable and it
makes working with Debian a lot easier, so thanks guys!&lt;/p&gt;
&lt;p&gt;All told, things look good.  We’re still playing with some alternatives and as
yet no concrete decisions have been made, but I feel like we’re on the right
track for the next ten years.&lt;/p&gt;
&lt;p&gt;So long Gentoo, and thanks for all fish!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Delayed flashover</title><link href="/thoughts/delayed_flashover.html" rel="alternate"></link><updated>2014-04-09T00:00:00Z</updated><id>/thoughts/delayed_flashover.html</id><summary type="html">&lt;div id=delayed-flashover class=section&gt;
&lt;h1&gt;Delayed flashover&lt;a title="Permalink to this headline" href=/thoughts/delayed_flashover.html#delayed-flashover class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This weekend a very good friend of mine is taking part in the London Marathon,
and we’re all looking forward to the no-doubt incredible time she’ll finish in.&lt;/p&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;“Fun run” is the excuse losers give &lt;em&gt;before&lt;/em&gt; a race&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Normally, I wouldn’t bother writing anything about such an event but this is
different.  It is different because she is practically a hero to me.&lt;/p&gt;
&lt;p&gt;I’m talking about Rach.&lt;/p&gt;
&lt;p&gt;Last summer she gave birth to a bouncing baby girl&lt;a id=id1 href=/thoughts/delayed_flashover.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Seven months later she is going to complete a marathon.  I would say “planning
to complete”, but I know better at this point.&lt;/p&gt;
&lt;p&gt;This is made all the more impressive because a decade ago we thought we’d lose
her following a serious accident.  As time went on and things improved the
realisation that we’d have a wheelchair-bound-for-life friend kicked in.  And
slowly it became clear that we’d have a crutch-bound-for-life friend.  And
eventually it became quite obvious we’d have a soul-filling running machine to
envy once again.&lt;/p&gt;
&lt;p&gt;Now she has been lucky, very lucky.  But we make our own luck too, and she is an
awesome luck making machine.  To poorly misuse a Pasteur quote that I already
tend to overuse, “luck favours the prepared mind.”&lt;/p&gt;
&lt;p&gt;If I have one tip for the Dear Reader this week it is this: Keep your
sponsorship options in check, she’ll destroy the target time.  Go Rach!&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Sub-four finish, ‘nuff said.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/delayed_flashover.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;a term which always make me think I should call child services&lt;a id=id2 href=/thoughts/delayed_flashover.html#s2 class="footnote-reference brackets"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt id=s2 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/delayed_flashover.html#id2 class=fn-backref&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;a term which makes me think they bring fizzy drinks and sugary cakes&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</summary></entry><entry><title>Hitting life’s reset button</title><link href="/thoughts/reset_in_ten.html" rel="alternate"></link><updated>2014-02-24T00:00:00Z</updated><id>/thoughts/reset_in_ten.html</id><summary type="html">&lt;div id=hitting-lifes-reset-button class=section&gt;
&lt;h1&gt;Hitting life’s reset button&lt;a title="Permalink to this headline" href=/thoughts/reset_in_ten.html#hitting-lifes-reset-button class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Seven months ago while enjoying a little Saturday afternoon cricket picnic,
a friend posed the question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;“If life had a reset button when would you have used it?”&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, I understand the point and the purpose of this.  Catherine was hoping to
elicit some deep truths, with the eventual goal that people would bond further.
That doesn’t mean I played the game though.&lt;/p&gt;
&lt;p&gt;I recall my answer was somewhat flippant:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;“I’d have used it repeatedly half an hour ago, until I figured out the magic
incantation that convinces that cashier in the ‘Express to join me for
a picnic… and then I would have ditched you suckers.”&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;It was an honest-ish answer;  I mean yeah, she may have been worth messing with
the universe for.  It wasn’t, however, the correct kind of reply.  I should
have been describing some dreadful mistake I made, both to make my friends
laugh and also to let them in a little closer.&lt;/p&gt;
&lt;p&gt;I didn’t choose to answer that way to be deliberately obtuse, I answered
that way simply because it was how I felt at the time.&lt;/p&gt;
&lt;p&gt;Since then, and I direct you to the first three words of this post, I’ve been
mildly obsessed with the question.  I have a twenty heading document where I’ve
described branch points in my life, specifically the ones with the deepest joy
and most painful regrets.  I hoped I’d see a pattern of some kind, and that
would allow me to direct myself toward the happier paths in future.&lt;/p&gt;
&lt;p&gt;I didn’t, and it hasn’t.  Not even a little bit.&lt;/p&gt;
&lt;p&gt;I don’t seem to find myself in the situations where I could repeat the most
foolish decisions that I really regret.  And I wonder whether that is because
I’ve eventually been smart enough to learn my lessons, or stupid enough that
I’m unable to spot the new mistakes yet.&lt;/p&gt;
&lt;p&gt;The whole process has been very cathartic though. Despite having
a &lt;em&gt;significantly&lt;/em&gt; higher proportion of regrets than successes in my list,
I kind of enjoying reviewing it in a cringe ridden way.&lt;/p&gt;
&lt;p&gt;I’d really like to thank Catherine for offering the mirror, it has been
intriguing in a terrifying and horrific kind of way.  Unfortunately, I can’t.
It is too late, and there is another lesson for me to learn.&lt;/p&gt;
&lt;hr class=docutils&gt;
&lt;p&gt;For what it’s worth, that girl still works at the ‘Express and I’ve done
nothing useful about it.  Internet, this is the foolish truth I proffer you
today.  The others well, they’ll hopefully remain hidden away from view.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Return to rambling</title><link href="/thoughts/the_returned.html" rel="alternate"></link><updated>2014-01-27T00:00:00Z</updated><id>/thoughts/the_returned.html</id><summary type="html">&lt;div id=return-to-rambling class=section&gt;
&lt;h1&gt;Return to rambling&lt;a title="Permalink to this headline" href=/thoughts/the_returned.html#return-to-rambling class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I kept a public journal from about 2003 until 2009, with a new entry about every
three days.  I enjoyed the act of writing it greatly, and often looked forward
to the period of contemplation it would create.  However, eventually I found
I had to kill it, but not because of waning enthusiasm as is so often the case.&lt;/p&gt;
&lt;p&gt;I had simply become incredibly frustrated and entirely fed up with having to
censor myself; “unprofessional” thoughts, fear of discussing hot political
issues, &amp;amp;c.  I realised, towards the end, that I would spend about the same
amount of time editing a post as I would writing it.  Sometimes I would spend an
hour on a short post and finally delete it entirely.  &lt;em&gt;All&lt;/em&gt; the love was gone,
&lt;em&gt;all&lt;/em&gt; of it.&lt;/p&gt;
&lt;div id=unleash-the-shout-hole class=section&gt;
&lt;h2&gt;Unleash the shout-hole&lt;a title="Permalink to this headline" href=/thoughts/the_returned.html#unleash-the-shout-hole class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So why return?  Simple, I’ve reached a stage in my life where I don’t have to be
quite so concerned with outbound appearances for the sake of professional life,
and I should feel free to express myself how I wish in my personal life.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong, I’m not about to start writing about whatever noisy issue
I can find just because I can.  I’m not, nor have I ever wished to be, a tabloid
journalist.&lt;/p&gt;
&lt;p&gt;The purpose of this resurrection and the previous incarnations has always been
as an outlet for some of my views.  It is a side-effect should it be read by
others.  However, some of my fondest memories of writing have been the
conversations that have arisen from folks who’ve contacted me about an entry.
I’ve engaged with some extremely interesting people this way, some of whom
I remain in touch with to this day.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;always&lt;/em&gt; have an open invitation to thank me, correct me, shame me or berate
me for the opinions I express or information I spread.  And that invitation is
absolutely extended to this site and the new content I post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Murdering morality with ferocious fire</title><link href="/thoughts/important_balance.html" rel="alternate"></link><updated>2014-01-25T00:00:00Z</updated><id>/thoughts/important_balance.html</id><summary type="html">&lt;div id=murdering-morality-with-ferocious-fire class=section&gt;
&lt;h1&gt;Murdering morality with ferocious fire&lt;a title="Permalink to this headline" href=/thoughts/important_balance.html#murdering-morality-with-ferocious-fire class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;Morality is herd instinct in the individual.&lt;/p&gt;
&lt;p class=attribution&gt;—Friedrich Nietzsche&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;When I look back at my life’s work thus far I often find myself asking the
question “was it worth it?”&lt;/p&gt;
&lt;p&gt;That question isn’t meant in some kind of crazed suicidal manner, I just mean
specifically the projects I’ve worked on and the things I do.  Are they just?
Should I be doing this?&lt;/p&gt;
&lt;p&gt;I truly hope it doesn’t come as a surprise to people who know me, but I consider
myself to be a person of strong moral values&lt;a id=id1 href=/thoughts/important_balance.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt;.  I probably shouldn’t admit
this publicly, but over the years I have turned down several projects I didn’t
feel ethically comfortable working on.  And it has &lt;em&gt;demonstrably&lt;/em&gt; held my career
progression back.  I mostly fine with that.  No, I really am.&lt;/p&gt;
&lt;p&gt;The simple fact is that I’m due for a HR review, overdue actually, and these
questions have started to come to the fore again.  I’ll lay in bed thinking
about them, I’ll sit here typing about them, I’ll judge other people to gauge
the validity of my position and I’ll bore people who’ll listen with my
dilemmas.&lt;/p&gt;
&lt;p&gt;One shouldn’t really use the word “dilemma” here, these issues are practically
the definition of “First World Problems”.  Part of me is disgusted to waste so
much time on frankly trivial introspection, but for better or worse it is
a &lt;em&gt;huge&lt;/em&gt; part of my self-identity.&lt;/p&gt;
&lt;p&gt;I feel that — to some extent — I’m living a weak, self-imposed and
inconsequential version of &lt;a href="http://en.m.wikipedia.org/wiki/Pascal's_wager" class="reference external"&gt;Pascal’s Gambit&lt;/a&gt;.  I know full well that the works
I’ve rejected have been seen to completion by others.  I’ve not scuppered them,
nor have I even attempted to.  Not having me work on them has perhaps even made
them far more effective at whatever aspect I took exception to.  I’m making
moral decisions with no weight beyond my own mind, no ripple beyond my own
insignificant life puddle and no wake beyond this now excessively long essay.&lt;/p&gt;
&lt;p&gt;However, in the face of these realisations I still find myself unable to
consider the decisions wrong.  I’d still choose to reject them now, and
I suspect that will remain true in the future.  I like that these decisions are
defensible to &lt;em&gt;me&lt;/em&gt;, that they &lt;em&gt;must&lt;/em&gt; be defensible to me.  I love that the thing
that keeps me awake at night is not the thought of the possibly nefarious
effects of my works, but rather the exceedingly minor issue of not having
a glistening and well-spec’d M6 in the garage.&lt;/p&gt;
&lt;p&gt;Now, let me sleep.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/important_balance.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For those values to be strong doesn’t necessarily mean they have to
line up with your definition of “strong moral values” ;)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</summary></entry><entry><title>Dopplr defects</title><link href="/thoughts/dopplr_effects.html" rel="alternate"></link><updated>2014-01-06T00:00:00Z</updated><id>/thoughts/dopplr_effects.html</id><summary type="html">&lt;div id=dopplr-defects class=section&gt;
&lt;h1&gt;Dopplr defects&lt;a title="Permalink to this headline" href=/thoughts/dopplr_effects.html#dopplr-defects class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;Dopplr was a free social networking service, launched in 2007, that allowed
users to create itineraries of their travel plans and spot correlations with
their contacts’ travel plans in order to arrange meetings at any point on
their journey.&lt;/p&gt;
&lt;p class=attribution&gt;—&lt;a href=http://en.m.wikipedia.org/wiki/Dopplr class="reference external"&gt;dopplr&lt;/a&gt; wikipedia entry&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;A couple of months ago &lt;a href=http://en.m.wikipedia.org/wiki/Dopplr class="reference external"&gt;dopplr&lt;/a&gt; was shut down.  It was perhaps my most
favouritistist of websites, but I didn’t use it.  In fact, I hadn’t visited in
nearly three years and it contained no data I was interested in saving…  but
I still counted it among my favourite sites.&lt;/p&gt;
&lt;p&gt;dopplr had an elegant, yet jaw droppingly beautiful design; a marvel of
simplicity and discoverability.  The functionality was great, who doesn’t like
the idea of discovering happy collisions with old friends?  The implementation
was cool, introducing me to OpenID.  I loved the site enough to read the
&lt;a href=/thoughts/dopplr_effects.html#backstory class="reference internal"&gt;backstory&lt;/a&gt; when the shutdown news was being passed around, but I still didn’t
want to use it again.  The cost for this functionality was just far too great
for me.&lt;/p&gt;
&lt;p&gt;I simply couldn’t stomach giving up the information that dopplr required to
function.  It required an enormous amount of vigilance to police your own data
on the way in, to make sure you weren’t sharing things you couldn’t or
shouldn’t.  You could often glean things that people didn’t perhaps realise they
were sharing.  A friend’s weekend to somewhere odd like Bedford wasn’t just
a sign that you could meet up for lunch, it was probably also a sign that they
were visiting Lockheed Martin&lt;a id=id1 href=/thoughts/dopplr_effects.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;“Oh, Kevin is going to be near me next week!  Hmm, either he is on an
exceptionally long pub crawl or he is about to sign a contract”&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I know that dopplr was cool though, it was powerful and it did squeeze a lot
more serendipity out of the world(I forget their actual tagline).  I couldn’t
imagine a better present for 2014 than to find a replacement that I could
actually use, but sadly I can’t even picture how it should work.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/dopplr_effects.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Your personal examples may vary&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;span id=backstory class=target&gt;&lt;/span&gt;&lt;/div&gt;
</summary></entry><entry><title>Tell me a nice story, please</title><link href="/thoughts/nice_stories.html" rel="alternate"></link><updated>2013-12-23T00:00:00Z</updated><id>/thoughts/nice_stories.html</id><summary type="html">&lt;div id=tell-me-a-nice-story-please class=section&gt;
&lt;h1&gt;Tell me a nice story, please&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#tell-me-a-nice-story-please class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I’m fed up of hearing bad stories, I really am.  Often it feels like every
person I know simply revels in the misfortune or missteps of others, and it is
beginning to truly annoy me.&lt;/p&gt;
&lt;p&gt;I can’t work out if it is the result of malicious envy, angry spitefulness or
just a sad realisation that those stories seem to engage others more easily.
That said I don’t believe the reason matters, it is wrong and it needs to stop.&lt;/p&gt;
&lt;blockquote class=epigraph&gt;
&lt;div&gt;&lt;p&gt;You cannot strengthen one by weakening another; and you cannot add to the
stature of a dwarf by cutting off the leg of a giant&lt;/p&gt;
&lt;p class=attribution&gt;—Benjamin Franklin Fairless&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div id=in-examples class=section&gt;
&lt;h2&gt;In examples&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#in-examples class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hmm, this is hard.  How does one express examples without explicitly re-telling
the nasty stories?&lt;/p&gt;
&lt;p&gt;The stories you are about to hear are true.  The scenes have been munged to
protect the innocent.&lt;/p&gt;
&lt;div id=exhibit-a class=section&gt;
&lt;h3&gt;Exhibit A&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#exhibit-a class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;About five years ago I found out that an old school friend had made a serious,
yet possibly singular, morally irresponsible mistake.  This is a man who was
close to the top of his chosen career tree, with a string of impressive
achievements to his name.&lt;/p&gt;
&lt;p&gt;The thing that bugged me about it, and to this day it is still does, is that I’d
never heard anyone remark on his successes prior to this.  I was &lt;em&gt;entirely&lt;/em&gt;
unaware of how his life had turned out prior to this story, and I was completely
unaware of any of the success he had made for himself.&lt;/p&gt;
&lt;p&gt;However, the moment there is a tale with the sprinkled essence of schadenfreude
it felt like you couldn’t go a week without being told about it.  People would
post about it on social-network-du-jour, drop it in to unrelated conversations
and literally stop you in the street to tell you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why couldn’t I have heard a fantastic story about an old friend’s success when
trying to feed my shocking biscuit habit at Sainsbury’s?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=exhibit-b class=section&gt;
&lt;h3&gt;Exhibit B&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#exhibit-b class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the mid-naughties a conference friend sold his web service for an apparently
healthy chunk of change.  I remember bumping in to the founding team at a boring
conference and listening to their happiness at the outcome.  They were looking
forward to working on the service itself more, and removing some of the
day-to-day woes of running the business on fumes.  All seemed good.&lt;/p&gt;
&lt;p&gt;That same day we, along with a bunch of ten or so others, headed off for lunch.
We got to hear some interesting war stories, and some fun tales of moments when
they were writing their “service suicide” notes.  The end of the lunch arrives,
and they decided to pick up the whole tab.  An absolutely unnecessary gesture
given that most, if not all, of us were expensed for the day anyway.  They did
it simply because they’re nice guys.&lt;/p&gt;
&lt;p&gt;As we started to break up and head back I noticed a few people were now telling
other stories.  Some had heard that the specific amount of money wasn’t worth
the grief, others expressed doubts the site would live on post acquisition, etc.&lt;/p&gt;
&lt;p&gt;I hadn’t realised initially, but this change in tone appeared to happen almost
the moment the founders left.  Friends who had found success, regaled us with
their stories and kindly paid for our semi-liquid lunch were suddenly being
beaten down for their apparent success.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why can’t people just find some happiness in the happiness of others?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=what-to-do class=section&gt;
&lt;h2&gt;What to do&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#what-to-do class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m not perfect, well not quite anyway ;)&lt;/p&gt;
&lt;p&gt;If I wasn’t so terribly, terribly ill today I’d be preparing to head to our
Winterval shutdown party.  You’d no doubt find I like to have a little gossip
and moan about things I shouldn’t, and I might even commit a couple of the faux
pas I’ve mentioned above.  Yes, that upsets me. It really does, but I’m trying
to change.&lt;/p&gt;
&lt;div id=a-pledge class=section&gt;
&lt;h3&gt;A pledge&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#a-pledge class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you catch me using the failure of others for entertainment or to make
a point, feel free to berate me for it.  It might even be time to start offering
fantastic prizes&lt;a id=id1 href=/thoughts/nice_stories.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt; to people who catch me doing so, as it is probably the only
way I’ll really learn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=what-i-want-to-hear class=section&gt;
&lt;h2&gt;What I want to hear&lt;a title="Permalink to this headline" href=/thoughts/nice_stories.html#what-i-want-to-hear class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Simply tell me about that friend who is getting married, don’t tell the story
by mentioning that it is their third marriage.  I also don’t need to hear about
that messy relationship breakdown.  [The exception — of course — being if it is
that one girl who I’d sell my soul for a second chance with]&lt;/p&gt;
&lt;p&gt;Tell me about that friend whose child aced the &lt;a href=http://en.wikipedia.org/wiki/Eleven_plus_exam class="reference external"&gt;Eleven Plus&lt;/a&gt;, and has been
accepted in to the school we all wish we had attended.&lt;/p&gt;
&lt;p&gt;Tell me about that old school friend who is building their own &lt;a href=http://www.channel4.com/programmes/grand-designs class="reference external"&gt;Grand
Designs&lt;/a&gt;-esque house.&lt;/p&gt;
&lt;p&gt;I guess there is one reason I want to hear the bad stories, and it is very
simple.  &lt;em&gt;Iff&lt;/em&gt; there is some actionable thing I can do to help, then I &lt;em&gt;want&lt;/em&gt; to
know about it.  If that isn’t the case, just keep it to yourself.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/nice_stories.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Okay, probably just a coffee or a beer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Side-projects</title><link href="/thoughts/side_projects.html" rel="alternate"></link><updated>2013-12-16T00:00:00Z</updated><id>/thoughts/side_projects.html</id><summary type="html">&lt;div id=side-projects class=section&gt;
&lt;h1&gt;Side-projects&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#side-projects class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Chatting with my brother yesterday he expressed some disbelief when I mentioned
&lt;em&gt;yet another&lt;/em&gt; friend who has a website related to some topic we were discussing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Does everyone you know run a website?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, yes, they do.&lt;/p&gt;
&lt;p&gt;It hadn’t really occurred to me until I was reading a write up of a co-workers
weekend hack.  The majority of nerdy people I know run websites, create
iPhone/android apps or have other side projects in various states of completion.
It’s just How Things Work®&lt;/p&gt;
&lt;p&gt;I guess it is mostly a cultural issue, one which is quite strong behind the
engineering side of the curtain in my workplace.  Sure, there are some “5:01”
types who are out of the door as soon as the bell rings, but there are an awful
lot who extend their tech creations in to a downtime hobby or side business.&lt;/p&gt;
&lt;p&gt;To relate this to my brother I think of a family party we attended this past
weekend.  When people asked me what my brother does I proudly say he works in
logistics, and I like to tell people how well he’s done for himself.  When
talking to the extended family that often seemed to end up being about material
possessions or such.  However, I’ve noticed in the past when I’m talking to
people I’d call friends it often quickly digresses in to strange discussions
about box packing, routing, &lt;a href=http://en.wikipedia.org/wiki/Travelling_salesman_problem class="reference external"&gt;the curse of travelling salesmen&lt;/a&gt; or &lt;a href=http://en.wikipedia.org/wiki/Bridges_of_Konigsberg class="reference external"&gt;bridges in
some foreign land&lt;/a&gt;.  Because of the math and technology implications many of
my friends have written tools to explore some of the practical and theoretical
issues faced in logistics… for fun.&lt;/p&gt;
&lt;div id=it-is-all-about-me class=section&gt;
&lt;h2&gt;It is all about me&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#it-is-all-about-me class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m not working on any public facing websites right now&lt;a id=id1 href=/thoughts/side_projects.html#s1 class="footnote-reference brackets"&gt;1&lt;/a&gt;, but I do play
with a few public facing projects from time to time that should head towards
proving my point.  I’m picking a few semi-randomly to illustrate a little
diversity.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;To save myself some researching effort I’ll only link to things from &lt;a href=https://github.com/JNRowe/ class="reference external"&gt;my
GitHub profile&lt;/a&gt; or links from my browser’s bookmarks, but that should be
descriptive enough to get the point across.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=gentoo class=section&gt;
&lt;h3&gt;Gentoo&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#gentoo class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the past decade I’ve spent a lot of time hacking on things related to
&lt;a href=http://gentoo.org/ class="reference external"&gt;Gentoo&lt;/a&gt;.  Some of that for work projects and some of it for &lt;a href=https://jnrowe-misc.rtfd.org/ class="reference external"&gt;personal
projects&lt;/a&gt;.  I’ve also experienced my fair share of troubles, and have &lt;a href="https://bugs.gentoo.org/buglist.cgi?email1=jnrowe%40gmail.com&amp;amp;emailassigned_to1=1&amp;amp;emailcc1=1&amp;amp;emaillongdesc1=1&amp;amp;emailreporter1=1&amp;amp;emailtype1=substring&amp;amp;query_format=advanced" class="reference external"&gt;reported
a few bugs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At one time I even hoped to &lt;a href="https://bugs.gentoo.org/show_bug.cgi?id=142090" class="reference external"&gt;become a developer&lt;/a&gt;, but that didn’t work out for
a bunch of reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=github2 class=section&gt;
&lt;h3&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;github2&lt;/span&gt;&lt;/code&gt;&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#github2 class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For a year I &lt;a href=https://github.com/ask/python-github2/graphs/contributors class="reference external"&gt;maintained&lt;/a&gt; a relatively popular &lt;a href=https://github.com/ask/python-github2 class="reference external"&gt;API wrapper&lt;/a&gt; to GitHub.  I did
this because I found it fun.  It provided no economic benefit to me, and I never
expected it to.  I know a lot of people used it when building their own toy
projects and websites, because many were kind enough to link to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=pyisbn class=section&gt;
&lt;h3&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;pyisbn&lt;/span&gt;&lt;/code&gt;&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#pyisbn class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For seven years I’ve maintained a small library for &lt;a href=https://github.com/JNRowe/pyisbn/ class="reference external"&gt;validating ISBNs&lt;/a&gt;.
&lt;em&gt;Yes, that is absolutely as boring as it sounds&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was never meant to be used by others, I just needed something to validate
entries in my e-book database.  Other people started using it, many for their
own weird side projects including a number of book retail websites.  It has
amassed literally tens of thousands of downloads from &lt;abbr title="Python Package Index"&gt;PyPI&lt;/abbr&gt;, but you really
shouldn’t trust the dubious statistics from &lt;abbr title="Python Package Index"&gt;PyPI&lt;/abbr&gt; ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=rdial class=section&gt;
&lt;h3&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rdial&lt;/span&gt;&lt;/code&gt;&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#rdial class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=http://rdial.rtfd.org/ class="reference external"&gt;rdial&lt;/a&gt; is a time tracking tool, and a perfect example for me.  I played with it
for over a year before anyone else saw it, just because it scratched an itch
I had.  I never imagined it would be useful to others.  Turns out it was, and
there is now a small yet faithful band of users.&lt;/p&gt;
&lt;p&gt;I even received the great honour of a few summer evening beers for releasing it.
A beer being second only to a patch in the table of project endorsements
that I subscribe to.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=upoints class=section&gt;
&lt;h3&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;upoints&lt;/span&gt;&lt;/code&gt;&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#upoints class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=https://jnrowe.github.io/upoints/ class="reference external"&gt;upoints&lt;/a&gt; is a strange one.  It started as a &lt;a href=http://jnrowe.github.io/upoints/geolocation_and_pathcross.html class="reference external"&gt;stupid hack&lt;/a&gt; to figure out some
silly travel planning drama, it proceeded to take on a life of its own.  Over
the years it attracted a fair amount of users, and I still receive email about
it now.&lt;/p&gt;
&lt;p&gt;It did have some tangible benefit though, the sadly now defunct website it
eventually spawned opened some nice doors for me.  I didn’t know it would or
could at the time, so it didn’t affect how I spent my time when playing with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=cut-from-the-pattern class=section&gt;
&lt;h2&gt;Cut from the pattern&lt;a title="Permalink to this headline" href=/thoughts/side_projects.html#cut-from-the-pattern class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This isn’t specific to me, or even to the particularly nerdy among my
co-workers.  If you &lt;a href=https://github.com/explore class="reference external"&gt;dig around on GitHub&lt;/a&gt;, or even &lt;a href=http://makezine.com/ class="reference external"&gt;makezine&lt;/a&gt;, you’ll see
people creating purely because they can.  This isn’t a new phenomenon either.
If you were around pre-GitHub you’d see people making things on Sourceforge.  If
you were around before Sourceforge, you’ll remember the good old days when life
was simpler and people held doors open for you.&lt;/p&gt;
&lt;p&gt;The point is simple.  Yes, I &lt;em&gt;may&lt;/em&gt; know someone who is working on
project/website related to some topic, but that is only because many of the
people I know are spitting out new projects on what often appears to be a weekly
basis.&lt;/p&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=s1 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/thoughts/side_projects.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I really don’t count &lt;a href=http://jnrowe.github.io/ class="reference external"&gt;this site&lt;/a&gt;, as it
is just a jumbled content dump with no real purpose.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>&lt;abbr title="Test Driven Development"&gt;TDD&lt;/abbr&gt; distro development</title><link href="/articles/tdd_distros.html" rel="alternate"></link><updated>2011-06-13T00:00:00Z</updated><id>/articles/tdd_distros.html</id><summary type="html">&lt;div id=tdd-distro-development class=section&gt;
&lt;h1&gt;&lt;abbr title="Test Driven Development"&gt;TDD&lt;/abbr&gt; distro development&lt;a title="Permalink to this headline" href=/articles/tdd_distros.html#tdd-distro-development class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Using &lt;abbr title="Test Driven Development"&gt;TDD&lt;/abbr&gt; for distribution development is a hot topic in some of the more
geeky circles I move in, and I’m very happy about this.  Anything that
increases the robustness of my desktop computer, my phone or any other device
I use is a great goal!&lt;/p&gt;
&lt;div id=why class=section&gt;
&lt;h2&gt;Why?&lt;a title="Permalink to this headline" href=/articles/tdd_distros.html#why class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This answer should be obvious; more testing is good.  However, what about the
current system needs improving?&lt;/p&gt;
&lt;p&gt;The first point is that commonly deployed distributions base their stabilisation
processes on the lack of &lt;em&gt;reported&lt;/em&gt; bugs.  This implies that packages with a
minimal set of tests(or human testers in the common case) go through much less
testing than popular packages on their way to be marked as stable.  Of course,
this also implies that bugs in popular packages that will affect many users are
often discovered before a package is stabilised.&lt;/p&gt;
&lt;p&gt;The second point is that a small set of bugs are actually regressions of
previously fixed bugs.  This, by itself, is a reason to look at alternatives.
Fixing the same bug more than once is an horrendous waste of developer
resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=how class=section&gt;
&lt;h2&gt;How?&lt;a title="Permalink to this headline" href=/articles/tdd_distros.html#how class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We, the fine folks of AST’s London office, already use a test-based
stabilisation policy in the preparation of our distribution images.  Adding
tests for new and bumped packages is something Leal Hétu and I have been
enforcing for the past few years.&lt;/p&gt;
&lt;p&gt;Our packages and distribution images are used for the embedded devices we sell,
the desktops we develop on and the laptops we play on.  The methods we use vary
greatly, so I’m going to present the simple case of testing console applications
only.  It is the practise that is important, not the process.&lt;/p&gt;
&lt;p&gt;The easiest method we use is via &lt;a href=https://pypi.python.org/pypi/shelldoctest class="reference external"&gt;shelldoctest&lt;/a&gt;, a module that implements
a &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/doctest.html#module-doctest class="reference external"&gt;&lt;code class="xref py py-mod docutils literal"&gt;&lt;span class=pre&gt;doctest&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; interface for testing shell commands.  The package provides
a user-level script for running shell sessions in Python docstrings.  A simple
example could be:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;span class=sd&gt;$ echo test&lt;/span&gt;
&lt;span class=sd&gt;test&lt;/span&gt;
&lt;span class=sd&gt;$ echo fail&lt;/span&gt;
&lt;span class=sd&gt;liaf&lt;/span&gt;
&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Running the previous file with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;shell-doctest&lt;/span&gt; &lt;span class=pre&gt;test&lt;/span&gt; &lt;span class=pre&gt;testdoc.py&lt;/span&gt;&lt;/code&gt; produces the
following output:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=go&gt;**********************************************************************&lt;/span&gt;
&lt;span class=go&gt;File "testdoc.py", line 4, in testdoc&lt;/span&gt;
&lt;span class=go&gt;Failed example:&lt;/span&gt;
&lt;span class=go&gt;    echo fail&lt;/span&gt;
&lt;span class=go&gt;Expected:&lt;/span&gt;
&lt;span class=go&gt;    liaf&lt;/span&gt;
&lt;span class=go&gt;Got:&lt;/span&gt;
&lt;span class=go&gt;    fail&lt;/span&gt;
&lt;span class=go&gt;**********************************************************************&lt;/span&gt;
&lt;span class=go&gt;1 items had failures:&lt;/span&gt;
&lt;span class=go&gt;   1 of   2 in testdoc&lt;/span&gt;
&lt;span class=go&gt;***Test Failed*** 1 failures.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each time we bump a package, or add a completely new package, we also commit a
file containing a minimal series of tests that we consider important for the
package.  This allows us to almost instantly ascertain whether a future package
bump breaks functionality we require.&lt;/p&gt;
&lt;p&gt;We also add a test &lt;em&gt;every single time&lt;/em&gt; we fix a packaging bug, to make sure it
doesn’t come up again.  A good example can be gleaned from a bug that was fixed
in our &lt;a href="http://www.vim.org/scripts/script.php?script_id=1567" class="reference external"&gt;rails&lt;/a&gt; vim package.  Given the way the &lt;a href="http://www.vim.org/scripts/script.php?script_id=1567" class="reference external"&gt;vim scripts site&lt;/a&gt; is organised
the files you want to download have awful download locations, so our ebuild for
the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/code&gt; plugin contains the following snippet:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nv&gt;DESCRIPTION&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"vim plugin: RoR - easy file navigation, enhanced syntax highlighting"&lt;/span&gt;
&lt;span class=nv&gt;HOMEPAGE&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"http://www.vim.org/scripts/script.php?script_id=1567"&lt;/span&gt;
&lt;span class=nv&gt;SRC_URI&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"http://www.vim.org/scripts/download_script.php?src_id=13800 -&amp;gt; &lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;P&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;.zip"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;SRC_URI&lt;/span&gt;&lt;/code&gt; declaration says we need to fetch the file from
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;http://www.vim.org/scripts/download_script.php?src_id=13800&lt;/span&gt;&lt;/code&gt; and name it
locally as &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;rails-4.3.zip&lt;/span&gt;&lt;/code&gt;.  I’m sure you can guess what happened here,
someone saved a copy of the file locally for testing and forgot to update the
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;src_id&lt;/span&gt;&lt;/code&gt; parameter correctly&lt;a id=id1 href=/articles/tdd_distros.html#id2 class="footnote-reference brackets"&gt;1&lt;/a&gt;.  The result was an apparently new build
that installed an older package release.&lt;/p&gt;
&lt;p&gt;When a fix for this bug was committed a test similar to the following snippet
was added to the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/code&gt; test suite:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;span class=sd&gt;$ grep -l "autoloaded_rails = '${PV}'" /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=sd&gt;/usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=sd&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All this does is check the reported version is correct, and it clearly only took
a few seconds to write.  This is important, it shouldn’t cost a lot to write a
test and this is especially true for the simplest task.&lt;/p&gt;
&lt;p&gt;I use a similar technique for managing my public Gentoo overlay, &lt;a href=https://github.com/JNRowe/jnrowe-misc class="reference external"&gt;jnrowe-misc&lt;/a&gt;.
For example, the &lt;a href=https://pypi.python.org/pypi/blockdiag class="reference external"&gt;blockdiag&lt;/a&gt; ebuild is accompanied by a series of tests
that are run when bumping or stabilising the package, all of which are cribbed
from my actual &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;blockdiag&lt;/span&gt;&lt;/code&gt; usage.  This massively reduces the time required
to evaluate a package at bump time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=result class=section&gt;
&lt;h2&gt;Result?&lt;a title="Permalink to this headline" href=/articles/tdd_distros.html#result class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The time it takes to stabilise, or bump, a package may be massively reduced
while simultaneously increasing the robustness of the packages.  This is a huge
win, much bigger than we initially envisaged.&lt;/p&gt;
&lt;p&gt;We still use time-based stabilisation, but in union with test-based
stabilisation.  It means that on the time-based stabilisation date we can
conveniently script the progression to stable including a final run of the test
suite.&lt;/p&gt;
&lt;p&gt;I would, of course, prefer to see &lt;em&gt;any&lt;/em&gt; tests upstreamed and where possible this
is already happening.  However, we’re pragmatists and this means we often use
existing content as input for tests.  The use of existing input makes writing
the test faster and means each test exercises functionality we actually require,
but it also means we occasionally can’t submit the data upstream owing to
licensing concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=bonus class=section&gt;
&lt;h2&gt;Bonus&lt;a title="Permalink to this headline" href=/articles/tdd_distros.html#bonus class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve used the upstream supported &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/code&gt; method for writing tests on
this page, but you can also easily specify them in &lt;a href=http://docutils.sourceforge.net/docs/user/rst/ class="reference external"&gt;reST syntax&lt;/a&gt; files too.
Doing this encourages you to write nicely formatted documentation to accompany
your tests.  You can also leverage your tests that are written in this way as
documentation using the excellent &lt;a href=http://sphinx-doc.org/ class="reference external"&gt;Sphinx&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;The following script shows an extremely basic, yet fully functional, example of
how to combine the &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/doctest.html#module-doctest class="reference external"&gt;&lt;code class="xref py py-mod docutils literal"&gt;&lt;span class=pre&gt;doctest&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module’s &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/doctest.html#doctest.testfile class="reference external"&gt;&lt;code class="xref py py-func docutils literal"&gt;&lt;span class=pre&gt;testfile()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function
with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=ch&gt;#! /usr/bin/python -tt&lt;/span&gt;
&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;doctest&lt;/span&gt;
&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;sys&lt;/span&gt;

&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;shelldoctest&lt;/span&gt; &lt;span class=kn&gt;as&lt;/span&gt; &lt;span class=nn&gt;sd&lt;/span&gt;

&lt;span class=n&gt;sys&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;exit&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;doctest&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;testfile&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;sys&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;],&lt;/span&gt; &lt;span class=n&gt;module_relative&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=bp&gt;False&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
                          &lt;span class=n&gt;extraglobs&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=p&gt;{&lt;/span&gt;&lt;span class=s2&gt;"system_command"&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;sd&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;system_command&lt;/span&gt;&lt;span class=p&gt;},&lt;/span&gt;
                          &lt;span class=n&gt;parser&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=n&gt;sd&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;ShellDocTestParser&lt;/span&gt;&lt;span class=p&gt;())[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=p&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This script parses the first argument on the command line when it is run and
executes any &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;shelldoctest&lt;/span&gt;&lt;/code&gt; blocks it finds.  It returns the count of failed
tests as its exit code, helpfully allowing you to execute a command with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;
if all the tests pass.&lt;/p&gt;
&lt;p&gt;We operate this way at AST, the above &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rails&lt;/span&gt;&lt;/code&gt; test would actually be part of
a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;reST&lt;/span&gt;&lt;/code&gt; formatted file as follows:&lt;/p&gt;
&lt;div class=highlight-rst&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Fix bug #xx, incorrect archive file&lt;span class=se&gt;::&lt;/span&gt;

&lt;span class=s&gt;    $ grep -l "autoloaded_rails = '${PV}'" /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;span class=s&gt;    /usr/share/vim/vimfiles/autoload/rails.vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=rubric&gt;Footnotes&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt id=id2 class=label&gt;&lt;span class=brackets&gt;&lt;a href=/articles/tdd_distros.html#id1 class=fn-backref&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Okay, it was me.  I’ll confess.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Populating &lt;strong class="command"&gt;sup&lt;/strong&gt; contacts from abook</title><link href="/articles/tips/Populating_sup_contacts_from_abook.html" rel="alternate"></link><updated>2010-03-23T00:00:00Z</updated><id>/articles/tips/Populating_sup_contacts_from_abook.html</id><summary type="html">&lt;div id=populating-sup-contacts-from-abook class=section&gt;
&lt;h1&gt;Populating &lt;strong class=command&gt;sup&lt;/strong&gt; contacts from abook&lt;a title="Permalink to this headline" href=/articles/tips/Populating_sup_contacts_from_abook.html#populating-sup-contacts-from-abook class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A colleague from work, Adam Robertson, is switching to &lt;a href=http://sup.rubyforge.org/ class="reference external"&gt;Sup&lt;/a&gt; from &lt;a href=http://www.mutt.org/ class="reference external"&gt;mutt&lt;/a&gt; and
wondering how to easily convert his contacts from &lt;a href=http://abook.sourceforge.net/ class="reference external"&gt;abook&lt;/a&gt;.  Given that it is my
constant pimping of &lt;strong class=command&gt;sup&lt;/strong&gt; that has convinced him to switch I feel
obliged to help with the conversion.&lt;/p&gt;
&lt;p&gt;The first choice I may recommend is just to follow the &lt;a href=http://sup.rubyforge.org/wiki/wiki.pl?LbdbIntegration class="reference external"&gt;wiki&lt;/a&gt; and use
&lt;strong class=command&gt;abook&lt;/strong&gt; as a source for &lt;a href=http://www.spinnaker.de/lbdb/ class="reference external"&gt;lbdb&lt;/a&gt;.  I use a method similar to this quite
successfully.&lt;/p&gt;
&lt;p&gt;The second choice is to prime the contact list from &lt;strong class=command&gt;abook&lt;/strong&gt; with
a little &lt;a href=http://www.python.org/ class="reference external"&gt;Python&lt;/a&gt; script.  The &lt;strong class=command&gt;sup&lt;/strong&gt; contacts list uses a &lt;a href=http://sup.rubyforge.org/wiki/wiki.pl?ContactsList class="reference external"&gt;very simple
format&lt;/a&gt; and mangling the &lt;strong class=command&gt;abook&lt;/strong&gt; addressbook is possible in only
a few lines of code:&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=ch&gt;#! /usr/bin/python3 -tt&lt;/span&gt;
&lt;span class=sd&gt;"""Generate a sup contacts list from abook"""&lt;/span&gt;

&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;os&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;path&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;sys&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nb&gt;exit&lt;/span&gt;

&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;configobj&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;ConfigObj&lt;/span&gt;

&lt;span class=k&gt;def&lt;/span&gt; &lt;span class=nf&gt;parse&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;fname&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=bp&gt;None&lt;/span&gt;&lt;span class=p&gt;):&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=ow&gt;not&lt;/span&gt; &lt;span class=n&gt;fname&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
        &lt;span class=n&gt;fname&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;path&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;expanduser&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'~/.abook/addressbook'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=n&gt;conf&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;ConfigObj&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;fname&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;list_values&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=bp&gt;False&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=k&gt;for&lt;/span&gt; &lt;span class=n&gt;chunk&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=nb&gt;filter&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=k&gt;lambda&lt;/span&gt; &lt;span class=n&gt;d&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=s1&gt;'nick'&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;d&lt;/span&gt; &lt;span class=ow&gt;and&lt;/span&gt; &lt;span class=s1&gt;'email'&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;d&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;conf&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;values&lt;/span&gt;&lt;span class=p&gt;()):&lt;/span&gt;
        &lt;span class=k&gt;print&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'{0[nick]}: {0[name]}'&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;format&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;chunk&lt;/span&gt;&lt;span class=p&gt;),&lt;/span&gt;
              &lt;span class=s1&gt;'&amp;lt;{}&amp;gt;'&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;format&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;chunk&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=s1&gt;'email'&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;split&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;','&lt;/span&gt;&lt;span class=p&gt;)[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=p&gt;]))&lt;/span&gt;

&lt;span class=k&gt;if&lt;/span&gt; &lt;span class=vm&gt;__name__&lt;/span&gt; &lt;span class=o&gt;==&lt;/span&gt; &lt;span class=s1&gt;'__main__'&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=nb&gt;len&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=o&gt;&amp;gt;&lt;/span&gt; &lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
        &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'-h'&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'--help'&lt;/span&gt;&lt;span class=p&gt;):&lt;/span&gt;
            &lt;span class=k&gt;print&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'{} [addressbook]'&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;format&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=p&gt;]))&lt;/span&gt;
            &lt;span class=nb&gt;exit&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=mi&gt;255&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
        &lt;span class=n&gt;addressbook&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;argv&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt;
    &lt;span class=k&gt;else&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
        &lt;span class=n&gt;addressbook&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=bp&gt;None&lt;/span&gt;
    &lt;span class=n&gt;parse&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;addressbook&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/340873 class="reference external"&gt;gist #340873&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The script requires the excellent &lt;a href=http://www.voidspace.org.uk/python/configobj.html class="reference external"&gt;configobj&lt;/a&gt; module.  You could also use the
&lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/configparser.html#module-configparser class="reference external"&gt;&lt;code class="xref py py-mod docutils literal"&gt;&lt;span class=pre&gt;configparser&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module from the Python standard library, but &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;configobj&lt;/span&gt;&lt;/code&gt;
allows my laziness to shine through with its simple dictionary-based access to
the parsed data.&lt;/p&gt;
&lt;p&gt;The script opens either the named or default &lt;strong class=command&gt;abook&lt;/strong&gt; addressbook and
fetches any entries that contain both a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;nick&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;email&lt;/span&gt;&lt;/code&gt; section.  Those
entries are then output in format that &lt;strong class=command&gt;sup&lt;/strong&gt; accepts.  It includes
only the primary email address for the contact, as I tend to order contacts
with multiple email addresses in address preference order.&lt;/p&gt;
&lt;p&gt;As I’ve mentioned before in &lt;a href=/articles/tips/Making_a_nice_home.html class="reference internal"&gt;&lt;span class=doc&gt;Making a nice home&lt;/span&gt;&lt;/a&gt; all these tasks should be
automated, and this one is no different.  To regenerate the contacts list when
the addressbook has been updated we can use &lt;a href=http://www.gnu.org/software/make/make.html class="reference external"&gt;make&lt;/a&gt;:&lt;/p&gt;
&lt;div class=highlight-make&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nf&gt;.sup/contacts.txt&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; .&lt;span class=n&gt;abook&lt;/span&gt;/&lt;span class=n&gt;addressbook&lt;/span&gt;
    python3 sup_contacts.py $&amp;lt; &amp;gt;&lt;span class=nv&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/340875 class="reference external"&gt;gist #340875&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using this method allows us to continue using &lt;strong class=command&gt;abook&lt;/strong&gt; while having
simple access to our contacts from within &lt;strong class=command&gt;sup&lt;/strong&gt;.  This is incredibly
useful as it means we can continue to use &lt;strong class=command&gt;abook&lt;/strong&gt; for other things
too, see &lt;a href=/articles/tips/Kick_me_birthday_reminders.html class="reference internal"&gt;&lt;span class=doc&gt;“Kick me” birthday reminders&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Debugging Python &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;</title><link href="/articles/tips/Debugging_python_regexps.html" rel="alternate"></link><updated>2009-10-29T00:00:00Z</updated><id>/articles/tips/Debugging_python_regexps.html</id><summary type="html">&lt;div id=debugging-python-regex class=section&gt;
&lt;h1&gt;Debugging Python &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;&lt;a title="Permalink to this headline" href=/articles/tips/Debugging_python_regexps.html#debugging-python-regex class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rob Sampson is learning &lt;a href=http://www.python.org/ class="reference external"&gt;Python&lt;/a&gt; and struggling to get to grips with its
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; handling.  He asks on one of our internal lists at the office:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I’ve written what I believe to be a valid &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; to perform matches on
some data, and I can’t figure out why it isn’t matching on my input.
Any clues about where to look?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The answer to these types of questions is more often than not one of two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Failure to use &lt;a href=http://docs.python.org/tutorial/introduction.html#strings class="reference external"&gt;raw strings&lt;/a&gt; when including backslashes in the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choosing to use a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; when a better tool for the job exists&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=raw-strings class=section&gt;
&lt;h2&gt;Raw strings&lt;a title="Permalink to this headline" href=/articles/tips/Debugging_python_regexps.html#raw-strings class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Rob’s code he had failed to take in to account the backslash escaping
problem.  A simplified example of what he was trying to do would be:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=nn&gt;re&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;findall&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;' ([0-9]+&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;[a-z]+) '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'make 123\match '&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;[]&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=c1&gt;# Whereas with raw strings this match will work&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;findall&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=sa&gt;r&lt;/span&gt;&lt;span class=s1&gt;' ([0-9]+&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;[a-z]+) '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'make 123\match '&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;['123\\match']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198015 class="reference external"&gt;gist #198015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Without the raw string, specified by the preceding &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;r&lt;/span&gt;&lt;/code&gt; in our pattern, the
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; parser is actually looking for a literal &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;[&lt;/span&gt;&lt;/code&gt; where we’ve intended
to use the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;[&lt;/span&gt;&lt;/code&gt; as the start of a character set.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;There is another important point here too as the example above uses
character ranges, just as Rob’s original did.  As in most &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; engines
Python has inbuilt support for certain character classes, and they are
often more functional than the simple character ranges.  The big win with
Python’s character classes is that they can be locale and/or Unicode
aware by specifying the &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/re.html#re.LOCALE class="reference external"&gt;&lt;code class="xref py py-data docutils literal"&gt;&lt;span class=pre&gt;re.LOCALE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;code class="xref py py-data docutils literal"&gt;&lt;span class=pre&gt;re.UNICODE&lt;/span&gt;&lt;/code&gt; flags.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These types of string escaping problems are common, and as your &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;
becomes more complex their likelihood increases greatly.  Python, as is often
the case, has the answer and it comes in the shape of the &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/re.html#re.DEBUG class="reference external"&gt;&lt;code class="xref py py-data docutils literal"&gt;&lt;span class=pre&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
flag.  The &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/re.html#re.DEBUG class="reference external"&gt;&lt;code class="xref py py-data docutils literal"&gt;&lt;span class=pre&gt;re.DEBUG&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; flag displays a parse tree allowing you to easily
inspect the &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; you have constructed:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;findall&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;' ([0-9]+&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;[a-z]+) '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'make 123\match '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;DEBUG&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;literal 32&lt;/span&gt;
&lt;span class=go&gt;subpattern 1&lt;/span&gt;
&lt;span class=go&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class=go&gt;    in&lt;/span&gt;
&lt;span class=go&gt;    range (48, 57)&lt;/span&gt;
&lt;span class=go&gt;literal 91&lt;/span&gt;
&lt;span class=go&gt;literal 97&lt;/span&gt;
&lt;span class=go&gt;literal 45&lt;/span&gt;
&lt;span class=go&gt;literal 122&lt;/span&gt;
&lt;span class=go&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class=go&gt;    literal 93&lt;/span&gt;
&lt;span class=go&gt;literal 32&lt;/span&gt;
&lt;span class=go&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/223892 class="reference external"&gt;gist #223892&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we can see that our expression matches &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;range&lt;/span&gt; &lt;span class=pre&gt;(48,&lt;/span&gt; &lt;span class=pre&gt;57)&lt;/span&gt;&lt;/code&gt;, 48 and 57 being
the &lt;a href=http://docs.python.org/library/functions.html class="reference external"&gt;ordinal&lt;/a&gt; for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;0&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;9&lt;/span&gt;&lt;/code&gt; respectively.  Following that we see a match
for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;literal&lt;/span&gt; &lt;span class=pre&gt;91&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;chr(91)&lt;/span&gt;&lt;/code&gt; shows us that the character we are matching is
a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;[&lt;/span&gt;&lt;/code&gt;.  With this information it is easy to see where the problem is.&lt;/p&gt;
&lt;p&gt;If you need to use more than one flag, such as often useful &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/re.html#re.VERBOSE class="reference external"&gt;&lt;code class="xref py py-data docutils literal"&gt;&lt;span class=pre&gt;re.VERBOSE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
flag, you can combine them with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;|&lt;/span&gt;&lt;/code&gt; (bitwise OR) as the flags are just named
constants(&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;DEBUG&lt;/span&gt;&lt;/code&gt; is 128 for example).&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;findall&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=sa&gt;r&lt;/span&gt;&lt;span class=s1&gt;' (\d+&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;\w+) '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'make 123\match '&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;DEBUG&lt;/span&gt;&lt;span class=o&gt;|&lt;/span&gt;&lt;span class=n&gt;re&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;LOCALE&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;literal 32&lt;/span&gt;
&lt;span class=go&gt;subpattern 1&lt;/span&gt;
&lt;span class=go&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class=go&gt;    in&lt;/span&gt;
&lt;span class=go&gt;    category category_digit&lt;/span&gt;
&lt;span class=go&gt;literal 92&lt;/span&gt;
&lt;span class=go&gt;max_repeat 1 65535&lt;/span&gt;
&lt;span class=go&gt;    in&lt;/span&gt;
&lt;span class=go&gt;    category category_word&lt;/span&gt;
&lt;span class=go&gt;literal 32&lt;/span&gt;
&lt;span class=go&gt;['123\\match']&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/223893 class="reference external"&gt;gist #223893&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=better-tools class=section&gt;
&lt;h2&gt;Better tools&lt;a title="Permalink to this headline" href=/articles/tips/Debugging_python_regexps.html#better-tools class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Often, a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; is the hammer of choice for far too many tasks for far too
many people(myself included).  There are often much better choices, some of
which are very domain specific and some quite general.&lt;/p&gt;
&lt;p&gt;For any moderately complex parsing job &lt;a href=http://pyparsing.wikispaces.com/ class="reference external"&gt;pyparsing&lt;/a&gt; is a great choice.  The
syntax is quite readable and the parser is very fast.  Just make sure you
ignore any examples telling you to use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;from&lt;/span&gt; &lt;span class=pre&gt;pyparsing&lt;/span&gt; &lt;span class=pre&gt;import&lt;/span&gt; &lt;span class=pre&gt;*&lt;/span&gt;&lt;/code&gt; as you’ll
evoke great rage in every person who reads your code.&lt;/p&gt;
&lt;p&gt;While &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;pyparsing&lt;/span&gt;&lt;/code&gt; is a good general parsing tool it would be overkill for
the task at hand, but it doesn’t hurt to show a simple example of
constructing a parser:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;pyparsing&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;Literal&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;White&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;Word&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;alphas&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;nums&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;matcher&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;Word&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;alphas&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=o&gt;+&lt;/span&gt; &lt;span class=n&gt;Word&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;nums&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=o&gt;+&lt;/span&gt; &lt;span class=n&gt;Literal&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=o&gt;+&lt;/span&gt; &lt;span class=n&gt;Word&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;alphas&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=o&gt;+&lt;/span&gt; &lt;span class=n&gt;White&lt;/span&gt;&lt;span class=p&gt;()&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;matcher&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;parseString&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'make 123&lt;/span&gt;&lt;span class=se&gt;\\&lt;/span&gt;&lt;span class=s1&gt;match '&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;(['make', '123', '\\', 'match', ' '], {})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/223894 class="reference external"&gt;gist #223894&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another exceptional tool for tasks that people often abuse &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; for is
&lt;a href=http://labix.org/python-dateutil class="reference external"&gt;python-dateutil&lt;/a&gt;.  One of the reasons I occasionally turn to this module is
that Python’s &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/time.html#time.strptime class="reference external"&gt;&lt;code class="xref py py-func docutils literal"&gt;&lt;span class=pre&gt;time.strptime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; isn’t even capable of parsing timestamps
created by &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/time.html#time.strftime class="reference external"&gt;&lt;code class="xref py py-func docutils literal"&gt;&lt;span class=pre&gt;time.strftime()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for example if you use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;%z&lt;/span&gt;&lt;/code&gt; in the
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;strftime&lt;/span&gt;&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;All too often you see people trying to solve date parsing problems with
&lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; and heaps of &lt;code class="xref py py-func docutils literal"&gt;&lt;span class=pre&gt;int()&lt;/span&gt;&lt;/code&gt; calls to mangle the matches.  Not only is this
a very brittle approach, but the &lt;a href=http://labix.org/ class="reference external"&gt;labix&lt;/a&gt; guys have solved this problem for you
already:&lt;/p&gt;
&lt;div class=highlight-pycon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;dateutil&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;parser&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;s&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s1&gt;'2009 10 30 23:35:16+0400'&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=n&gt;parser&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;parse&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;s&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=go&gt;datetime.datetime(2009, 10, 30, 23, 35, 16, tzinfo=tzoffset(None, 14400))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/223895 class="reference external"&gt;gist #223895&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;If you use &lt;a href=http://labix.org/python-dateutil class="reference external"&gt;python-dateutil&lt;/a&gt; do be aware that by default it will prefer US
mid-endian date formats when guessing for some patterns.  Either create your
own &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;parserinfo&lt;/span&gt;&lt;/code&gt; object and set &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;dayfirst&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;True&lt;/span&gt;&lt;/code&gt;, or use something
stricter.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In closing before you start parsing any text — regardless of how simple it is
— you should thumb through the &lt;a href=http://docs.python.org/library/ class="reference external"&gt;standard library&lt;/a&gt; and perform a search on
&lt;a href=http://pypi.python.org/pypi class="reference external"&gt;pypi&lt;/a&gt;.  Often, the work has already been done for you and may well be much
better than the hurried version you were about to cobble together with
a &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Zsh and the &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt;</title><link href="/articles/tips/Zsh_and_the_vcs.html" rel="alternate"></link><updated>2009-10-28T00:00:00Z</updated><id>/articles/tips/Zsh_and_the_vcs.html</id><summary type="html">&lt;div id=zsh-and-the-vcs class=section&gt;
&lt;h1&gt;Zsh and the &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt;&lt;a title="Permalink to this headline" href=/articles/tips/Zsh_and_the_vcs.html#zsh-and-the-vcs class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;img src=/_images/2009-10-28-git_prompt.png class=align-right alt="Git prompt screenshot"&gt;
&lt;p&gt;I’ve recently switched to &lt;a href=http://www.zsh.org/ class="reference external"&gt;Zsh&lt;/a&gt; as my login shell after
9 years of using &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt;, and for no particularly good reason either as they’re
both great interactive shells.  I guess all the &lt;em&gt;Kool Kids&lt;/em&gt; are doing it, and
I’m just playing catchup.  The one side effect of that is I’m now scribbling
tips about &lt;strong class=command&gt;zsh&lt;/strong&gt; too…&lt;/p&gt;
&lt;p&gt;In a screenshot I posted in our bugtracker — that was considerably less staged
than the example above — one of my more visual hunks of &lt;strong class=command&gt;zsh&lt;/strong&gt;
configuration was visible, leading to the following question from Dan Wilson:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Okay, ‘fess time.  How do you get &lt;strong class=command&gt;git&lt;/strong&gt; branch names in the
prompt?  How do you make the funky arrows show repo status?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Firstly, I use &lt;a href=http://github.com/robbyrussell/oh-my-zsh class="reference external"&gt;oh-my-zsh&lt;/a&gt; which is an excellent basis for &lt;strong class=command&gt;zsh&lt;/strong&gt;
configuration files.  My prompt settings work within that framework, although
they could be converted to work with &lt;em&gt;plain&lt;/em&gt; &lt;strong class=command&gt;zsh&lt;/strong&gt; if you have the
inclination.&lt;/p&gt;
&lt;p&gt;If you want to see my entire “theme” file you can &lt;a href=http://github.com/JNRowe/oh-my-zsh class="reference external"&gt;clone my fork&lt;/a&gt; and look at
&lt;a href=http://github.com/JNRowe/oh-my-zsh/blob/master/themes/jnrowe.zsh-theme class="reference external"&gt;oh-my-zsh/themes/jnrowe.zsh-theme&lt;/a&gt;.&lt;/p&gt;
&lt;div id=branch-names class=section&gt;
&lt;h2&gt;Branch names&lt;a title="Permalink to this headline" href=/articles/tips/Zsh_and_the_vcs.html#branch-names class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong class=command&gt;zsh&lt;/strong&gt; comes with some neat &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; integration, that is exceptionally
&lt;a href=http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#SEC273 class="reference external"&gt;documented&lt;/a&gt; in the manual.  I use that code to enable branch names in my
prompt, I use it directly instead of the code in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;oh-my-zsh&lt;/span&gt;&lt;/code&gt; that handles
&lt;strong class=command&gt;git&lt;/strong&gt; status because it doesn’t do what I want [yet].  I use a format
that matches the default(&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;robbyrussell&lt;/span&gt;&lt;/code&gt;) theme in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;oh-my-zsh&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=highlight-zsh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autoload -Uz vcs_info

&lt;span class=c1&gt;# See the documentation for the format string definition&lt;/span&gt;
&lt;span class=c1&gt;# This generates a fancy coloured string with $vcs:($branch)&lt;/span&gt;
zstyle &lt;span class=s1&gt;':vcs_info:*'&lt;/span&gt; formats &lt;span class=s1&gt;'%F{2}%s%F{7}:%F{2}(%F{1}%b%F{2})%f '&lt;/span&gt;
zstyle &lt;span class=s1&gt;':vcs_info:*'&lt;/span&gt; &lt;span class=nb&gt;enable&lt;/span&gt; git
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/220796 class="reference external"&gt;gist #220796&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once we’ve configured &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;vcs_info&lt;/span&gt;&lt;/code&gt; we just need to include
&lt;span id=index-0 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;${vcs_info_msg_0_}&lt;/span&gt;&lt;/code&gt; somewhere in our prompt to display the &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; and
current branch name.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;vcs_info&lt;/span&gt;&lt;/code&gt; works quite well, and supports many different systems(both common
and uncommon).  As the code snippet shows I enable support for &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; exclusively.
I’ve used it with &lt;a href=http://www.selenic.com/mercurial/ class="reference external"&gt;mercurial&lt;/a&gt; too, and it works well.  &lt;a href=http://darcs.net class="reference external"&gt;darcs&lt;/a&gt; also appears to
work well, but it isn’t a system I use often enough to have tested it
thoroughly.&lt;/p&gt;
&lt;p&gt;I tested &lt;strong class=command&gt;bzr&lt;/strong&gt; support while writing this but it is totally unusable
because of just how painfully slow &lt;strong class=command&gt;bzr&lt;/strong&gt; is.  On my system it adds
close to one and half seconds to every prompt display, although that could be
improved if I wasn’t using conservative &lt;abbr title="Central Processing Unit"&gt;CPU&lt;/abbr&gt;
scaling to save power.  As a comparison the &lt;strong class=command&gt;git&lt;/strong&gt; info takes less than
a tenth of a second to calculate on the same system, and &lt;strong class=command&gt;mercurial&lt;/strong&gt;
around three times that which is most definitely still usable.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;There is a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;use-simple&lt;/span&gt;&lt;/code&gt; setting for the &lt;strong class=command&gt;bzr&lt;/strong&gt; support that may
make the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;vcs_info&lt;/span&gt;&lt;/code&gt; functionality faster for you, albeit not noticeably on
my system.  It is also the only &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; that has such a hack, which is quite
telling in itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=repository-state class=section&gt;
&lt;h2&gt;Repository state&lt;a title="Permalink to this headline" href=/articles/tips/Zsh_and_the_vcs.html#repository-state class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The “funky arrows” Dan asks about are dependent on the state of the current
working directory as can be seen in the screenshot at the top of this page.&lt;/p&gt;
&lt;table class=docutils&gt;
&lt;colgroup&gt;
&lt;col style="width: 20%"&gt;
&lt;col style="width: 80%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=row-odd&gt;&lt;th class=head&gt;&lt;p&gt;Identifier&lt;/th&gt;
&lt;th class=head&gt;&lt;p&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=row-even&gt;&lt;td&gt;&lt;p&gt;white →&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Not a &lt;strong class=command&gt;git&lt;/strong&gt; repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-odd&gt;&lt;td&gt;&lt;p&gt;green ▶&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Clean &lt;strong class=command&gt;git&lt;/strong&gt; repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-even&gt;&lt;td&gt;&lt;p&gt;red ▶&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Staged changes in &lt;strong class=command&gt;git&lt;/strong&gt; repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-odd&gt;&lt;td&gt;&lt;p&gt;yellow ▶&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Unstaged changes in &lt;strong class=command&gt;git&lt;/strong&gt; repository&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using these visual markers it is always obvious what state a directory is in,
I’ve toyed with adding more but suspect the lack of complexity is what makes
them so useful.&lt;/p&gt;
&lt;p&gt;To enable them we need to add a &lt;a href=http://zsh.sourceforge.net/Doc/Release/Functions.html#SEC45 class="reference external"&gt;precmd hook&lt;/a&gt; to calculate the repository
status:&lt;/p&gt;
&lt;div class=highlight-zsh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autoload -U add-zsh-hook
add-zsh-hook precmd prompt_jnrowe_precmd

prompt_jnrowe_precmd &lt;span class=o&gt;()&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
    vcs_info

    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=o&gt;[&lt;/span&gt; -z &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;vcs_info_msg_0_&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=o&gt;]&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
        &lt;span class=nv&gt;dir_status&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"%F{2}→%f"&lt;/span&gt;
    &lt;span class=o&gt;}&lt;/span&gt; &lt;span class=k&gt;elif&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; -n &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=k&gt;$(&lt;/span&gt;git diff --cached --name-status &lt;span class=m&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class=k&gt;)&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
        &lt;span class=nv&gt;dir_status&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"%F{1}▶%f"&lt;/span&gt;
    &lt;span class=o&gt;}&lt;/span&gt; &lt;span class=k&gt;elif&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; -n &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=k&gt;$(&lt;/span&gt;git diff --name-status &lt;span class=m&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class=k&gt;)&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
        &lt;span class=nv&gt;dir_status&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"%F{3}▶%f"&lt;/span&gt;
    &lt;span class=o&gt;}&lt;/span&gt; &lt;span class=k&gt;else&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
        &lt;span class=nv&gt;dir_status&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s2&gt;"%F{2}▶%f"&lt;/span&gt;
    &lt;span class=o&gt;}&lt;/span&gt;
&lt;span class=o&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/220829 class="reference external"&gt;gist #220829&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With this added the we just need to include &lt;span id=index-1 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;$dir_status&lt;/span&gt;&lt;/code&gt; in our prompt
and the status identifiers will be used.&lt;/p&gt;
&lt;p&gt;If you are using a font which doesn’t display the characters correctly, either
change the characters in the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;dir_status&lt;/span&gt;&lt;/code&gt; values or switch to a &lt;a href=http://www.is-vn.bg/hamster/ class="reference external"&gt;better font&lt;/a&gt;
that can display them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Three mobile broadband in Linux</title><link href="/articles/tips/Three_mobile_broadband_in_linux.html" rel="alternate"></link><updated>2009-10-14T00:00:00Z</updated><id>/articles/tips/Three_mobile_broadband_in_linux.html</id><summary type="html">&lt;div id=three-mobile-broadband-in-linux class=section&gt;
&lt;h1&gt;Three mobile broadband in Linux&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#three-mobile-broadband-in-linux class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Steve Lowry is picking up his &lt;a href=http://three.co.uk class="reference external"&gt;Three&lt;/a&gt; modem this afternoon and asks on our
internal Linux list if it supports Linux.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I’ve ordered the Huawei E220 as it was free.  Is it likely to work with
Linux?  And, if so what should I be looking for to set it up?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I’ve had a Huawei &lt;abbr title="Universal Serial Bus"&gt;USB&lt;/abbr&gt; modem for about six months now and it works fine in
Linux, although it is probably a slightly different model.  The box and case
for mine claims it is a E160G, whereas &lt;strong class=command&gt;lsusb&lt;/strong&gt; from &lt;a href=http://linux-usb.sourceforge.net/ class="reference external"&gt;usbutils&lt;/a&gt; claims
it is a E220.  The manufacturers of these types of products routinely change
the components and models without updating the product codes, so you’ll have to
wait until you plug it in to see what model it actually is.&lt;/p&gt;
&lt;p&gt;As for how to make it work?  Simply use a distribution that comes with
&lt;a href=http://www.gnome.org/projects/NetworkManager/ class="reference external"&gt;NetworkManager&lt;/a&gt; and NetworkManager’s &lt;a href=http://live.gnome.org/NetworkManager/MobileBroadband/ServiceProviders class="reference external"&gt;mobile broadband provider database&lt;/a&gt;.
When I tested it on a friend’s install with that setup last month it worked out
of the box, all you had to do was plug it in and select the network.&lt;/p&gt;
&lt;div id=the-route-to-fail class=section&gt;
&lt;h2&gt;The route to fail&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#the-route-to-fail class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If, like me, you’d prefer not to install NetworkManager you can manually
configure the device using &lt;a href=http://www.samba.org/ppp class="reference external"&gt;pppd&lt;/a&gt;, and life is even easier now than it was when
I did it as there is plenty more information available(including this I guess).&lt;/p&gt;
&lt;div id=finding-the-apn class=section&gt;
&lt;h3&gt;Finding the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#finding-the-apn class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing you need is your provider’s &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;, and the easiest place to
find it is from the &lt;a href=http://live.gnome.org/NetworkManager/MobileBroadband/ServiceProviders class="reference external"&gt;NetworkManager database&lt;/a&gt;.  If yours is not there you’ll
have to dig further.  When I originally got my device that database was
practically empty, so I had to resort to other means to find the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;We can extract the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; from the Windows driver that came with the device.
The driver can be found on the device itself because it also acts a small
&lt;abbr title="Small Computer Systems Interface"&gt;SCSI&lt;/abbr&gt; device with a filesystem.  It
is actually pretty clever, assuming it works as advertised, as it can
self-install its own driver when plugged in.&lt;/p&gt;
&lt;p&gt;If we find the device name with &lt;strong class=command&gt;dmesg&lt;/strong&gt; we can mount it, and pull the
&lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; from the Windows driver:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir e220_drivers&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=nb&gt;cd&lt;/span&gt; e220_drivers
mount -t vfat /dev/sr2 /mnt/huawei
&lt;span class=k&gt;for&lt;/span&gt; file in /mnt/huawei/**/*.cab&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=k&gt;do&lt;/span&gt; unpack &lt;span class=nv&gt;$file&lt;/span&gt;&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=k&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/212738 class="reference external"&gt;gist #212738&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong class=command&gt;unpack&lt;/strong&gt; tool from above is just a wrapper around common
archivers, and the tool you actually need to extract the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;cab&lt;/span&gt;&lt;/code&gt; files is
&lt;a href=http://synce.sourceforge.net/synce/unshield.php class="reference external"&gt;unshield&lt;/a&gt;.  Contrary to my first idea &lt;a href=http://www.cabextract.org.uk/ class="reference external"&gt;cabextract&lt;/a&gt; doesn’t work, as these files
are actually made by &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;installshield&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; in hand all we need to do now is configure our system.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=kernel class=section&gt;
&lt;h3&gt;Kernel&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#kernel class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re using a vendor supplied kernel the options we need are hopefully
already enabled.  If they’re not, or you build your own kernels, there are few
changes we need to make to the kernel configuration.&lt;/p&gt;
&lt;p&gt;The dongle itself needs &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;CONFIG_USB_SERIAL_OPTION&lt;/span&gt;&lt;/code&gt; enabled, which is labelled
as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;USB&lt;/span&gt; &lt;span class=pre&gt;driver&lt;/span&gt; &lt;span class=pre&gt;for&lt;/span&gt; &lt;span class=pre&gt;GSM&lt;/span&gt; &lt;span class=pre&gt;and&lt;/span&gt; &lt;span class=pre&gt;CDMA&lt;/span&gt; &lt;span class=pre&gt;modems&lt;/span&gt;&lt;/code&gt; in the kernel’s &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;menuconfig&lt;/span&gt;&lt;/code&gt;.  It
can be found hidden away under the “USB Serial Converters” section in 2.6.31.&lt;/p&gt;
&lt;p&gt;We also need &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;CONFIG_PPP&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;CONFIG_PPP_ASYNC&lt;/span&gt;&lt;/code&gt; support, which can be
found in the “Network devices” section of the config.  Unlike the old-style
dialup you may be used to use there is no point enabling the &lt;abbr title="Point-to-Point Protocol"&gt;PPP&lt;/abbr&gt; compression options as they are not supported by
mobile providers in general, partly because the data is already compressed.&lt;/p&gt;
&lt;p&gt;Then just rebuild the kernel, and check that the dongle shows up in
&lt;strong class=command&gt;dmesg&lt;/strong&gt; output when it is plugged in.  If it does we’re ready for the
next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=etc-chatscripts-three class=section&gt;
&lt;h3&gt;/etc/chatscripts/three&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#etc-chatscripts-three class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need a &lt;strong class=command&gt;pppd&lt;/strong&gt; chatscript for the connection, the format and
settings of this file can be found in the &lt;em class=manpage&gt;chat(8)&lt;/em&gt; manpage.  My
chatscript is below:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TIMEOUT 3
ECHO ON
ABORT 'BUSY'
ABORT 'DELAYED'
ABORT 'ERROR'
ABORT 'NO ANSWER'
ABORT 'NO CARRIER'
ABORT 'NO DIALTONE'
ABORT 'VOICE'
'' \rAT
OK 'AT+CGDCONT=1,"IP","3internet"'
OK ATD*99#
CONNECT ""
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/212739 class="reference external"&gt;gist #212739&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Exchange &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;3internet&lt;/span&gt;&lt;/code&gt; for your &lt;abbr title="Access Point Name"&gt;APN&lt;/abbr&gt; in the example above, if it differs.&lt;/p&gt;
&lt;p&gt;It is also possible, yet unlikely, that you’ll have to call a different number
to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;*99#&lt;/span&gt;&lt;/code&gt;.  If this was the case you would have found that out from extracting
the data from the drivers or looking your network up in the NetworkManager
database.&lt;/p&gt;
&lt;p&gt;Notice the very short value for timeout, I’ve come to that value empirically.
If the connection isn’t up after 3 seconds it is not coming up, and you’re just
wasting time before you retry.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=etc-ppp-peers-three class=section&gt;
&lt;h3&gt;/etc/ppp/peers/three&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#etc-ppp-peers-three class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We also need a peer script, and the format of that file is described in the
&lt;em class=manpage&gt;pppd(8)&lt;/em&gt; manpage.  Mine can be used as an example:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debug
noauth
connect "/usr/sbin/chat -v -f /etc/chatscripts/three"
noipdefault
usepeerdns
/dev/ttyUSB0
defaultroute
persist
crtscts
lcp-echo-failure 0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/212740 class="reference external"&gt;gist #212740&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may have to change your device settings if the dongle doesn’t show up as
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;/dev/ttyUSB0&lt;/span&gt;&lt;/code&gt;, but other than that the file should be correct.&lt;/p&gt;
&lt;p&gt;Note that we don’t set a speed in our peer file, and this may appear unusual to
you if you’ve configured &lt;strong class=command&gt;pppd&lt;/strong&gt; manually in the past.  The reason is
that interface speed for &lt;abbr title="Universal Serial Bus"&gt;USB&lt;/abbr&gt; modems is set by the kernel, and adding a value
here is pointless.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=passwords class=section&gt;
&lt;h3&gt;passwords&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#passwords class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We don’t need to add an entry to &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;chap-secrets&lt;/span&gt;&lt;/code&gt; or &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;pap-secrets&lt;/span&gt;&lt;/code&gt; as
authentication isn’t required, but if you’re following along having chosen to
use a configuration tool such as &lt;a href=http://http.us.debian.org/debian/pool/main/p/pppconfig/ class="reference external"&gt;pppconfig&lt;/a&gt; just enter any values you wish as
they’re silently ignored.&lt;/p&gt;
&lt;p&gt;I’m told the same applies to &lt;a href=http://alumnit.ca/wiki/?WvDial class="reference external"&gt;wvdial&lt;/a&gt;, so if it complains about requiring
a password just add an empty or random string to stop the errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=testing-the-connection class=section&gt;
&lt;h3&gt;Testing the connection&lt;a title="Permalink to this headline" href=/articles/tips/Three_mobile_broadband_in_linux.html#testing-the-connection class=headerlink&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To test the connection all we need to do is issue &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;pon&lt;/span&gt; &lt;span class=pre&gt;three&lt;/span&gt;&lt;/code&gt;, or use the
graphical tool in your distro if you wish.  The first time you do this you
should watch the output of your syslog to look for errors, the errors can be
found in syslog because we supplied &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;debug&lt;/span&gt;&lt;/code&gt; in our peer script.&lt;/p&gt;
&lt;p&gt;On my system the log can be comfortably viewed with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;tail&lt;/span&gt; &lt;span class=pre&gt;-f&lt;/span&gt;
&lt;span class=pre&gt;/var/log/ppp/current&lt;/span&gt;&lt;/code&gt;, but it is system dependent and if you don’t use &lt;a href=http://metalog.sourceforge.net/ class="reference external"&gt;metalog&lt;/a&gt;
it will definitely be somewhere else in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/var/log&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the connection worked fine that is all there is to it, now just enable the
connection at system startup or configure &lt;a href=http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html class="reference external"&gt;udev&lt;/a&gt; to connect when the device is
inserted if it will not always be connected.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;These devices can take anywhere between ten and thirty seconds to “settle”
once plugged in. So, don’t block on this service if you add it to the system
startup scripts as it can significantly slow down the system boot time.  On
my dongle you can visually check how long the device takes to settle by
watching the &lt;abbr title="Light Emitting Diode"&gt;LED&lt;/abbr&gt; on the case, when it changes
from green it has found a network signal and is ready to use.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If the connection didn’t work correctly look at the debugging output in syslog
and check the &lt;strong class=command&gt;pppd&lt;/strong&gt; manual page to look up the error codes.&lt;/p&gt;
&lt;p&gt;Happy, erm… mobility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Visual vim mode identifier</title><link href="/articles/tips/Visual_vim_mode_identifier.html" rel="alternate"></link><updated>2009-10-13T00:00:00Z</updated><id>/articles/tips/Visual_vim_mode_identifier.html</id><summary type="html">&lt;div id=visual-vim-mode-identifier class=section&gt;
&lt;h1&gt;Visual vim mode identifier&lt;a title="Permalink to this headline" href=/articles/tips/Visual_vim_mode_identifier.html#visual-vim-mode-identifier class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Paul Kerry rants about his problems with &lt;a href=http://www.vim.org/ class="reference external"&gt;vim&lt;/a&gt; over the cooler today, and as
a long time &lt;strong class=command&gt;vim&lt;/strong&gt; user I found it hard not to respond to some of the
points.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;All this mode switching makes it hard to know whether typing “Paul” is going
to insert a huge block of code from the ether or insert, you know, “Paul” on
the screen.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The point Paul is making is that when he is in &lt;a href=http://vimdoc.sourceforge.net/htmldoc/intro.html#vim-modes class="reference external"&gt;normal mode&lt;/a&gt;, typing the “P” of
”Paul” can cause &lt;strong class=command&gt;vim&lt;/strong&gt; to insert a huge amount of text at the cursor.
The text comes from the &lt;a href=http://vimdoc.sourceforge.net/htmldoc/change.html#quote class="reference external"&gt;unnamed register&lt;/a&gt;, so it will be whatever potentially
very large chunk of text he deleted or &lt;a href=http://vimdoc.sourceforge.net/htmldoc/change.html#yank class="reference external"&gt;yanked&lt;/a&gt; last.&lt;/p&gt;
&lt;img src=/_images/2009-10-13-vim_screenshot.png class=align-right alt="mode identifier in vim"&gt;
&lt;p&gt;If he had just added &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;set&lt;/span&gt; &lt;span class=pre&gt;showmode&lt;/span&gt;&lt;/code&gt; to his &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.vimrc&lt;/span&gt;&lt;/code&gt; he would have
a nice &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;--&lt;/span&gt; &lt;span class=pre&gt;INSERT&lt;/span&gt; &lt;span class=pre&gt;--&lt;/span&gt;&lt;/code&gt; reminder in the bottom of his terminal window when in
insert mode, as can be seen in the screenshot on the right.&lt;/p&gt;
&lt;p&gt;Another option that I use, combined with &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'showmode'" class="reference external"&gt;showmode&lt;/a&gt;, is to change the cursor
colour when switching to and from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;insert&lt;/span&gt;&lt;/code&gt; mode.  This unfortunately doesn’t
work on all terminal types, which means you have to test them individually and
then set appropriate values for &lt;a href="http://vimdoc.sourceforge.net/htmldoc/term.html#'t_SI'" class="reference external"&gt;t_SI&lt;/a&gt; and &lt;a href="http://vimdoc.sourceforge.net/htmldoc/term.html#'t_EI'" class="reference external"&gt;t_EI&lt;/a&gt; on each terminal type.  An
example for &lt;a href=http://rxvt.sourceforge.net/ class="reference external"&gt;rxvt&lt;/a&gt;-based terminals, including my favourite &lt;a href=http://software.schmorp.de/ class="reference external"&gt;rxvt-unicode&lt;/a&gt;, is
below:&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=k&gt;if&lt;/span&gt; &amp;amp;&lt;span class=nb&gt;term&lt;/span&gt; &lt;span class=p&gt;=~&lt;/span&gt;? &lt;span class=s1&gt;'^rxvt'&lt;/span&gt; &amp;amp;&amp;amp; exists&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'&amp;amp;t_EI'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=k&gt;let&lt;/span&gt; &amp;amp;&lt;span class=nb&gt;t_EI&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=s2&gt;"\033]12;red\007"&lt;/span&gt;
    &lt;span class=k&gt;let&lt;/span&gt; &amp;amp;&lt;span class=nb&gt;t_SI&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=s2&gt;"\033]12;green\007"&lt;/span&gt;
&lt;span class=k&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/209913 class="reference external"&gt;gist #209913&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use a green cursor to indicate &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;insert&lt;/span&gt;&lt;/code&gt; mode, I tried a number of alternatives
but found keeping the same cursor colour as my shell sessions was the most
useful for me.  You can use any colour your terminal supports, including the
extended 256 colour palette.  For more information on accessing the colours from
the extended palette see the earlier &lt;a href=/articles/tips/Uber_pink_prompts.html class="reference internal"&gt;&lt;span class=doc&gt;Uber pink prompts&lt;/span&gt;&lt;/a&gt; tip.&lt;/p&gt;
&lt;p&gt;You can also use the &lt;a href=http://vimdoc.sourceforge.net/htmldoc/autocmd.html#InsertEnter class="reference external"&gt;InsertEnter&lt;/a&gt; and &lt;a href=http://vimdoc.sourceforge.net/htmldoc/autocmd.html#InsertLeave class="reference external"&gt;InsertLeave&lt;/a&gt; events to call a function
when changing mode.  There really is no limit to what kind of notifications you
can use with this method.  Taking the idea too far we could use the &lt;a href=http://awesome.naquadah.org/ class="reference external"&gt;awesome&lt;/a&gt;
notifications from &lt;a href=/articles/tips/Simple_notifications_in_awesome.html class="reference internal"&gt;&lt;span class=doc&gt;Simple notifications in awesome&lt;/span&gt;&lt;/a&gt; to display popups
when we change mode:&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=k&gt;au&lt;/span&gt; &lt;span class=nb&gt;InsertEnter&lt;/span&gt; * &lt;span class=p&gt;!&lt;/span&gt;echo &lt;span class=s2&gt;"notify.start('Insert mode started')"&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; awesome&lt;span class=p&gt;-&lt;/span&gt;client
&lt;span class=k&gt;au&lt;/span&gt; &lt;span class=nb&gt;InsertLeave&lt;/span&gt; * &lt;span class=p&gt;!&lt;/span&gt;echo &lt;span class=s2&gt;"notify.stop('Insert mode finished')"&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; awesome&lt;span class=p&gt;-&lt;/span&gt;client
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/209915 class="reference external"&gt;gist #209915&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that I didn’t say it was a good idea, just that it was possible!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Instant web server</title><link href="/articles/tips/Instant_web_server.html" rel="alternate"></link><updated>2009-10-12T00:00:00Z</updated><id>/articles/tips/Instant_web_server.html</id><summary type="html">&lt;div id=instant-web-server class=section&gt;
&lt;h1&gt;Instant web server&lt;a title="Permalink to this headline" href=/articles/tips/Instant_web_server.html#instant-web-server class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Among the topics on our Linux list at work today was a question from Luke
Fletcher that I was expecting to unleash a flurry of emotional responses:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What is the best small web server for testing site design and the like?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There were a couple of predictable rants about the benefits and drawbacks of
threading models.  Along with a couple of other topics entirely unhelpful for
the question at hand, but surprisingly little dissent over the choices.&lt;/p&gt;
&lt;p&gt;Matt Traner’s reply sums up the general feeling quite nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Just use whatever server you have installed already.  If you don’t have
&lt;em&gt;any&lt;/em&gt; installed grab &lt;a href=http://nginx.net/ class="reference external"&gt;nginx&lt;/a&gt; as it works well and is quite small.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree with Matt’s answer but I want to point a couple of possibly non-obvious
web servers that they, and you, are likely to have installed already.&lt;/p&gt;
&lt;div id=busybox class=section&gt;
&lt;h2&gt;Busybox&lt;a title="Permalink to this headline" href=/articles/tips/Instant_web_server.html#busybox class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All our Linux systems at the office include &lt;a href=http://www.busybox.net/ class="reference external"&gt;busybox&lt;/a&gt;, and in the configuration
we use the &lt;a href=http://www.busybox.net/downloads/BusyBox.html#httpd class="reference external"&gt;httpd&lt;/a&gt; applet is built.  It is very lightweight, and incredibly
stable.  I often use it when testing or as a weak way to transfer files between
hosts when &lt;a href=http://avahi.org/ class="reference external"&gt;avahi&lt;/a&gt; isn’t available or is too much hassle.  In my &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt;
configuration I have a little functions to start up a &lt;strong class=command&gt;busybox httpd&lt;/strong&gt;
server:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http_serve&lt;span class=o&gt;()&lt;/span&gt;
&lt;span class=o&gt;{&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;1&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=o&gt;==&lt;/span&gt; &lt;span class=s2&gt;"--help"&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt;
    &lt;span class=k&gt;then&lt;/span&gt;
        &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"Usage: &lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;FUNCNAME&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt; [location]"&lt;/span&gt;
        &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"Start a httpd in ‘location’, defaulting to ‘&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;http_serve_location&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;’."&lt;/span&gt;
        &lt;span class=k&gt;return&lt;/span&gt; &lt;span class=m&gt;1&lt;/span&gt;
    &lt;span class=k&gt;fi&lt;/span&gt;
    busybox httpd -f -p &lt;span class=m&gt;8080&lt;/span&gt; -h &lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;1&lt;/span&gt;&lt;span class=k&gt;:-&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;http_serve_location&lt;/span&gt;&lt;span class=si&gt;}}&lt;/span&gt;
&lt;span class=o&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/208887 class="reference external"&gt;gist #208887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;http_serve_location&lt;/span&gt;&lt;/code&gt; is set elsewhere in my configuration file, so that I can
keep per-machine settings separate.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=python class=section&gt;
&lt;h2&gt;Python&lt;a title="Permalink to this headline" href=/articles/tips/Instant_web_server.html#python class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=http://www.python.org/ class="reference external"&gt;Python&lt;/a&gt; comes with its own basic web server, and it is very easy to use:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; python2.6 -m SimpleHTTPServer &lt;span class=m&gt;8080&lt;/span&gt;
&lt;span class=go&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET / HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/content.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/design.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/pygments.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/microformats.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/print.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:16:51] "GET /css/voice.css HTTP/1.1" 200 -&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; python3.1 -m http.server &lt;span class=m&gt;8080&lt;/span&gt;
&lt;span class=go&gt;Serving HTTP on 0.0.0.0 port 8080 ...&lt;/span&gt;
&lt;span class=go&gt;kate.localdomain - - [13/Oct/2009 01:17:23] "GET /2009/10/12/TaD-Instant_web_server.html HTTP/1.1" 200 -&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that the name of the module has changed from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;SimpleHTTPServer&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;http.server&lt;/span&gt;&lt;/code&gt; for Python v3 and above.&lt;/p&gt;
&lt;p&gt;I’ve specified the port 8080 to both calls in the snippet above, by default the
server port would be 8000.  If port 8000 is acceptable for you then you can save
yourself five keystrokes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=ruby class=section&gt;
&lt;h2&gt;Ruby&lt;a title="Permalink to this headline" href=/articles/tips/Instant_web_server.html#ruby class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=http://www.ruby-lang.org/ class="reference external"&gt;ruby&lt;/a&gt; also comes with its own web server, one that you’re probably already
familiar with if you’re a &lt;a href=http://www.rubyonrails.org/ class="reference external"&gt;rails&lt;/a&gt; user, called &lt;a href=http://www.webrick.org/ class="reference external"&gt;webrick&lt;/a&gt;.  We need a little script
to use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;webrick&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-ruby&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=ch&gt;#! /usr/bin/ruby&lt;/span&gt;

&lt;span class=nb&gt;require&lt;/span&gt; &lt;span class=s2&gt;"webrick"&lt;/span&gt;

&lt;span class=n&gt;server&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=no&gt;WEBrick&lt;/span&gt;&lt;span class=o&gt;::&lt;/span&gt;&lt;span class=no&gt;HTTPServer&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;new&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;
    &lt;span class=ss&gt;:BindAddress&lt;/span&gt; &lt;span class=o&gt;=&amp;gt;&lt;/span&gt; &lt;span class=s2&gt;"localhost"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
    &lt;span class=ss&gt;:Port&lt;/span&gt; &lt;span class=o&gt;=&amp;gt;&lt;/span&gt; &lt;span class=mi&gt;8080&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
    &lt;span class=ss&gt;:DocumentRoot&lt;/span&gt; &lt;span class=o&gt;=&amp;gt;&lt;/span&gt; &lt;span class=no&gt;ARGV&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=o&gt;]&lt;/span&gt;
&lt;span class=p&gt;)&lt;/span&gt;

&lt;span class=nb&gt;trap&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s2&gt;"INT"&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=p&gt;{&lt;/span&gt; &lt;span class=n&gt;server&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;shutdown&lt;/span&gt; &lt;span class=p&gt;}&lt;/span&gt;

&lt;span class=n&gt;server&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/208891 class="reference external"&gt;gist #208891&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This script will serve files from whatever directory is specified as its first
argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=bonus class=section&gt;
&lt;h2&gt;Bonus&lt;a title="Permalink to this headline" href=/articles/tips/Instant_web_server.html#bonus class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python also comes with a &lt;abbr title="Common Gateway Interface"&gt;CGI&lt;/abbr&gt;-capable version
called &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;CGIHTTPServer&lt;/span&gt;&lt;/code&gt; and a &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt;-&lt;abbr title="Remote Procedure Call"&gt;RPC&lt;/abbr&gt; server
called — this shouldn’t come as a surprise — &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;SimpleXMLRPCServer&lt;/span&gt;&lt;/code&gt;.  They’re
very useful for testing out ideas and concepts without having to set down lots
of code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Making a nice home</title><link href="/articles/tips/Making_a_nice_home.html" rel="alternate"></link><updated>2009-10-11T00:00:00Z</updated><id>/articles/tips/Making_a_nice_home.html</id><summary type="html">&lt;div id=making-a-nice-home class=section&gt;
&lt;h1&gt;Making a nice home&lt;a title="Permalink to this headline" href=/articles/tips/Making_a_nice_home.html#making-a-nice-home class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Back in &lt;a href=/articles/tips/Kick_me_birthday_reminders.html class="reference internal"&gt;&lt;span class=doc&gt;“Kick me” birthday reminders&lt;/span&gt;&lt;/a&gt; I said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;You could trigger a rebuild in your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.bashrc&lt;/span&gt;&lt;/code&gt; before you call
&lt;strong class=command&gt;rem&lt;/strong&gt; to see the reminders, so they are always up to date at
login. Or, you could be like me and have a post commit hook for &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; to
manage this… because you are keeping your home directory version controlled
as a sanity measure I hope!&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Today, Stuart Grady asked me in a private mail:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Okay, at which point is the “Tip of the Day” thingy going to be about using
hooks and &lt;a href=http://www.gnu.org/software/make/make.html class="reference external"&gt;make&lt;/a&gt; in &lt;span id=index-0 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;$HOME&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I’ll take the hint and look at &lt;strong class=command&gt;make&lt;/strong&gt;.  For the purposes of this post
we’re going to pretend we haven’t read &lt;a href=http://miller.emu.id.au/pmiller/books/rmch/ class="reference external"&gt;recursive make considered harmful&lt;/a&gt; as
I don’t heed its advice for the &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt; I have in my home directory.
That said, let’s have a look at what can be found in my current top-level
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=permissions class=section&gt;
&lt;h1&gt;Permissions&lt;a title="Permalink to this headline" href=/articles/tips/Making_a_nice_home.html#permissions class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I keep my home directory version controlled with &lt;strong class=command&gt;git&lt;/strong&gt;, but
&lt;strong class=command&gt;git&lt;/strong&gt; out of the box doesn’t maintain permissions on files(beyond the
executable bit anyway).  There are plenty of ways around this including using
external tools such as &lt;a href=http://joey.kitenet.net/code/etckeeper/ class="reference external"&gt;etckeeper&lt;/a&gt;, but I prefer the simple approach of setting
the permissions when they’re needed:&lt;/p&gt;
&lt;div class=highlight-make&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nv&gt;PRIVATE_FILES&lt;/span&gt; &lt;span class=o&gt;:=&lt;/span&gt; .abook/addressbook .gnupg/secring.gpg .mailfilter .msmtprc &lt;span class=se&gt;\&lt;/span&gt;
        .ssh/id_rsa
&lt;span class=nv&gt;PRIVATE_DIRS&lt;/span&gt; &lt;span class=o&gt;:=&lt;/span&gt; .gnupg

&lt;span class=nf&gt;fix-perms&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;PRIVATE_FILES&lt;/span&gt;&lt;span class=k&gt;)&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;PRIVATE_DIRS&lt;/span&gt;&lt;span class=k&gt;)&lt;/span&gt;
        &lt;span class=k&gt;$(&lt;/span&gt;info - Removing extra &lt;span class=nb&gt;read&lt;/span&gt; permissions from private files and directories&lt;span class=k&gt;)&lt;/span&gt;
        chmod &lt;span class=m&gt;600&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;PRIVATE_FILES&lt;span class=k&gt;)&lt;/span&gt;
        chmod &lt;span class=m&gt;700&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;PRIVATE_DIRS&lt;span class=k&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/208207 class="reference external"&gt;gist #208207&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this rule is called after a &lt;strong class=command&gt;git pull&lt;/strong&gt; is issued then the files
always have the correct permissions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=vim-hacks class=section&gt;
&lt;h1&gt;vim hacks&lt;a title="Permalink to this headline" href=/articles/tips/Making_a_nice_home.html#vim-hacks class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I also call &lt;strong class=command&gt;make&lt;/strong&gt; in some subdirectories, the most interesting one is
probably for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;.vim&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-make&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nv&gt;CTAGS&lt;/span&gt; &lt;span class=o&gt;:=&lt;/span&gt; exuberant-ctags

&lt;span class=nv&gt;TARGETS&lt;/span&gt; &lt;span class=o&gt;:=&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;patsubst /usr/lib/%, tags/%.ctags, &lt;span class=k&gt;$(&lt;/span&gt;wildcard /usr/lib/python*&lt;span class=k&gt;))&lt;/span&gt; &lt;span class=se&gt;\&lt;/span&gt;
    doc/tags

&lt;span class=nf&gt;.PHONY&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=n&gt;clean&lt;/span&gt;

&lt;span class=nf&gt;all&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;TARGETS&lt;/span&gt;&lt;span class=k&gt;)&lt;/span&gt;

&lt;span class=nf&gt;$(TARGETS)&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=n&gt;tags&lt;/span&gt;/%.&lt;span class=n&gt;ctags&lt;/span&gt;: /&lt;span class=n&gt;usr&lt;/span&gt;/&lt;span class=n&gt;lib&lt;/span&gt;/%
    &lt;span class=k&gt;$(&lt;/span&gt;CTAGS&lt;span class=k&gt;)&lt;/span&gt; --exclude&lt;span class=o&gt;=&lt;/span&gt;test_* --exclude&lt;span class=o&gt;=&lt;/span&gt;tests.py --exclude&lt;span class=o&gt;=&lt;/span&gt;test.py &lt;span class=se&gt;\&lt;/span&gt;
        --exclude&lt;span class=o&gt;=&lt;/span&gt;*/test/* --exclude&lt;span class=o&gt;=&lt;/span&gt;*/tests/* --languages&lt;span class=o&gt;=&lt;/span&gt;python &lt;span class=se&gt;\&lt;/span&gt;
        -R -f &lt;span class=nv&gt;$@&lt;/span&gt; $&amp;lt;

&lt;span class=nf&gt;doc/tags&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;filter&lt;/span&gt;-&lt;span class=nv&gt;out&lt;/span&gt; &lt;span class=nv&gt;doc&lt;/span&gt;/&lt;span class=nv&gt;tags&lt;/span&gt;, &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;wildcard&lt;/span&gt; &lt;span class=nv&gt;doc&lt;/span&gt;/*&lt;span class=k&gt;))&lt;/span&gt;
    vim -X -u NONE -c &lt;span class=s1&gt;'helptags $(dir $@)'&lt;/span&gt; -c &lt;span class=s1&gt;':q'&lt;/span&gt; &amp;lt;/dev/null &lt;span class=p&gt;&amp;amp;&lt;/span&gt;&amp;gt;/dev/null

&lt;span class=nf&gt;clean&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt;
    rm -f &lt;span class=k&gt;$(&lt;/span&gt;TARGETS&lt;span class=k&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/208209 class="reference external"&gt;gist #208209&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The values in the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;patsubst&lt;/span&gt;&lt;/code&gt; block of the &lt;strong class=makevar&gt;TARGETS&lt;/strong&gt; definition are
a list of filenames to use for tag storage with &lt;a href=http://ctags.sourceforge.net class="reference external"&gt;ctags&lt;/a&gt;.  The rule creates
a different &lt;strong class=command&gt;ctags&lt;/strong&gt; file for each installed &lt;a href=http://www.python.org class="reference external"&gt;python&lt;/a&gt; version.  In the
rule to make the &lt;strong class=command&gt;ctags&lt;/strong&gt; files we specifically exclude test files as
they aren’t often useful in &lt;a href=http://vimdoc.sourceforge.net/htmldoc/version7.html#new-omni-completion class="reference external"&gt;omni-completion&lt;/a&gt;, and they significantly pollute
the tags database for normal use.&lt;/p&gt;
&lt;p&gt;The final entry in &lt;strong class=makevar&gt;TARGETS&lt;/strong&gt; simply updates the tag lists for &lt;a href=http://vimdoc.sourceforge.net/htmldoc/various.html#:helptags class="reference external"&gt;help
files&lt;/a&gt; installed in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;~/.vim/doc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=documentation class=section&gt;
&lt;h1&gt;Documentation&lt;a title="Permalink to this headline" href=/articles/tips/Making_a_nice_home.html#documentation class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The final subdirectory &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt; we’re going to look at is actually
called in a number of different directories to create &lt;abbr title="HyperText Markup Language"&gt;HTML&lt;/abbr&gt; versions of
&lt;a href=http://docutils.sourceforge.net/rst.html class="reference external"&gt;reStructuredText&lt;/a&gt; files.&lt;/p&gt;
&lt;div class=highlight-make&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nv&gt;GENERATED&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;patsubst %.rst, %.html, &lt;span class=k&gt;$(&lt;/span&gt;wildcard *.rst&lt;span class=k&gt;))&lt;/span&gt;

&lt;span class=nf&gt;all&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; &lt;span class=k&gt;$(&lt;/span&gt;&lt;span class=nv&gt;GENERATED&lt;/span&gt;&lt;span class=k&gt;)&lt;/span&gt;

&lt;span class=nf&gt;$(GENERATED)&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; %.&lt;span class=n&gt;html&lt;/span&gt;: %.&lt;span class=n&gt;rst&lt;/span&gt;
        rst2html.py $&amp;lt; &lt;span class=nv&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/208210 class="reference external"&gt;gist #208210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we call the above &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt; from our &lt;strong class=command&gt;git&lt;/strong&gt; hooks after any
pull or merge we always have up to date processed versions of documents.  It is
like having a personal web viewable wiki, but without having to use an awful
markup language.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Formatting &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files in the shell</title><link href="/articles/tips/Formatting_csv_files_in_the_shell.html" rel="alternate"></link><updated>2009-10-10T00:00:00Z</updated><id>/articles/tips/Formatting_csv_files_in_the_shell.html</id><summary type="html">&lt;div id=formatting-csv-files-in-the-shell class=section&gt;
&lt;h1&gt;Formatting &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files in the shell&lt;a title="Permalink to this headline" href=/articles/tips/Formatting_csv_files_in_the_shell.html#formatting-csv-files-in-the-shell class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;kemi asks in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;#bash&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Are there any tools to format &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files in the console?  Not
interactive, no spreadsheets&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=http://www.linuxmanpages.com/man1/column.1.php class="reference external"&gt;column&lt;/a&gt;, which on Linux is likely to be provided by &lt;a href=http://www.kernel.org/pub/linux/utils/util-linux-ng/ class="reference external"&gt;util-linux&lt;/a&gt;, does exactly
this.  The man page even offers an example of how it works(I’ve changed it
slightly to make it work correctly on my system):&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; &lt;span class=o&gt;(&lt;/span&gt;&lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"PERM LINKS OWNER GROUP SIZE DATE HH:MM NAME"&lt;/span&gt;&lt;span class=p&gt;;&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;     ls -l static/ &lt;span class=p&gt;|&lt;/span&gt; sed 1d&lt;span class=o&gt;)&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; column -t
&lt;span class=go&gt;PERM        LINKS  OWNER  GROUP  SIZE   DATE        HH:MM  NAME&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    328    2009-09-25  02:59  body_background.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    7234   2009-09-25  02:59  draft.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    6253   2009-09-25  02:59  extract-metadata.xsl&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    13143  2009-10-07  09:05  foaf.rdf&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    3580   2009-09-25  02:59  gpg.asc&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    7739   2009-09-25  02:59  icon.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    96     2009-09-25  02:59  meta_background.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    411    2009-09-29  11:39  remote.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Given some other standard commands we can mangle that data in various ways at
the shell prompt too, for example we may wish to display the total size of all
the files.  Or, as in the output below, the total size of all the &lt;abbr title="Portable Network Graphics"&gt;PNG&lt;/abbr&gt; files in the directory.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; &lt;span class=o&gt;(&lt;/span&gt;&lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"PERM LINKS OWNER GROUP SIZE DATE HH:MM NAME"&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;     ls -l static/ &lt;span class=p&gt;|&lt;/span&gt; sed 1d&lt;span class=o&gt;)&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; column -t &lt;span class=p&gt;|&lt;/span&gt; awk &lt;span class=s1&gt;'{print}&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&lt;span class=s1&gt;         /\.png/ {sum+=$5}&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&lt;span class=s1&gt;         END {print "Total size of PNG files:", sum}'&lt;/span&gt;
&lt;span class=go&gt;PERM        LINKS  OWNER  GROUP  SIZE   DATE        HH:MM  NAME&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    328    2009-09-25  02:59  body_background.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    7234   2009-09-25  02:59  draft.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    6253   2009-09-25  02:59  extract-metadata.xsl&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    13143  2009-10-07  09:05  foaf.rdf&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    3580   2009-09-25  02:59  gpg.asc&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    7739   2009-09-25  02:59  icon.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    96     2009-09-25  02:59  meta_background.png&lt;/span&gt;
&lt;span class=go&gt;-rw-r--r--  1      jay    jay    411    2009-09-29  11:39  remote.png&lt;/span&gt;
&lt;span class=go&gt;Total size of PNG files: 15808&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the original question on how to process &lt;abbr title="Comma Separated Values"&gt;CSV&lt;/abbr&gt; files all we really need to
do is get the data in to a state for &lt;strong class=command&gt;column&lt;/strong&gt; to process, and we can
use &lt;a href=http://www.linuxmanpages.com/man1/tr.1.php class="reference external"&gt;tr&lt;/a&gt; to do that.  An example using a small chunk of the network log on this
computer that we wish to format and calculate totals for could be:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; cat stats
&lt;span class=go&gt;2009-07-15T05:09:42+0100,16803,4304661,129262665&lt;/span&gt;
&lt;span class=go&gt;2009-07-16T04:10:29+0100,17551,4012917,67572304&lt;/span&gt;
&lt;span class=go&gt;2009-07-16T19:03:00+0100,17621,1712073,34162500&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T14:18:19+0100,7961,1071313,26286593&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T18:23:40+0100,1867,308589,6057915&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T18:53:21+0100,1740,180197,2907388&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T19:00:03+0100,356,152917,928948&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T22:01:57+0100,6611,1159789,25562873&lt;/span&gt;
&lt;span class=go&gt;2009-07-18T13:09:31+0100,1681,164663,2049315&lt;/span&gt;
&lt;span class=go&gt;2009-07-18T13:24:04+0100,834,54025,662134&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; &lt;span class=o&gt;(&lt;/span&gt;&lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"Date,Duration,Sent,Received"&lt;/span&gt;&lt;span class=p&gt;;&lt;/span&gt;  cat stats &lt;span class=o&gt;)&lt;/span&gt; &lt;span class=se&gt;\&lt;/span&gt;
&amp;gt;     &lt;span class=p&gt;|&lt;/span&gt; tr &lt;span class=s1&gt;','&lt;/span&gt; &lt;span class=s1&gt;' '&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt; column -t &lt;span class=p&gt;|&lt;/span&gt; awk &lt;span class=s1&gt;'{print}&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&lt;span class=s1&gt;         !/Date/ {sent+=$3; recv+=$4}&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&lt;span class=s1&gt;         END {print "\nTotal sent: "sent", Total received: "recv}'&lt;/span&gt;
&lt;span class=go&gt;Date                      Duration  Sent     Received&lt;/span&gt;
&lt;span class=go&gt;2009-07-15T05:09:42+0100  16803     4304661  129262665&lt;/span&gt;
&lt;span class=go&gt;2009-07-16T04:10:29+0100  17551     4012917  67572304&lt;/span&gt;
&lt;span class=go&gt;2009-07-16T19:03:00+0100  17621     1712073  34162500&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T14:18:19+0100  7961      1071313  26286593&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T18:23:40+0100  1867      308589   6057915&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T18:53:21+0100  1740      180197   2907388&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T19:00:03+0100  356       152917   928948&lt;/span&gt;
&lt;span class=go&gt;2009-07-17T22:01:57+0100  6611      1159789  25562873&lt;/span&gt;
&lt;span class=go&gt;2009-07-18T13:09:31+0100  1681      164663   2049315&lt;/span&gt;
&lt;span class=go&gt;2009-07-18T13:24:04+0100  834       54025    662134&lt;/span&gt;

&lt;span class=go&gt;Total sent: 13121144, Total received: 295452635&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Gentoo one liners</title><link href="/articles/tips/Gentoo_one_liners.html" rel="alternate"></link><updated>2009-10-09T00:00:00Z</updated><id>/articles/tips/Gentoo_one_liners.html</id><summary type="html">&lt;div id=gentoo-one-liners class=section&gt;
&lt;h1&gt;Gentoo one liners&lt;a title="Permalink to this headline" href=/articles/tips/Gentoo_one_liners.html#gentoo-one-liners class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;On our Linux list at work the topic of &lt;a href=http://www.gentoo.org/ class="reference external"&gt;Gentoo&lt;/a&gt; usage arose again today.
Originally, the topic was about interesting one liners used to maintain a Gentoo
system.  I found myself posting extended replies to some of the questions and
I’m reposting a few of those here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;How do I get &lt;em&gt;just the list&lt;/em&gt; of packages that are installed but not in
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;world&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The constraint here is packages that were installed with &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;--oneshot&lt;/span&gt;&lt;/code&gt;,
or manually removed from &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;/var/lib/portage/world&lt;/span&gt;&lt;/code&gt;, which means that they
will no longer be updated automatically.  I often use this for packages I’m
just playing with, and it appears lots of others do the same.  While the output
of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;emerge&lt;/span&gt; &lt;span class=pre&gt;--pretend&lt;/span&gt; &lt;span class=pre&gt;--depclean&lt;/span&gt;&lt;/code&gt; is all that is really needed, the question
is how to get a list of just the packages.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; emerge --pretend --depclean
&lt;span class=go&gt;&amp;lt;snipped heaps of output&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;gnome-base/orbit&lt;/span&gt;
&lt;span class=go&gt;    selected: 2.14.17&lt;/span&gt;
&lt;span class=go&gt;protected: none&lt;/span&gt;
&lt;span class=go&gt;    omitted: none&lt;/span&gt;

&lt;span class=go&gt;app-text/iso-codes&lt;/span&gt;
&lt;span class=go&gt;    selected: 3.8&lt;/span&gt;
&lt;span class=go&gt;protected: none&lt;/span&gt;
&lt;span class=go&gt;    omitted: none&lt;/span&gt;

&lt;span class=go&gt;dev-libs/dbus-glib&lt;/span&gt;
&lt;span class=go&gt;    selected: 0.76&lt;/span&gt;
&lt;span class=go&gt;protected: none&lt;/span&gt;
&lt;span class=go&gt;    omitted: none&lt;/span&gt;

&lt;span class=go&gt;sys-apps/dbus&lt;/span&gt;
&lt;span class=go&gt;    selected: 1.2.3-r1&lt;/span&gt;
&lt;span class=go&gt;protected: none&lt;/span&gt;
&lt;span class=go&gt;    omitted: none&lt;/span&gt;

&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=s1&gt;'Selected'&lt;/span&gt; packages are slated &lt;span class=k&gt;for&lt;/span&gt; removal.
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; &lt;span class=s1&gt;'Protected'&lt;/span&gt; and &lt;span class=s1&gt;'omitted'&lt;/span&gt; packages will not be removed.

&lt;span class=go&gt;Packages installed:   477&lt;/span&gt;
&lt;span class=go&gt;Packages in world:    86&lt;/span&gt;
&lt;span class=go&gt;Packages in system:   50&lt;/span&gt;
&lt;span class=go&gt;Required packages:    348&lt;/span&gt;
&lt;span class=go&gt;Number to remove:     129&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The output we want can be easily matched with &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt;, and the &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt;
&lt;strong class=command&gt;alias&lt;/strong&gt; below will list just the packages by piping the output through
&lt;a href=http://sed.sourceforge.net/ class="reference external"&gt;sed&lt;/a&gt;.  We can even use the one liner as input to a larger function if we only
want to see top-level packages; that is packages that aren’t listed as
dependencies of other packages:&lt;/p&gt;
&lt;div class=highlight-default&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;alias pkgclean="emerge ----pretend --depclean | sed -n '/^ [a-z]/s,^ ,,p' | sort"

toppkgclean() {
    local depfiles=$(find /var/db/pkg/ -name RDEPEND -o -name PDEPEND)
    local cleanlist=$(pkgclean)
    for package in ${cleanlist}
    do
        LC_ALL=C grep -q ${package} ${depfiles} || echo ${package}
    done
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/207305 class="reference external"&gt;gist #207305&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is it possible to use &lt;strong class=command&gt;bash&lt;/strong&gt; completion to complete package names
for use in &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;package.keywords&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I actually wrote the following little function in reply to a user asking
a similar question in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;#gentoo&lt;/span&gt;&lt;/code&gt; on Freenode a couple of months ago:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arch_unmask&lt;span class=o&gt;()&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
    &lt;span class=nb&gt;local&lt;/span&gt; s &lt;span class=k&gt;done&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; -z &lt;span class=nv&gt;$1&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt;
    &lt;span class=k&gt;then&lt;/span&gt;
        &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;FUNCNAME&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt; &amp;lt;category/package&amp;gt; [arch]"&lt;/span&gt;
        &lt;span class=k&gt;return&lt;/span&gt; &lt;span class=m&gt;1&lt;/span&gt;
    &lt;span class=k&gt;fi&lt;/span&gt;
    &lt;span class=k&gt;for&lt;/span&gt; s in &lt;span class=k&gt;$(&lt;/span&gt;portageq envvar PORTDIR PORTDIR_OVERLAY&lt;span class=k&gt;)&lt;/span&gt;
    &lt;span class=k&gt;do&lt;/span&gt;
        &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; -d &lt;span class=nv&gt;$s&lt;/span&gt;/&lt;span class=nv&gt;$1&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt;
        &lt;span class=k&gt;then&lt;/span&gt;
            &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=nv&gt;$1&lt;/span&gt; &lt;span class=nv&gt;$2&lt;/span&gt; &amp;gt;&amp;gt;/etc/portage/package.keywords/testing
            &lt;span class=k&gt;done&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=m&gt;1&lt;/span&gt;
            &lt;span class=nb&gt;break&lt;/span&gt;
        &lt;span class=k&gt;fi&lt;/span&gt;
    &lt;span class=k&gt;done&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=o&gt;[[&lt;/span&gt; -z &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;done&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=o&gt;]]&lt;/span&gt;
    &lt;span class=k&gt;then&lt;/span&gt;
        &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"Doesn't exist ‘&lt;/span&gt;&lt;span class=nv&gt;$1&lt;/span&gt;&lt;span class=s2&gt;’"&lt;/span&gt;
        &lt;span class=k&gt;return&lt;/span&gt; &lt;span class=m&gt;1&lt;/span&gt;
    &lt;span class=k&gt;fi&lt;/span&gt;
&lt;span class=o&gt;}&lt;/span&gt;
&lt;span class=nb&gt;complete&lt;/span&gt; -F _emerge arch_unmask
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/207306 class="reference external"&gt;gist #207306&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re using our Gentoo boxes at the office the function will be much
faster if you replace the call to &lt;strong class=command&gt;portageq&lt;/strong&gt; by
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/var/lib/repos/*&lt;/span&gt;&lt;/code&gt;, as our package trees are always installed there.  The
&lt;strong class=command&gt;portageq&lt;/strong&gt; call is mainly there for users who use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/usr/portage&lt;/span&gt;&lt;/code&gt;
and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/usr/local/portage&lt;/span&gt;&lt;/code&gt;, or other such monstrosities.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The final question I looked at was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is there an easy way to clean all the old modules from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/lib/modules&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Assuming you are trying to remove all modules that don’t belong to the current
kernel this is very easy using &lt;strong class=command&gt;bash&lt;/strong&gt;’s &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;extglob&lt;/span&gt;&lt;/code&gt; support.  It may
need to be enabled in your session, you can test whether it is enabled with
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;shopt&lt;/span&gt; &lt;span class=pre&gt;extglob&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; /lib/modules/*
&lt;span class=go&gt;/lib/modules/2.6.31.1 /lib/modules/2.6.31.2-jr2 /lib/modules/2.6.31.3-mk1&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; /lib/modules/!&lt;span class=o&gt;(&lt;/span&gt;&lt;span class=k&gt;$(&lt;/span&gt;uname -r&lt;span class=k&gt;)&lt;/span&gt;&lt;span class=o&gt;)&lt;/span&gt;
&lt;span class=go&gt;/lib/modules/2.6.31.1 /lib/modules/2.6.31.2-jr2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;!($(uname&lt;/span&gt; &lt;span class=pre&gt;-r))&lt;/span&gt;&lt;/code&gt; syntax tells bash to match all but &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;2.6.31.3-mk1&lt;/span&gt;&lt;/code&gt; (the
output of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;uname&lt;/span&gt; &lt;span class=pre&gt;-r&lt;/span&gt;&lt;/code&gt; on my system), there are plenty of other uses for
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;extglob&lt;/span&gt;&lt;/code&gt; and the &lt;a href=http://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching class="reference external"&gt;documentation&lt;/a&gt; has examples.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Importing gmail filters in mutt</title><link href="/articles/tips/Importing_gmail_filters_in_mutt.html" rel="alternate"></link><updated>2009-10-08T00:00:00Z</updated><id>/articles/tips/Importing_gmail_filters_in_mutt.html</id><summary type="html">&lt;div id=importing-gmail-filters-in-mutt class=section&gt;
&lt;h1&gt;Importing gmail filters in mutt&lt;a title="Permalink to this headline" href=/articles/tips/Importing_gmail_filters_in_mutt.html#importing-gmail-filters-in-mutt class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;On our company’s Linux list Ryan Abbott is preparing to move to &lt;a href=http://www.mutt.org/ class="reference external"&gt;mutt&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I have some user filters setup in &lt;a href=https://mail.google.com class="reference external"&gt;gmail&lt;/a&gt;, and I’m wondering if there some
way to make mutt use them?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Ryan has some filters set up for “premium” users who should be tagged in
a special way in the mail display so that they are much more noticeable.  Google
do support &lt;a href=http://gmailblog.blogspot.com/2009/03/new-in-labs-filter-importexport.html class="reference external"&gt;exporting filters&lt;/a&gt; now, and conveniently it is in well documented
format based on &lt;a href=http://www.atomenabled.org/ class="reference external"&gt;Atom&lt;/a&gt;.  An example export, gleaned from Ryan but with personal
data removed, follows:&lt;/p&gt;
&lt;div class=highlight-xml&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=cp&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&lt;/span&gt;&lt;span class=nt&gt;&amp;lt;feed&lt;/span&gt; &lt;span class=na&gt;xmlns=&lt;/span&gt;&lt;span class=s&gt;'http://www.w3.org/2005/Atom'&lt;/span&gt; &lt;span class=na&gt;xmlns:apps=&lt;/span&gt;&lt;span class=s&gt;'http://schemas.google.com/apps/2006'&lt;/span&gt;&lt;span class=nt&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Priority filter&lt;span class=nt&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filters:1255006471524,31130756565258&lt;span class=nt&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-10-02T12:04:00Z&lt;span class=nt&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;author&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Ryan Abbott&lt;span class=nt&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;email&amp;gt;&lt;/span&gt;rabbott@example.com&lt;span class=nt&gt;&amp;lt;/email&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;uri&amp;gt;&lt;/span&gt;http://rabbott.example.com&lt;span class=nt&gt;&amp;lt;/uri&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;category&lt;/span&gt; &lt;span class=na&gt;term=&lt;/span&gt;&lt;span class=s&gt;'filter'&lt;/span&gt;&lt;span class=nt&gt;&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Joe Bloggs&lt;span class=nt&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filter:1255006471524&lt;span class=nt&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-10-01T09:23:11Z&lt;span class=nt&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class=na&gt;name=&lt;/span&gt;&lt;span class=s&gt;'from'&lt;/span&gt; &lt;span class=na&gt;value=&lt;/span&gt;&lt;span class=s&gt;'joe@example.com'&lt;/span&gt;&lt;span class=nt&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class=na&gt;name=&lt;/span&gt;&lt;span class=s&gt;'label'&lt;/span&gt; &lt;span class=na&gt;value=&lt;/span&gt;&lt;span class=s&gt;'HiPri'&lt;/span&gt;&lt;span class=nt&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;category&lt;/span&gt; &lt;span class=na&gt;term=&lt;/span&gt;&lt;span class=s&gt;'filter'&lt;/span&gt;&lt;span class=nt&gt;&amp;gt;&amp;lt;/category&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;title&amp;gt;&lt;/span&gt;John Doe&lt;span class=nt&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;id&amp;gt;&lt;/span&gt;tag:mail.google.com,2008:filter:31130756565258&lt;span class=nt&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;updated&amp;gt;&lt;/span&gt;2009-09-23T14:59:45Z&lt;span class=nt&gt;&amp;lt;/updated&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class=na&gt;name=&lt;/span&gt;&lt;span class=s&gt;'from'&lt;/span&gt; &lt;span class=na&gt;value=&lt;/span&gt;&lt;span class=s&gt;'johndoe@example.com'&lt;/span&gt;&lt;span class=nt&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=nt&gt;&amp;lt;apps:property&lt;/span&gt; &lt;span class=na&gt;name=&lt;/span&gt;&lt;span class=s&gt;'label'&lt;/span&gt; &lt;span class=na&gt;value=&lt;/span&gt;&lt;span class=s&gt;'HiPri'&lt;/span&gt;&lt;span class=nt&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=nt&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
&lt;span class=nt&gt;&amp;lt;/feed&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The exported filter is actually quite nice and we could just pull the email
addresses out with &lt;a href=http://sed.sourceforge.net/ class="reference external"&gt;sed&lt;/a&gt;:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; sed -n &lt;span class=s2&gt;"/name='from'/s,^.*value='\([^']\+\)'.*&lt;/span&gt;$&lt;span class=s2&gt;,\1,p"&lt;/span&gt; filter.xml
&lt;span class=go&gt;joe@example.com&lt;/span&gt;
&lt;span class=go&gt;johndoe@example.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class=admonition-title&gt;Warning&lt;/p&gt;
&lt;p&gt;You shouldn’t parse &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; with tools like &lt;strong class=command&gt;sed&lt;/strong&gt; or &lt;strong class=command&gt;awk&lt;/strong&gt;.
There are plenty of &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; processing tools available, and unlike
&lt;strong class=command&gt;sed&lt;/strong&gt; they shouldn’t fail with files that contain namespaces or
other &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt; features.  Now I’ve said that, carry on using &lt;strong class=command&gt;sed&lt;/strong&gt;
like I often do ;)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once we have some way of getting at the email addresses we just need to add the
filters to &lt;strong class=command&gt;mutt&lt;/strong&gt;.  For those of us who use &lt;strong class=command&gt;mutt&lt;/strong&gt; the normal
approach to prioritising in the gmail way is to use either &lt;a href=http://www.mutt.org/doc/manual/manual-3.html#ss3.7 class="reference external"&gt;colouring&lt;/a&gt; or
&lt;a href=http://www.mutt.org/doc/manual/manual-3.html#ss3.22 class="reference external"&gt;scoring&lt;/a&gt;:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;color index brightgreen default ~fjoe@example.com
score ~fjohndoe@example.com +20
set index_format="%Z %2N %?H?%-16.12H&amp;amp;%D? %-16.16F  %s"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img src=/_images/2009-10-08-mutt_screenshot.png alt="colouring and scoring in mutt"&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;color&lt;/span&gt;&lt;/code&gt; example sets all mail from the fictitious Joe Bloggs in the mail
index to use a bright green foreground and the default background colour.  The
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;score&lt;/span&gt;&lt;/code&gt; example adds another 20 points to mail from John Doe, we add it
instead of setting it directly is so that we can make use cumulative scoring.
We must make sure we include &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;%N&lt;/span&gt;&lt;/code&gt; in our &lt;a href=http://www.mutt.org/doc/manual/manual-6.html#index_format class="reference external"&gt;index_format&lt;/a&gt; setting to see the
scores in the mail index, the above &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;index_format&lt;/span&gt;&lt;/code&gt; setting is the one
I currently use and it can be seen in the screenshot above.&lt;/p&gt;
&lt;p&gt;I’m sure we’d prefer to automate the generation of the rules, and we can
quickly generate a list for &lt;strong class=command&gt;mutt&lt;/strong&gt; using our favourite &lt;abbr title="Extensible Markup Language"&gt;XML&lt;/abbr&gt;
processing tool.  Today I’m using &lt;a href=http://www.ruby-lang.org/ class="reference external"&gt;ruby&lt;/a&gt;, because I know it is installed on
Ryan’s system.  We’re going to keep the identifier data from the Google export
just in case we decide to export our rules from &lt;strong class=command&gt;mutt&lt;/strong&gt; at some point
in the future:&lt;/p&gt;
&lt;div class=highlight-ruby&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;require&lt;/span&gt; &lt;span class=s1&gt;'rexml/document'&lt;/span&gt;
&lt;span class=n&gt;doc&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=no&gt;REXML&lt;/span&gt;&lt;span class=o&gt;::&lt;/span&gt;&lt;span class=no&gt;Document&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;new&lt;/span&gt; &lt;span class=no&gt;File&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;new&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=no&gt;ARGV&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=o&gt;]&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;

&lt;span class=n&gt;doc&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;elements&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;each&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'feed/entry'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt; &lt;span class=k&gt;do&lt;/span&gt; &lt;span class=o&gt;|&lt;/span&gt;&lt;span class=n&gt;entry&lt;/span&gt;&lt;span class=o&gt;|&lt;/span&gt;
    &lt;span class=nb&gt;id&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;entry&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;elements&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=s2&gt;"id"&lt;/span&gt;&lt;span class=o&gt;].&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;
    &lt;span class=nb&gt;name&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;entry&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;elements&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=s2&gt;"title"&lt;/span&gt;&lt;span class=o&gt;].&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;
    &lt;span class=n&gt;addy&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;entry&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;elements&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=s2&gt;"apps:property"&lt;/span&gt;&lt;span class=o&gt;].&lt;/span&gt;&lt;span class=n&gt;attributes&lt;/span&gt;&lt;span class=o&gt;[&lt;/span&gt;&lt;span class=s2&gt;"value"&lt;/span&gt;&lt;span class=o&gt;]&lt;/span&gt;
    &lt;span class=nb&gt;puts&lt;/span&gt; &lt;span class=s2&gt;"# &lt;/span&gt;&lt;span class=si&gt;#{&lt;/span&gt;&lt;span class=nb&gt;name&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;, &lt;/span&gt;&lt;span class=si&gt;#{&lt;/span&gt;&lt;span class=nb&gt;id&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=nb&gt;puts&lt;/span&gt; &lt;span class=s2&gt;"score ~f&lt;/span&gt;&lt;span class=si&gt;#{&lt;/span&gt;&lt;span class=n&gt;addy&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt; 20"&lt;/span&gt;
&lt;span class=k&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/205052 class="reference external"&gt;gist #205052&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Calling that script on the example data from above yields a small
&lt;strong class=command&gt;mutt&lt;/strong&gt; configuration file that we can include in our mutt setup by
adding &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;source&lt;/span&gt; &lt;span class=pre&gt;&amp;lt;file_location&amp;gt;&lt;/span&gt;&lt;/code&gt; to our &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.muttrc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Joe Bloggs, tag:mail.google.com,2008:filter:1255006471524
score ~fjoe@example.com -20
# John Doe, tag:mail.google.com,2008:filter:31130756565258
score ~fjohndoe@example.com -20
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few years ago I posted some of tricks and tips I use for &lt;a href=http://www.jnrowe.ukfsn.org/articles/configs/mutt.html class="reference external"&gt;configuring mutt&lt;/a&gt;,
which include some neat ways to colour and score mail on a per-folder basis.  It
may be worth taking a quick look at if you use folders to organise your mails.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>&lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; as a task manager</title><link href="/articles/tips/BTS_as_a_task_manager.html" rel="alternate"></link><updated>2009-10-07T00:00:00Z</updated><id>/articles/tips/BTS_as_a_task_manager.html</id><summary type="html">&lt;div id=bts-as-a-task-manager class=section&gt;
&lt;h1&gt;&lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; as a task manager&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#bts-as-a-task-manager class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tom Marshall asks over the cooler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What apps do you guys use to manage your todo list(s)?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this may be an incredibly personal thing but I prefer to use a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt;
for local task management, the idea of just adding random lines of text to
a file frankly baffles me.  I love the filtering, ordering and editing
capabilities I get from using a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; for this.&lt;/p&gt;
&lt;p&gt;Now, I’m not suggesting installing something complex and convoluted like
&lt;a href=http://www.bugzilla.org class="reference external"&gt;Bugzilla&lt;/a&gt; just for keeping track of your shopping lists or remembering to
charge the spare battery for your phone.  There are quite a few lightweight
systems available, &lt;a href=http://ditz.rubyforge.org class="reference external"&gt;ditz&lt;/a&gt; and &lt;a href=http://bugseverywhere.org/be/show/HomePage class="reference external"&gt;Bugs Everywhere&lt;/a&gt; being two examples.  There is
also a &lt;strong class=command&gt;ditz&lt;/strong&gt; inspired project, written in &lt;a href=http://www.python.org class="reference external"&gt;Python&lt;/a&gt;, called &lt;a href=https://github.com/mw44118/pitz class="reference external"&gt;pitz&lt;/a&gt; that
is in active development.  And &lt;a href=http://www.fossil-scm.org/index.html/doc/tip/www/index.wiki class="reference external"&gt;fossil&lt;/a&gt; is pretty cool if you’re looking for
a standalone wiki, &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; and &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; in one.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re a &lt;a href=http://www.gentoo.org/ class="reference external"&gt;Gentoo&lt;/a&gt; user you can install &lt;strong class=command&gt;ditz&lt;/strong&gt; using the ebuild
from my &lt;a href=https://github.com/JNRowe/jnrowe-misc/ class="reference external"&gt;overlay&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I’m currently in the process of switching away from &lt;abbr title="Bugs Everywhere"&gt;be&lt;/abbr&gt;, but it can serve as an example quite well.  Unfortunately, there
are no releases currently being made so you will need to install a recent
version of &lt;strong class=command&gt;bzr&lt;/strong&gt; to download it.  Don’t worry though you aren’t
restricted to &lt;strong class=command&gt;bzr&lt;/strong&gt; to use it.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;Colleagues from work can grab Dan’s &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;be&lt;/span&gt;&lt;/code&gt; branch directly from our package
repository, it doesn’t require &lt;strong class=command&gt;bzr&lt;/strong&gt; and it fixes quite a few usage
problems(it is also much faster).  Just remember that it has diverged
massively from the upstream code, so you won’t be able to use it to work with
bug databases created by the upstream project.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The following examples use an older version of &lt;strong class=command&gt;be&lt;/strong&gt; that you can
download as a &lt;a href=http://www.jnrowe.ukfsn.org/_static/be-0.0.193.tar.bz2 class="reference external"&gt;tarball&lt;/a&gt; and doesn’t require &lt;strong class=command&gt;bzr&lt;/strong&gt;.&lt;/p&gt;
&lt;div id=setting-be-up class=section&gt;
&lt;h2&gt;Setting &lt;strong class=command&gt;be&lt;/strong&gt; up&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#setting-be-up class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we use &lt;strong class=command&gt;be&lt;/strong&gt; we must prepare it.  In the example that follows
we’re going to create a new directory under the control of &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt;, and tell
&lt;strong class=command&gt;be&lt;/strong&gt; we wish to use it in there:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; mkdir be_test&lt;span class=p&gt;;&lt;/span&gt; &lt;span class=nb&gt;cd&lt;/span&gt; be_test
&lt;span class=gp&gt;$&lt;/span&gt; git init
&lt;span class=go&gt;Initialized empty Git repository in /home/jay/Desktop/be_test/.git/&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; be set-root
&lt;span class=go&gt;Using git for revision control.&lt;/span&gt;
&lt;span class=go&gt;Directory initialized.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=filing-bugs class=section&gt;
&lt;h2&gt;Filing bugs&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#filing-bugs class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can easily file new bugs, in the next snippet we can see two bugs being
filed.  Bugs are identified by a &lt;abbr title="Universally Unique IDentifier"&gt;UUID&lt;/abbr&gt;,
and to operate on bugs we only need to use a unique prefix of the identifier as
can be seen below.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; be new &lt;span class=s2&gt;"This is a test bug"&lt;/span&gt;
&lt;span class=go&gt;Created bug with ID a09&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; be assign a09
&lt;span class=gp&gt;$&lt;/span&gt; git commit -m&lt;span class=s2&gt;"Commit bug a09."&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; be new &lt;span class=s2&gt;"This is a second bug"&lt;/span&gt;
&lt;span class=go&gt;Created bug with ID ec4&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; be severity ec4 serious
&lt;span class=gp&gt;$&lt;/span&gt; be comment ec4 &lt;span class=s2&gt;"Comments are easy"&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; git commit -m&lt;span class=s2&gt;"Commit bug ec4."&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We now have two bugs filed.  Bug &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;a09&lt;/span&gt;&lt;/code&gt; is self-assigned, while &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ec4&lt;/span&gt;&lt;/code&gt; has yet
to be assigned.  As we didn’t set a severity level for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;a09&lt;/span&gt;&lt;/code&gt; it is set to the
default of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;minor&lt;/span&gt;&lt;/code&gt;.  A comment was also made on bug &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ec4&lt;/span&gt;&lt;/code&gt;, and if we hadn’t
specified the comment on the command line it would open our default editor to
add the comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=querying-bugs class=section&gt;
&lt;h2&gt;Querying bugs&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#querying-bugs class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; be list
&lt;span class=go&gt;ec4:os: This is a second bug&lt;/span&gt;
&lt;span class=go&gt;a09:om: This is a test bug&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong class=command&gt;be list&lt;/strong&gt; output consists of three fields separated by colons and
they are: bug identifier, status and title.  The first character of the  status
field is an &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;o&lt;/span&gt;&lt;/code&gt; telling us the bugs are marked as open, and the second
character is the severity indicator(where the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;s&lt;/span&gt;&lt;/code&gt; for bug &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ec4&lt;/span&gt;&lt;/code&gt; tells us it
is marked as serious).&lt;/p&gt;
&lt;p&gt;You can also limit the bugs shown with &lt;strong class=command&gt;be list&lt;/strong&gt; by specifying
severities with &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/using/cmdline.html#cmdoption-v class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-v&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  Or bugs that are assigned to a certain user with
&lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/pickletools.html#cmdoption-pickletools-a class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-a&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, and you can use &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/using/cmdline.html#cmdoption-m class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-m&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to list bugs assigned to yourself.&lt;/p&gt;
&lt;p&gt;When we wish to inspect individual bugs, to see there full status or comments,
we use the &lt;strong class=command&gt;be show&lt;/strong&gt; command:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; be show a09
&lt;span class=go&gt;        ID : a0912cd6-1eae-490c-8e56-5f532242394b&lt;/span&gt;
&lt;span class=go&gt;Short name : a09&lt;/span&gt;
&lt;span class=go&gt;    Severity : minor&lt;/span&gt;
&lt;span class=go&gt;    Status : open&lt;/span&gt;
&lt;span class=go&gt;    Assigned : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;    Target :&lt;/span&gt;
&lt;span class=go&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:06 +0000)&lt;/span&gt;
&lt;span class=go&gt;This is a test bug&lt;/span&gt;

&lt;span class=gp&gt;$&lt;/span&gt; be show ec4
&lt;span class=go&gt;        ID : ec4438ca-a330-4345-b073-43c768f7e9b7&lt;/span&gt;
&lt;span class=go&gt;Short name : ec4&lt;/span&gt;
&lt;span class=go&gt;    Severity : serious&lt;/span&gt;
&lt;span class=go&gt;    Status : open&lt;/span&gt;
&lt;span class=go&gt;    Assigned :&lt;/span&gt;
&lt;span class=go&gt;    Target :&lt;/span&gt;
&lt;span class=go&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:17 +0000)&lt;/span&gt;
&lt;span class=go&gt;This is a second bug&lt;/span&gt;
&lt;span class=go&gt;--------- Comment ---------&lt;/span&gt;
&lt;span class=go&gt;Name: ec4:1&lt;/span&gt;
&lt;span class=go&gt;From: James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;Date: Wed, 07 Oct 2009 13:11:53 +0000&lt;/span&gt;

&lt;span class=go&gt;Comments are easy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=editing-bugs class=section&gt;
&lt;h2&gt;Editing bugs&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#editing-bugs class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can change the bug status with &lt;strong class=command&gt;be status&lt;/strong&gt;, see the output from
&lt;strong class=command&gt;be help status&lt;/strong&gt; for available values.&lt;/p&gt;
&lt;p&gt;Once bugs are marked as fixed they no longer show up in the default
&lt;strong class=command&gt;be list&lt;/strong&gt; output, but we can still view them with &lt;strong class=command&gt;be show&lt;/strong&gt;
or by calling &lt;strong class=command&gt;be list&lt;/strong&gt; with filtering options.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; be status ec4 fixed
&lt;span class=gp&gt;$&lt;/span&gt; be list
&lt;span class=go&gt;a09:om: This is a test bug&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; be show ec4
&lt;span class=go&gt;        ID : ec4438ca-a330-4345-b073-43c768f7e9b7&lt;/span&gt;
&lt;span class=go&gt;Short name : ec4&lt;/span&gt;
&lt;span class=go&gt;    Severity : serious&lt;/span&gt;
&lt;span class=go&gt;    Status : fixed&lt;/span&gt;
&lt;span class=go&gt;    Assigned :&lt;/span&gt;
&lt;span class=go&gt;    Target :&lt;/span&gt;
&lt;span class=go&gt;    Creator : James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;    Created : Wed, 07 Oct 2009 14:11 (Wed, 07 Oct 2009 13:11:17 +0000)&lt;/span&gt;
&lt;span class=go&gt;This is a second bug&lt;/span&gt;
&lt;span class=go&gt;--------- Comment ---------&lt;/span&gt;
&lt;span class=go&gt;Name: ec4:1&lt;/span&gt;
&lt;span class=go&gt;From: James Rowe &amp;lt;jnrowe@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class=go&gt;Date: Wed, 07 Oct 2009 13:11:53 +0000&lt;/span&gt;

&lt;span class=go&gt;Comments are easy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=conclusions class=section&gt;
&lt;h2&gt;Conclusions&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#conclusions class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That really is all it takes to use &lt;strong class=command&gt;be&lt;/strong&gt;, and that is why I find
a &lt;abbr title="Bug Tracking System"&gt;BTS&lt;/abbr&gt; to be a nice solution for managing all kinds of random tasks.  I have
a Bugs Everywhere database in my home directory that over the past year has
stored just over 600 bugs from shopping lists to actual bugs with my
configurations files, and I’ve apparently managed to complete 95% of them!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=bonus-material class=section&gt;
&lt;h2&gt;Bonus material&lt;a title="Permalink to this headline" href=/articles/tips/BTS_as_a_task_manager.html#bonus-material class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the little tricks I like to do is override the &lt;strong class=command&gt;cd&lt;/strong&gt; command to
automatically display the bug list when I enter a directory that contains a Bugs
Everywhere database, and it is very simple to do:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd&lt;span class=o&gt;()&lt;/span&gt; &lt;span class=o&gt;{&lt;/span&gt;
    &lt;span class=nb&gt;local&lt;/span&gt; retval
    &lt;span class=nb&gt;builtin&lt;/span&gt; &lt;span class=nb&gt;cd&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=nv&gt;$@&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=nv&gt;retval&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=nv&gt;$?&lt;/span&gt;
    &lt;span class=o&gt;[[&lt;/span&gt; &lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;retval&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=m&gt;0&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; -d .be &lt;span class=o&gt;]]&lt;/span&gt; &lt;span class=o&gt;&amp;amp;&amp;amp;&lt;/span&gt; be list
    &lt;span class=k&gt;return&lt;/span&gt; &lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;retval&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;
&lt;span class=o&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/204172 class="reference external"&gt;gist #204172&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It could be improved to take settings to filter the bug list or all manner of
other cool things, but that is why it has a “See gist #x” label next to it.
Feel free to post updates to the gist!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Finding a window’s owner</title><link href="/articles/tips/Finding_a_windows_owner.html" rel="alternate"></link><updated>2009-10-06T00:00:00Z</updated><id>/articles/tips/Finding_a_windows_owner.html</id><summary type="html">&lt;div id=finding-a-windows-owner class=section&gt;
&lt;h1&gt;Finding a window’s owner&lt;a title="Permalink to this headline" href=/articles/tips/Finding_a_windows_owner.html#finding-a-windows-owner class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Rach Holmes asks on our Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;How do I find out what app keeps opening that annoying window in gnome?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Jack McIntyre made a couple of outstanding correct guesses, but predictably Rach
still wanted to know a generic solution and I offer this tip in response.&lt;/p&gt;
&lt;div id=the-easy-way class=section&gt;
&lt;h2&gt;The easy way&lt;a title="Permalink to this headline" href=/articles/tips/Finding_a_windows_owner.html#the-easy-way class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many windows define a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;WM_COMMAND&lt;/span&gt;&lt;/code&gt; property that is set to the command name of
the application, if that exists all we have to do is read it:&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; xprop &lt;span class=p&gt;|&lt;/span&gt; grep WM_COMMAND
&lt;span class=go&gt;WM_COMMAND(STRING) = { "urxvt", "-cd", "/home/jay/Desktop" }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, not all applications set this property.  Examples of applications that
don’t set this property include &lt;a href=http://www.mozilla.com/firefox class="reference external"&gt;firefox&lt;/a&gt; and &lt;a href=http://www.gimp.org/ class="reference external"&gt;gimp&lt;/a&gt;.  In fact, many of the modern
applications you find on desktop systems don’t set this property at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=the-other-way class=section&gt;
&lt;h2&gt;The other way&lt;a title="Permalink to this headline" href=/articles/tips/Finding_a_windows_owner.html#the-other-way class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html class="reference external"&gt;EWMH&lt;/a&gt;, the Extended Window Manager Hints standard, defines a property called
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;_NET_WM_PID&lt;/span&gt;&lt;/code&gt; that, if defined, is the process id of the application that
opened the window.  We have a couple of options to access that property, my
favourite would be &lt;a href=http://sweb.cz/tripie/utils/wmctrl/ class="reference external"&gt;wmctrl&lt;/a&gt; and another would be &lt;a href=http://www.xfree86.org/current/xprop.1.html class="reference external"&gt;xprop&lt;/a&gt; which is often installed
by default.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; wmctrl -lp
&lt;span class=go&gt;0x01200003  2 13398  kate 2009-10-06-TaD-Finding_a_windows_owner.textile [+] - gvim&lt;/span&gt;
&lt;span class=go&gt;0x01000006  3 9992   kate Irssi: [JNR___@freenode] [#github]&lt;/span&gt;
&lt;span class=go&gt;0x00c00005  1 10134  kate SpotMe - Opera&lt;/span&gt;
&lt;span class=go&gt;0x00600019  0 9992   kate jay@kate:~/Desktop/jnrowe.github.io&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; xprop &lt;span class=p&gt;|&lt;/span&gt; awk &lt;span class=s1&gt;'/_NET_WM_PID/ {print $NF}'&lt;/span&gt;
&lt;span class=go&gt;9992&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; tr &lt;span class=s1&gt;'\000'&lt;/span&gt;  &lt;span class=s1&gt;' '&lt;/span&gt; &amp;lt; /proc/9992/cmdline
&lt;span class=go&gt;/usr/bin/urxvtd -q -f -o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;strong class=command&gt;wmctrl&lt;/strong&gt; output has five space aligned columns.  The first is the
window id, the second the desktop is visible on, the third is the process id,
the fourth is the client machine and the fifth is the window’s title string.
And with the &lt;strong class=command&gt;xprop&lt;/strong&gt; example we must select a window with the mouse
when calling &lt;strong class=command&gt;xprop&lt;/strong&gt;, and then we pluck the process id from the
output.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;cmdline&lt;/span&gt;&lt;/code&gt; value for the process from &lt;a href=http://blogs.sun.com/eschrock/entry/the_power_of_proc class="reference external"&gt;procfs&lt;/a&gt; is finally read.  The
&lt;strong class=command&gt;tr&lt;/strong&gt; command is needed because options are separated by null
terminators.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=the-problems class=section&gt;
&lt;h2&gt;The problems&lt;a title="Permalink to this headline" href=/articles/tips/Finding_a_windows_owner.html#the-problems class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back to the original question and Rach was looking for a way to stop the window
from showing up, the immediate response to the annoying window problem is to
find its process id and send it a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;SIGTERM&lt;/span&gt;&lt;/code&gt;.  It seems like a reasonable idea,
but I’ve been choosing the &lt;strong class=command&gt;urxvtd&lt;/strong&gt; examples on purpose to prove
a point.&lt;/p&gt;
&lt;p&gt;&lt;strong class=command&gt;urxvtd&lt;/strong&gt; is the terminal daemon provided by &lt;a href=http://software.schmorp.de/ class="reference external"&gt;rxvt-unicode&lt;/a&gt;, all
terminals that are spawned by it will have the same &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;_NET_WM_PID&lt;/span&gt;&lt;/code&gt; value and
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;WM_COMMAND&lt;/span&gt;&lt;/code&gt; string.  This isn’t just an issue with &lt;strong class=command&gt;urxvtd&lt;/strong&gt; either,
it happens with all applications that operate in this way.  Sending
a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;SIGTERM&lt;/span&gt;&lt;/code&gt; to every terminal opened by &lt;strong class=command&gt;urxvtd&lt;/strong&gt; probably isn’t what
we would want to do, so you should always think very carefully before sending
terminate signals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Sharing Xresources between systems</title><link href="/articles/tips/Sharing_Xresources_between_systems.html" rel="alternate"></link><updated>2009-10-05T00:00:00Z</updated><id>/articles/tips/Sharing_Xresources_between_systems.html</id><summary type="html">&lt;div id=sharing-xresources-between-systems class=section&gt;
&lt;h1&gt;Sharing Xresources between systems&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#sharing-xresources-between-systems class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In amongst the rants in our watercooler channel at work comes this question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;So then, how do custom settings in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;Xresources&lt;/span&gt;&lt;/code&gt; work if you share your
home directory between machines?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The question arises from a much larger topic concerning keeping your home
directory in a &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; repository.  The issue Carl is having is that he needs to
use different options on different machines and doesn’t relish the idea of
having to pull and rebase branches just to keep files in sync.  Of course, he
doesn’t have to do that and that is the point of this tip.&lt;/p&gt;
&lt;div id=basic-conditionals class=section&gt;
&lt;h2&gt;Basic conditionals&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#basic-conditionals class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With great foresight the authors of &lt;a href=http://www.xfree86.org/current/xrdb.1.html class="reference external"&gt;xrdb&lt;/a&gt; decided that our &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;Xresources&lt;/span&gt;&lt;/code&gt; file
should be preprocessed before it is used, the default preprocessor is
&lt;strong class=command&gt;cpp&lt;/strong&gt;.  On most of our systems at work, and likely most Linux systems
in general, &lt;strong class=command&gt;cpp&lt;/strong&gt; is &lt;a href=http://gcc.gnu.org/onlinedocs/gcc-4.4.1/cpp/ class="reference external"&gt;GNU cpp&lt;/a&gt;.  Don’t worry about the size of the
manual though, the interesting features are easy to understand and use.  Let’s
look at trimmed example from my configuration file:&lt;/p&gt;
&lt;div class=highlight-c&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=cp&gt;#ifndef FIXED_FONT&lt;/span&gt;
    &lt;span class=cp&gt;#define FIXED_FONT xft:Inconsolata:pixelsize=14:antialias=false&lt;/span&gt;
&lt;span class=cp&gt;#endif&lt;/span&gt;
&lt;span class=cp&gt;#ifndef BOLD_FIXED_FONT&lt;/span&gt;
    &lt;span class=cp&gt;#define BOLD_FIXED_FONT FIXED_FONT:bold&lt;/span&gt;
&lt;span class=cp&gt;#endif&lt;/span&gt;

&lt;span class=n&gt;urxvt&lt;/span&gt;&lt;span class=p&gt;.&lt;/span&gt;&lt;span class=nl&gt;font&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;FIXED_FONT&lt;/span&gt;
&lt;span class=n&gt;urxvt&lt;/span&gt;&lt;span class=p&gt;.&lt;/span&gt;&lt;span class=nl&gt;boldFont&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;BOLD_FIXED_FONT&lt;/span&gt;

&lt;span class=n&gt;irssi&lt;/span&gt;&lt;span class=p&gt;.&lt;/span&gt;&lt;span class=nl&gt;font&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;FIXED_FONT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/202712 class="reference external"&gt;gist #202712&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This small snippet sets a couple of default fonts that we can reference
throughout our resource file as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;FIXED_FONT&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;BOLD_FIXED_FONT&lt;/span&gt;&lt;/code&gt;.  This
way we can easily change the value in one place and it trickles down to all our
programs.  Or we can define different options at runtime by specifying values
to &lt;strong class=command&gt;xrdb&lt;/strong&gt;, such as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;xrdb&lt;/span&gt; &lt;span class=pre&gt;-DFIXED_FONT=xft:Monospace:pixelsize=10&lt;/span&gt;&lt;/code&gt;.
And don’t worry, &lt;strong class=command&gt;cpp&lt;/strong&gt; is smart enough to cope with the use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;=&lt;/span&gt;&lt;/code&gt; in
our definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=per-system-conditionals class=section&gt;
&lt;h2&gt;Per system conditionals&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#per-system-conditionals class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On one system I use &lt;a href=http://www.levien.com/type/myfonts/inconsolata.html class="reference external"&gt;Inconsolata&lt;/a&gt; is not installed, so the configuration above
wouldn’t work on it.  &lt;strong class=command&gt;xrdb&lt;/strong&gt; gives us a way around the problem though,
it defines a set of symbols we can use including one to test the system’s
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;hostname&lt;/span&gt;&lt;/code&gt;.  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;nebula&lt;/span&gt;&lt;/code&gt;, the system that doesn’t have Inconsolata, does have
&lt;a href=http://www.is-vn.bg/hamster/ class="reference external"&gt;terminus&lt;/a&gt; and I can use that on there with a couple of small changes.&lt;/p&gt;
&lt;div class=highlight-c&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=cp&gt;#ifndef FIXED_FONT&lt;/span&gt;
    &lt;span class=cp&gt;#ifdef SRVR_nebula&lt;/span&gt;
        &lt;span class=cp&gt;#define FIXED_FONT xft:Terminus:pixelsize=14:antialias=false&lt;/span&gt;
    &lt;span class=cp&gt;#else&lt;/span&gt;
        &lt;span class=cp&gt;#define FIXED_FONT xft:Inconsolata:pixelsize=14:antialias=false&lt;/span&gt;
    &lt;span class=cp&gt;#endif&lt;/span&gt;
&lt;span class=cp&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/202713 class="reference external"&gt;gist #202713&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;As we’re using &lt;a href=http://xorg.freedesktop.org/ class="reference external"&gt;X11&lt;/a&gt;’s &lt;strong class=command&gt;xrdb&lt;/strong&gt; it is network aware, it defines
&lt;code class="samp docutils literal"&gt;&lt;span class=pre&gt;SRVR_&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;name&lt;/span&gt;&lt;/em&gt;&lt;/code&gt; for the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;X&lt;/span&gt;&lt;/code&gt; server name and &lt;code class="samp docutils literal"&gt;&lt;span class=pre&gt;CLNT_&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;name&lt;/span&gt;&lt;/em&gt;&lt;/code&gt; for the
client name.  Using these it is easy to configure systems where the server
and clients are on different machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=conditionals-for-server-options class=section&gt;
&lt;h2&gt;Conditionals for server options&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#conditionals-for-server-options class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also change configured settings based on the extensions loaded in to the
server, for example to disable the screensaver in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;muxi&lt;/span&gt;&lt;/code&gt; if the &lt;abbr title="Display Power Management Signalling"&gt;DPMS&lt;/abbr&gt; extension is supported we’d test for
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;EXT_DPMS&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-c&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=cp&gt;#ifdef EXT_DPMS&lt;/span&gt;
    &lt;span class=n&gt;muxi&lt;/span&gt;&lt;span class=p&gt;.&lt;/span&gt;&lt;span class=nl&gt;screensaver&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=nb&gt;false&lt;/span&gt;
&lt;span class=cp&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/202714 class="reference external"&gt;gist #202714&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=testing-your-resource-files class=section&gt;
&lt;h2&gt;Testing your resource files&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#testing-your-resource-files class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you’re testing your own &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.Xresources&lt;/span&gt;&lt;/code&gt; file you can use the
&lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/timeit.html#cmdoption-timeit-n class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-n&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option with &lt;strong class=command&gt;xrdb&lt;/strong&gt;, it tells &lt;strong class=command&gt;xrdb&lt;/strong&gt; to dump the
settings as they would be used instead of updating the resource database.  This
makes it easy to check if our conditional statements are working correctly
without having to open and close applications constantly.  You can also define
and cancel symbol definitions with the &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-D&lt;/span&gt;&lt;/code&gt; and &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-U&lt;/span&gt;&lt;/code&gt; options
for &lt;strong class=command&gt;xrdb&lt;/strong&gt;, this allows you to test your modifications that rely on
symbols that are normally exported by &lt;strong class=command&gt;xrdb&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=using-a-more-featureful-preprocessor class=section&gt;
&lt;h2&gt;Using a more featureful preprocessor&lt;a title="Permalink to this headline" href=/articles/tips/Sharing_Xresources_between_systems.html#using-a-more-featureful-preprocessor class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also choose a different preprocessor if &lt;strong class=command&gt;cpp&lt;/strong&gt; isn’t up to your
needs by specifying a &lt;strong class=command&gt;-cpp&lt;/strong&gt; option to &lt;strong class=command&gt;xrdb&lt;/strong&gt;.  The only
caveat is that must accept &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-D&lt;/span&gt;&lt;/code&gt; for defines, &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-U&lt;/span&gt;&lt;/code&gt; for symbol
cancelling and &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/using/cmdline.html#cmdoption-I class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-I&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for include paths.  An example that does fit these
restrictions is &lt;a href=http://www.gnu.org/software/m4/m4.html class="reference external"&gt;m4&lt;/a&gt;, and it might be a good choice if you wish to do mode
advanced things in your configuration file such as fancy filtering or the use
of loops for defining colour tables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Simple notifications in awesome</title><link href="/articles/tips/Simple_notifications_in_awesome.html" rel="alternate"></link><updated>2009-10-04T00:00:00Z</updated><id>/articles/tips/Simple_notifications_in_awesome.html</id><summary type="html">&lt;div id=simple-notifications-in-awesome class=section&gt;
&lt;h1&gt;Simple notifications in awesome&lt;a title="Permalink to this headline" href=/articles/tips/Simple_notifications_in_awesome.html#simple-notifications-in-awesome class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;On seeing my window notifications in &lt;a href=http://awesome.naquadah.org/ class="reference external"&gt;awesome&lt;/a&gt; from a screencast for a new
project at work Matt Cooper asks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is there a library that does those fancy notifications or do you have to
hack it up yourself?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;img src=/_images/2009-10-04-awesome_notifications.png class=align-right alt="notifications in awesome"&gt;
&lt;p&gt;There is a library to make notification popups in &lt;strong class=command&gt;awesome&lt;/strong&gt;, and it is
called &lt;a href=http://awesome.naquadah.org/doc/api/modules/naughty.html class="reference external"&gt;naughty&lt;/a&gt;.  With it notifications are as simple as calling
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;naughty.notify&lt;/span&gt;&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;I use &lt;a href=https://github.com/leafo/moonscript/ class="reference external"&gt;moonscript&lt;/a&gt; for all my &lt;a href=http://www.lua.org/ class="reference external"&gt;lua&lt;/a&gt; needs, as it provides a nicer syntax and
fixes some of the warts(such as global-by-default).  The examples below are
all written in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;moonscript&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=highlight-moon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;require&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;naughty&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;

&lt;span class=n&gt;naughty&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;notify&lt;/span&gt; &lt;span class=nv&gt;text:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;my little popup&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nv&gt;position:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;bottom_left&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/201130 class="reference external"&gt;gist #201130&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I do however define a few functions in my configuration file to simplify the
normal notifications I use:&lt;/p&gt;
&lt;div class=highlight-moon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=c1&gt;-- Generic info/warn/error notifications&lt;/span&gt;
&lt;span class=n&gt;debug_messages&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=kc&gt;false&lt;/span&gt;
&lt;span class=n&gt;notify&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt;
    &lt;span class=c1&gt;-- debug_notify: Display notification when debug_messages is true&lt;/span&gt;
    &lt;span class=nv&gt;debug:&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=n&gt;debug_messages&lt;/span&gt;
            &lt;span class=n&gt;naughty&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;notify&lt;/span&gt; &lt;span class=nv&gt;text:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;&amp;lt;span color='#ff00ff'&amp;gt;Debug&amp;lt;/span&amp;gt;: #{awful.util.escape text}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
                &lt;span class=nv&gt;timeout:&lt;/span&gt; &lt;span class=mi&gt;10&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nv&gt;width:&lt;/span&gt;&lt;span class=mi&gt;350&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;

    &lt;span class=nv&gt;_gnotify:&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;ntype&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;text&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=n&gt;colour&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=k&gt;switch&lt;/span&gt; &lt;span class=n&gt;ntype&lt;/span&gt;
            &lt;span class=k&gt;when&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;info&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
                &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;#00ff00&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
            &lt;span class=k&gt;when&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;warn&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
                &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;#ffff00&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
            &lt;span class=k&gt;when&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;error&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
                &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;#ff0000&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
            &lt;span class=k&gt;else&lt;/span&gt;
                &lt;span class=n&gt;beautiful&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;fg_normal&lt;/span&gt;
        &lt;span class=n&gt;naughty&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;notify&lt;/span&gt; &lt;span class=nv&gt;text:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;&amp;lt;span color='#{colour}'&amp;gt;●&amp;lt;/span&amp;gt; #{awful.util.escape text}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;

    &lt;span class=nv&gt;start:&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=n&gt;notify&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;_gnotify&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;info&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;text&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
    &lt;span class=nv&gt;stop:&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=n&gt;notify&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;_gnotify&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;error&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;text&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
    &lt;span class=nv&gt;warn:&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=n&gt;notify&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;_gnotify&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;warn&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;text&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/201131 class="reference external"&gt;gist #201131&lt;/a&gt;&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class=admonition-title&gt;Note&lt;/p&gt;
&lt;p&gt;If you’re willing to install &lt;a href=http://github.com/samsarin/lua-functional class="reference external"&gt;lua-functional&lt;/a&gt;, the above code snippet can be
made much nicer by using its &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;partial&lt;/span&gt;&lt;/code&gt; application support to define the
final functions.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This group of functions, all namespaced under &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;notify&lt;/span&gt;&lt;/code&gt;, provide simple wrappers
for the everyday notifications I use.  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;notify.debug&lt;/span&gt;&lt;/code&gt; is a nice way to be able
to litter your configuration file with visible pointers as to what is going on,
set &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;debug_messages&lt;/span&gt; &lt;span class=pre&gt;=&lt;/span&gt; &lt;span class=pre&gt;true&lt;/span&gt;&lt;/code&gt; in your &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rc.moon&lt;/span&gt;&lt;/code&gt; to enable all the debug
information and switch it back to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;false&lt;/span&gt;&lt;/code&gt; to stop it being displayed.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;notify.{start,stop,warn}&lt;/span&gt;&lt;/code&gt; functions prepend the text you pass it with
a coloured Unicode bullet.  awesome makes use of &lt;a href=http://www.pango.org/ class="reference external"&gt;pango&lt;/a&gt;
meaning you can easily use pretty much any character you wish, or more
specifically any character your font can display.  From time to time I’ve
experimented with using &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;✔&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;✘&lt;/span&gt;&lt;/code&gt;, but most of the fonts I prefer to use
don’t display them correctly(if you’re seeing two boxes your fonts don’t
either).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=window-creation-notifications class=section&gt;
&lt;h1&gt;Window creation notifications&lt;a title="Permalink to this headline" href=/articles/tips/Simple_notifications_in_awesome.html#window-creation-notifications class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One of the notifications I like to have is for when new windows are opened, this
way I don’t miss windows opening on tags I’m not currently viewing.&lt;/p&gt;
&lt;div class=highlight-moon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=n&gt;awful&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;hooks&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;manage&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;register&lt;/span&gt; &lt;span class=kt&gt;(&lt;/span&gt;&lt;span class=n&gt;startup&lt;/span&gt;&lt;span class=kt&gt;)&lt;/span&gt; &lt;span class=nf&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=c1&gt;-- Display the window’s name, or just Application if it isn’t set&lt;/span&gt;
    &lt;span class=n&gt;notify&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;start&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;#{@name or 'Application'} started&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/201132 class="reference external"&gt;gist #201132&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=network-notifications class=section&gt;
&lt;h1&gt;Network notifications&lt;a title="Permalink to this headline" href=/articles/tips/Simple_notifications_in_awesome.html#network-notifications class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I also have the following &lt;a href=http://awesome.naquadah.org/doc/api/modules/awful.hooks.html class="reference external"&gt;awful&lt;/a&gt; hook set to toggle my network monitor between
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;lo&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ppp0&lt;/span&gt;&lt;/code&gt; depending on whether my remote network interface is up.
Having the little popups to show when the network has gone down or come up is
quite nice, and definitely more noticeable than just changing the text in the
&lt;a href=http://awesome.naquadah.org/doc/api/modules/wibox.html class="reference external"&gt;wibox&lt;/a&gt;.  The code below changes the interface name in the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;wibox&lt;/span&gt;&lt;/code&gt;, and
switches the network graph widget to use the appropriate input too.&lt;/p&gt;
&lt;div class=highlight-moon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=n&gt;netiface&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;lo&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
&lt;span class=n&gt;awful&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;hooks&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;timer&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;register&lt;/span&gt; &lt;span class=mi&gt;3&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nf&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=n&gt;iface&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;state&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=n&gt;netiface&lt;/span&gt; &lt;span class=o&gt;==&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;lo&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=k&gt;and&lt;/span&gt; &lt;span class=nb&gt;io.open&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;/var/lock/LCK..ttyUSB0&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
        &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;ppp0&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;up&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=k&gt;elseif&lt;/span&gt; &lt;span class=n&gt;netiface&lt;/span&gt; &lt;span class=o&gt;==&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;ppp0&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt; &lt;span class=k&gt;and&lt;/span&gt; &lt;span class=k&gt;not&lt;/span&gt; &lt;span class=nb&gt;io.open&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;/var/lock/LCK..ttyUSB0&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
        &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;lo&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;down&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;

    &lt;span class=n&gt;nettext_widget&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;text&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt; #{iface}:&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=n&gt;wicked&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;register&lt;/span&gt; &lt;span class=n&gt;netbar_widget&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;net&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;${#{iface} up_b}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=mi&gt;3&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;upload&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=n&gt;wicked&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;register&lt;/span&gt; &lt;span class=n&gt;netbar_widget&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;net&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;${#{iface} down_b}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=mi&gt;3&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
        &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;download&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
    &lt;span class=n&gt;notify&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;start&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;PPP0 interface has come #{state}&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/201133 class="reference external"&gt;gist #201133&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Disabling cursor blinking in GTK+</title><link href="/articles/tips/Disabling_cursor_blinking_in_GTK.html" rel="alternate"></link><updated>2009-10-03T00:00:00Z</updated><id>/articles/tips/Disabling_cursor_blinking_in_GTK.html</id><summary type="html">&lt;div id=disabling-cursor-blinking-in-gtk class=section&gt;
&lt;h1&gt;Disabling cursor blinking in GTK+&lt;a title="Permalink to this headline" href=/articles/tips/Disabling_cursor_blinking_in_GTK.html#disabling-cursor-blinking-in-gtk class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Darren Roberts asks via the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;In &lt;a href=http://pidgin.im/ class="reference external"&gt;pidgin&lt;/a&gt; how can I stop the cursor blinking?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Since we’ve had our &lt;a href=http://xmpp.org/ class="reference external"&gt;Jabber&lt;/a&gt; server set up at the office there have been
countless questions about using &lt;a href=http://pidgin.im/ class="reference external"&gt;pidgin&lt;/a&gt; to the various lists, and I feel the
answer that should often be given is:  Use something else.  There are plenty of
other clients available; &lt;a href=http://live.gnome.org/Empathy class="reference external"&gt;empathy&lt;/a&gt; is installed on all our Solaris and Linux
boxes now, &lt;a href=http://developer.imendio.com/projects/gossip class="reference external"&gt;gossip&lt;/a&gt; may already be installed, &lt;a href=http://emacs-jabber.sourceforge.net/ class="reference external"&gt;emacs-jabber&lt;/a&gt; seems popular with
many of our &lt;a href=http://www.xemacs.org/ class="reference external"&gt;emacs&lt;/a&gt; using developers, &lt;a href=http://www.gajim.org/ class="reference external"&gt;gajim&lt;/a&gt; comes recommended by a few users or
my favourite &lt;a href=http://www.bitlbee.org/ class="reference external"&gt;bitlbee&lt;/a&gt;.  Now, with the rant out of the way we can go back to the
question at hand…&lt;/p&gt;
&lt;p&gt;Cursor blinking is a severe annoyance for some people(not me, I patch apps to
add it), and disabling it for GTK+ applications is really quite simple.   If
you’re a &lt;a href=http://www.gnome.org/ class="reference external"&gt;gnome&lt;/a&gt; user then the setting to change blinking is in the keyboard
properties dialog that can be found in the system menu.  If you’re using &lt;a href=http://www.kde.org/ class="reference external"&gt;KDE&lt;/a&gt;
you should edit &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0-kde&lt;/span&gt;&lt;/code&gt;.  If you’re using neither gnome or KDE
you can add a directive to your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-cpp&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=n&gt;gtk&lt;/span&gt;&lt;span class=o&gt;-&lt;/span&gt;&lt;span class=n&gt;cursor&lt;/span&gt;&lt;span class=o&gt;-&lt;/span&gt;&lt;span class=n&gt;blink&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=mi&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/200429 class="reference external"&gt;gist #200429&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If it is just the blinking rate that bugs you, then you can give a different
value for &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gtk-cursor-blink&lt;/span&gt;&lt;/code&gt;.  The value is given in milliseconds for the
blink frequency.&lt;/p&gt;
&lt;p&gt;If you wish to only change the settings in pidgin you can edit
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.purple/gtkrc-2.0&lt;/span&gt;&lt;/code&gt; instead of your main &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div id=bonus-related-tip class=section&gt;
&lt;h2&gt;Bonus related tip&lt;a title="Permalink to this headline" href=/articles/tips/Disabling_cursor_blinking_in_GTK.html#bonus-related-tip class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you’re really driven mad by the blinking cursor, and wish to disable it in
the console too then add the next little snippet to your shell’s startup file:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;echo&lt;/span&gt; -e &lt;span class=s1&gt;'\033[?48c'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/200430 class="reference external"&gt;gist #200430&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Toggling settings in vim</title><link href="/articles/tips/Toggling_settings_in_vim.html" rel="alternate"></link><updated>2009-10-02T00:00:00Z</updated><id>/articles/tips/Toggling_settings_in_vim.html</id><summary type="html">&lt;div id=toggling-settings-in-vim class=section&gt;
&lt;h1&gt;Toggling settings in vim&lt;a title="Permalink to this headline" href=/articles/tips/Toggling_settings_in_vim.html#toggling-settings-in-vim class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As you can never have enough keybinding tips and &lt;a href=http://www.vim.org class="reference external"&gt;vim&lt;/a&gt; helps to prove that, the
tip for today answers Joshua’s question from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;##purplism&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;can you toggle settings in vim with a key?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The simple answer is yes, but how easy it is depends on what you’re trying to
toggle.  We need a state to test when toggling settings, so as long as we can
query the setting toggling it is easy.  For example, I have a binding in my
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.vimrc&lt;/span&gt;&lt;/code&gt; to toggle the value of &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'background'" class="reference external"&gt;background&lt;/a&gt;.  As I use transparent
terminals the colours used for syntax highlighting can occasionally get
a little difficult to read depending on the wallpaper I’m using, the following
function allows me to quick toggle the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;background&lt;/span&gt;&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=c&gt;" Map Shift-F12 to switch between light and dark&lt;/span&gt;
&lt;span class=k&gt;function&lt;/span&gt;&lt;span class=p&gt;!&lt;/span&gt; Switch_background&lt;span class=p&gt;()&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &amp;amp;&lt;span class=nb&gt;background&lt;/span&gt; &lt;span class=p&gt;==&lt;/span&gt; &lt;span class=s2&gt;"light"&lt;/span&gt;
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=nb&gt;background&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=nb&gt;dark&lt;/span&gt;
    &lt;span class=k&gt;else&lt;/span&gt;
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=nb&gt;background&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=nb&gt;light&lt;/span&gt;
    &lt;span class=k&gt;endif&lt;/span&gt;
&lt;span class=k&gt;endfunction&lt;/span&gt;
map &lt;span class=p&gt;&amp;lt;&lt;/span&gt;S&lt;span class=p&gt;-&lt;/span&gt;F12&lt;span class=p&gt;&amp;gt;&lt;/span&gt; :&lt;span class=k&gt;call&lt;/span&gt; Switch_background&lt;span class=p&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=p&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/200255 class="reference external"&gt;gist #200255&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For some other commands such as toggling line numbering it can be much
simpler:&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map &lt;span class=p&gt;&amp;lt;&lt;/span&gt;C&lt;span class=p&gt;-&lt;/span&gt;F12&lt;span class=p&gt;&amp;gt;&lt;/span&gt; :&lt;span class=k&gt;set&lt;/span&gt; &lt;span class=k&gt;number&lt;/span&gt;&lt;span class=p&gt;!&amp;lt;&lt;/span&gt;CR&lt;span class=p&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/200257 class="reference external"&gt;gist #200257&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those times when we can’t easily flip the setting on and off or query state
in a simple manner, the solution is to store state ourselves and test that.&lt;/p&gt;
&lt;p&gt;We may, for example, wish to toggle a group of settings on or off at one time.
While we could test one of the settings in the toggle function it can become
quite brittle if we change those settings ourselves.  By storing our toggle
state in a variable we can test that instead.  The final — totally contrived
— example shows how to do that:&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=c&gt;" Map Mod1-F12 to toggle some vim goodness&lt;/span&gt;
&lt;span class=k&gt;function&lt;/span&gt;&lt;span class=p&gt;!&lt;/span&gt; EditorvsNotepad&lt;span class=p&gt;()&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=k&gt;g&lt;/span&gt;:notepad &lt;span class=p&gt;==&lt;/span&gt; &lt;span class=s2&gt;"false"&lt;/span&gt;
        &lt;span class=k&gt;let&lt;/span&gt; &lt;span class=k&gt;g&lt;/span&gt;:notepad&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=s2&gt;"true"&lt;/span&gt;
        &lt;span class=nb&gt;syntax&lt;/span&gt; off
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=k&gt;nohlsearch&lt;/span&gt;
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=nb&gt;laststatus&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=m&gt;0&lt;/span&gt;
    &lt;span class=k&gt;else&lt;/span&gt;
        &lt;span class=k&gt;let&lt;/span&gt; &lt;span class=k&gt;g&lt;/span&gt;:notepad&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=s2&gt;"false"&lt;/span&gt;
        &lt;span class=nb&gt;syntax&lt;/span&gt; &lt;span class=k&gt;on&lt;/span&gt;
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=nb&gt;hlsearch&lt;/span&gt;
        &lt;span class=k&gt;set&lt;/span&gt; &lt;span class=nb&gt;laststatus&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=m&gt;2&lt;/span&gt;
    &lt;span class=k&gt;endif&lt;/span&gt;
&lt;span class=k&gt;endfunction&lt;/span&gt;
&lt;span class=k&gt;let&lt;/span&gt; &lt;span class=k&gt;g&lt;/span&gt;:notepad &lt;span class=p&gt;=&lt;/span&gt; &lt;span class=s2&gt;"false"&lt;/span&gt;
map &lt;span class=p&gt;&amp;lt;&lt;/span&gt;M&lt;span class=p&gt;-&lt;/span&gt;F12&lt;span class=p&gt;&amp;gt;&lt;/span&gt; :&lt;span class=k&gt;call&lt;/span&gt; EditorvsNotepad&lt;span class=p&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=p&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/200258 class="reference external"&gt;gist #200258&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Custom keybindings in the GTK+ file dialogs</title><link href="/articles/tips/Custom_locations_in_the_GTK_filechooser.html" rel="alternate"></link><updated>2009-10-01T00:00:00Z</updated><id>/articles/tips/Custom_locations_in_the_GTK_filechooser.html</id><summary type="html">&lt;div id=custom-keybindings-in-the-gtk-file-dialogs class=section&gt;
&lt;h1&gt;Custom keybindings in the GTK+ file dialogs&lt;a title="Permalink to this headline" href=/articles/tips/Custom_locations_in_the_GTK_filechooser.html#custom-keybindings-in-the-gtk-file-dialogs class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In &lt;a href=/articles/tips/Fancy_awesome_theming.html class="reference internal"&gt;&lt;span class=doc&gt;Fancy awesome theming&lt;/span&gt;&lt;/a&gt; I included a screenshot that, by accident more
than design, spawned today’s tip.&lt;/p&gt;
&lt;a href=/_static/2009-09-28-awesome_theming.png class="reference external image-reference"&gt;&lt;img src=/_images/2009-10-01-gtkrc-mini.png class=align-right alt="gtkrc in vim screenshot"&gt;&lt;/a&gt;
&lt;p&gt;Laura Biddulph sent me a &lt;abbr title="Short Message Service"&gt;SMS&lt;/abbr&gt; message that read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Thanks! I saw your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;gtkrc&lt;/span&gt;&lt;/code&gt;, and now I have keybound faves in the file
dialog.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;gtkrc&lt;/span&gt;&lt;/code&gt; being referenced is my &lt;a href=http://www.gtk.org/ class="reference external"&gt;GTK+&lt;/a&gt; configuration file that could
be seen in the right hand &lt;a href=http://www.vim.org/ class="reference external"&gt;vim&lt;/a&gt; window of the screenshot from that earlier post.
It was actually open in that screenshot because I was changing my GTK+ theme,
and not being a &lt;a href=http://www.gnome.org/ class="reference external"&gt;gnome&lt;/a&gt; user the simplest way to change it is via my
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt;.  And, if you’re using &lt;a href=http://www.kde.org/ class="reference external"&gt;KDE&lt;/a&gt; and wish to the settings for
GTK+ applications you should edit &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0-kde&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the question becomes, what were the options in that screenshot, and are there
any other cool and useful things you can do there?&lt;/p&gt;
&lt;div class=highlight-cpp&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gtk-theme-name = "expose"
gtk-icon-theme-name = "hicolor"
gtk-key-theme-name = "Emacs"

binding "some-shortcuts" {
    bind "&amp;lt;Alt&amp;gt;T" {
        "location-popup" ("/home/jay/urls")
    }
    bind "&amp;lt;Alt&amp;gt;M" {
        "location-popup" ("/var/lib/repo/jnrowe-misc")
    }
}
class "GtkFileChooserDefault" binding "some-shortcuts"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/199268 class="reference external"&gt;gist #199268&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ignoring the &lt;strong class=command&gt;vim&lt;/strong&gt; &lt;a href=http://vimdoc.sourceforge.net/htmldoc/options.html#modeline class="reference external"&gt;modeline&lt;/a&gt; from the screenshot the first few
settings are basic theme related options.  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gtk-theme-name&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gtk-icon-theme-name&lt;/span&gt;&lt;/code&gt; set the style and icon groups for GTK+ apps
respectively.  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gtk-key-theme-name&lt;/span&gt;&lt;/code&gt; sets the default keybindings for GTK+
apps.  By setting it to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;Emacs&lt;/span&gt;&lt;/code&gt; we have access to the “normal” keybindings we
expect if we use &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt; or other common Linux tools, such as &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;C-w&lt;/span&gt;&lt;/code&gt; to
delete the word under the cursor.  You can read more about
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;gtk-key-theme-name&lt;/span&gt;&lt;/code&gt; in &lt;a href=http://www.jnrowe.ukfsn.org/articles/configs/gtk.html class="reference external"&gt;an old posting of mine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of the settings above are configurable with a &lt;abbr title="Graphical User Interface"&gt;GUI&lt;/abbr&gt; if you use gnome or &lt;a href=http://www.xfce.org/ class="reference external"&gt;xfce&lt;/a&gt;, but for those of who don’t use those
desktop environments editing the &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt; is a reasonable solution.&lt;/p&gt;
&lt;a href=/_static/2009-10-01-GTK_filechooser.png class="reference external image-reference"&gt;&lt;img src=/_images/2009-10-01-GTK_filechooser-mini.png class=align-left alt="GTK file chooser screenshot"&gt;&lt;/a&gt;
&lt;p&gt;The “some-shortcuts” section is the interesting one for today, it is telling
GTK+ applications that we want to have our own extra keybindings available when
opening or saving files.  &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;GTKFileChooser&lt;/span&gt;&lt;/code&gt; is the modern GTK+ file dialog, and
it already has a set of useful keybindings including:&lt;/p&gt;
&lt;table class=docutils&gt;
&lt;colgroup&gt;
&lt;col style="width: 31%"&gt;
&lt;col style="width: 69%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=row-odd&gt;&lt;th class=head&gt;&lt;p&gt;Key&lt;/th&gt;
&lt;th class=head&gt;&lt;p&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=row-even&gt;&lt;td&gt;&lt;p&gt;&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-&amp;lt;Home&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Jump to your home directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-odd&gt;&lt;td&gt;&lt;p&gt;&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-D&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Jump to your &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;~/Desktop&lt;/span&gt;&lt;/code&gt; directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-even&gt;&lt;td&gt;&lt;p&gt;&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-&amp;lt;Up&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Go to current directory’s parent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=row-odd&gt;&lt;td&gt;&lt;p&gt;&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;C-L&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Display the text location entry box&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We could actually use the file chooser’s bookmark feature, and access the
bookmarks with &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-1&lt;/span&gt;&lt;/code&gt; through &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-9&lt;/span&gt;&lt;/code&gt; and &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-0&lt;/span&gt;&lt;/code&gt; for bookmark number
ten from the dialog.  However, I find it more practical to be able to use
mnemonic names for favourite locations.  You could even use both if you have an
excellent memory and a lot of favourite locations!&lt;/p&gt;
&lt;p&gt;If you wish to add your own bindings the format is hopefully quite
self-explanatory, just don’t forget to link your bindings to the correct class
or they will not work.&lt;/p&gt;
&lt;p&gt;You can also change the default bindings by specifying them in the
configuration file, for example to use &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-&amp;lt;left&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-&amp;lt;right&amp;gt;&lt;/span&gt;&lt;/code&gt; to
skip backward and forward along the directory path:&lt;/p&gt;
&lt;div class=highlight-cpp&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=n&gt;bind&lt;/span&gt; &lt;span class=s&gt;"&amp;lt;Alt&amp;gt;Left"&lt;/span&gt; &lt;span class=p&gt;{&lt;/span&gt;
    &lt;span class=s&gt;"up-folder"&lt;/span&gt; &lt;span class=p&gt;()&lt;/span&gt;
&lt;span class=p&gt;}&lt;/span&gt;
&lt;span class=n&gt;bind&lt;/span&gt; &lt;span class=s&gt;"&amp;lt;Alt&amp;gt;Right"&lt;/span&gt; &lt;span class=p&gt;{&lt;/span&gt;
    &lt;span class=s&gt;"down-folder"&lt;/span&gt; &lt;span class=p&gt;()&lt;/span&gt;
&lt;span class=p&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/199269 class="reference external"&gt;gist #199269&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Whether you find &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Up&lt;/span&gt;&lt;/code&gt; and &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Down&lt;/span&gt;&lt;/code&gt; or &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Left&lt;/span&gt;&lt;/code&gt; and &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Right&lt;/span&gt;&lt;/code&gt;
easier to remember depends on how you visualise the path, I personally prefer
the defaults in this instance but the choice is entirely yours.&lt;/p&gt;
&lt;p&gt;If you decide to significantly modify the bindings you may even find it easier
to split the &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gtkrc-2.0&lt;/span&gt;&lt;/code&gt; in to chunks to make it easier to manage or
share, for this you can use the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;include&lt;/span&gt;&lt;/code&gt; directive.  An example would be:
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;include&lt;/span&gt; &lt;span class=pre&gt;"~/.gtk_bindings"&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Beyond simple tab completion</title><link href="/articles/tips/Beyond_tab_completion.html" rel="alternate"></link><updated>2009-09-30T00:00:00Z</updated><id>/articles/tips/Beyond_tab_completion.html</id><summary type="html">&lt;div id=beyond-simple-tab-completion class=section&gt;
&lt;h1&gt;Beyond simple tab completion&lt;a title="Permalink to this headline" href=/articles/tips/Beyond_tab_completion.html#beyond-simple-tab-completion class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Matt Taylor wrote on the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;wildmenu&lt;/span&gt;&lt;/code&gt; is to &lt;a href=http://www.vim.org/ class="reference external"&gt;vim&lt;/a&gt; as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$x&lt;/span&gt;&lt;/code&gt; is to &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt;.  Define &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$x&lt;/span&gt;&lt;/code&gt; :)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'wildmenu'" class="reference external"&gt;wildmenu&lt;/a&gt; option in &lt;strong class=command&gt;vim&lt;/strong&gt; shows possible command line completions
above the command line, highlighting the currently selected completion option.
A follow up email later and Matt says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Basically, I want &lt;strong class=command&gt;bash&lt;/strong&gt; to show me the completions and
&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Tab`&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$key&lt;/span&gt;&lt;/code&gt; through them in the same way &lt;strong class=command&gt;vim&lt;/strong&gt; does
it.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The feature is surprisingly easy to achieve with &lt;strong class=command&gt;bash&lt;/strong&gt;, and is
actually a feature of &lt;a href=http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html class="reference external"&gt;readline&lt;/a&gt; making it available to all software that uses
completion functionality from &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;readline&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The option we want is called &lt;a href=http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#IDX137 class="reference external"&gt;menu-complete&lt;/a&gt;, but it not bound to a key by
default.  You can enable &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;menu-complete&lt;/span&gt;&lt;/code&gt; in all &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;readline&lt;/span&gt;&lt;/code&gt;-using
applications by editing your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt; (or whatever &lt;span id=index-0 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;$INPUTRC&lt;/span&gt;&lt;/code&gt;
points to if it is set) or just for &lt;strong class=command&gt;bash&lt;/strong&gt; if you do not wish to
change the behaviour of other applications.&lt;/p&gt;
&lt;p&gt;To change the behaviour by editing the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;readline&lt;/span&gt;&lt;/code&gt; configuration file we would do
this:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;"\C-a": menu-complete
# Alternative version, enables menu-complete only for bash
$if Bash
    "\C-a": menu-complete
$endif
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198394 class="reference external"&gt;gist #198394&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The above tells &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;readline&lt;/span&gt;&lt;/code&gt; we wish to bind &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;menu-complete&lt;/span&gt;&lt;/code&gt; to
&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Control-a&lt;/span&gt;&lt;/code&gt;, I find that key combination quite comfortable as
&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;Control-a&lt;/span&gt;&lt;/code&gt; is easy to reach the my keyboard layout and is of little use
in any of the apps I use on a regular basis.  You must either re-read the
configuration file or restart the &lt;strong class=command&gt;bash&lt;/strong&gt; session to enable this
binding.&lt;/p&gt;
&lt;p&gt;To enable the key binding in &lt;strong class=command&gt;bash&lt;/strong&gt; only we could also just edit the
appropriate &lt;strong class=command&gt;bash&lt;/strong&gt; startup file:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;bind&lt;/span&gt; &lt;span class=s1&gt;'"\C-a": menu-complete'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198437 class="reference external"&gt;gist #198437&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You must source the startup file or restart &lt;strong class=command&gt;bash&lt;/strong&gt; to enable this
binding, alternatively you can just test the command in your current
&lt;strong class=command&gt;bash&lt;/strong&gt; setting until you’re happy with the key combination.&lt;/p&gt;
&lt;p&gt;In a follow up email on the list Matt asks if it is possible to make the
completion context aware, in much the same the &lt;a href=http://bash-completion.alioth.debian.org/ class="reference external"&gt;bash-completion&lt;/a&gt; package does but
without having to write new completion scripts.  There are some other quite
useful completion modes available in &lt;strong class=command&gt;bash&lt;/strong&gt;, I’ll describe a few
below.&lt;/p&gt;
&lt;p&gt;&lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-!&lt;/span&gt;&lt;/code&gt; tells &lt;strong class=command&gt;bash&lt;/strong&gt; to complete command names be they actual
on-disk commands, functions or aliases. &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-/&lt;/span&gt;&lt;/code&gt; completes only filenames,
this can be very useful when &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;bash-completion&lt;/span&gt;&lt;/code&gt; is refusing to tab complete
a filename for you.  &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;C-$&lt;/span&gt;&lt;/code&gt; implements variable name completion, this is
most useful when you’re looking to unset or re-set a variable.  Variable name
completion isn’t actually necessary if you have &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;bash-completion&lt;/span&gt;&lt;/code&gt; installed
as it is smart enough to handle this for you in most cases.&lt;/p&gt;
&lt;p&gt;And finally, there is a one more incredibly useful completion mode in
&lt;strong class=command&gt;bash&lt;/strong&gt; and that is &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-{&lt;/span&gt;&lt;/code&gt;, it adds all possible completions to the
command line using the brace expansion syntax.  For example, if I type &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ls&lt;/span&gt;
&lt;span class=pre&gt;~/Git/Local/&amp;lt;M-{&amp;gt;&lt;/span&gt;&lt;/code&gt; it completes to
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/home/jay/Git/Local/{Makefile,countless,dot-configs,haskvim,jrutils}&lt;/span&gt;&lt;/code&gt;.
Using &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;readline&lt;/span&gt;&lt;/code&gt; motion commands, especially word motions such as &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-f&lt;/span&gt;&lt;/code&gt;
and &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;M-b&lt;/span&gt;&lt;/code&gt; to jump forward and backward one word, I can easily apply
a command to a certain set of files in a directory.  Just don’t try it on
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/usr/bin&lt;/span&gt;&lt;/code&gt; unless you want to see how &lt;strong class=command&gt;bash&lt;/strong&gt; handles massive command
lines!!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Context aware diffs with git</title><link href="/articles/tips/Context_aware_diffs_with_git.html" rel="alternate"></link><updated>2009-09-29T00:00:00Z</updated><id>/articles/tips/Context_aware_diffs_with_git.html</id><summary type="html">&lt;div id=context-aware-diffs-with-git class=section&gt;
&lt;h1&gt;Context aware diffs with git&lt;a title="Permalink to this headline" href=/articles/tips/Context_aware_diffs_with_git.html#context-aware-diffs-with-git class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Earlier this week Luke Cox asked in response to a patch I sent:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;What version of &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; are you using?  Mine doesn’t seem to produce the right
location output for &lt;strong class=command&gt;format-patch&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong class=command&gt;git&lt;/strong&gt;, by default, displays a &lt;a href=http://www.gnu.org/software/diffutils/manual/html_node/C-Function-Headings.html class="reference external"&gt;function name in the hunk header&lt;/a&gt; of
its &lt;strong class=command&gt;diff&lt;/strong&gt; output.  It produces some really nice output for certain
languages, but out of the box it doesn’t display nice information for all the
file formats you may use.&lt;/p&gt;
&lt;p&gt;The patch I sent Luke included a significant change to an &lt;a href=http://www.cloanto.com/specs/ini.html class="reference external"&gt;.ini&lt;/a&gt; format file,
including some mostly accurate location information in the hunk header.  It
wasn’t because I use a newer version of &lt;strong class=command&gt;git&lt;/strong&gt;, just that I’ve set it
up to use different matchers for different files.  In my &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.gitconfig&lt;/span&gt;&lt;/code&gt;
I have the following snippet to use better function names in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ini&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;adr&lt;/span&gt;&lt;/code&gt; files:&lt;/p&gt;
&lt;div class=highlight-ini&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=k&gt;[diff "ini"]&lt;/span&gt;
    &lt;span class=na&gt;funcname&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s&gt;"^\\[.*\\]$"&lt;/span&gt;
&lt;span class=k&gt;[diff "adr"]&lt;/span&gt;
    &lt;span class=na&gt;funcname&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s&gt;"^#.*$"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198037 class="reference external"&gt;gist #198037&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And, to enable them you must tell &lt;strong class=command&gt;git&lt;/strong&gt; which files to use the new
matchers with by editing the &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;.gitattributes&lt;/span&gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.ini diff=ini
*.adr diff=adr
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198038 class="reference external"&gt;gist #198038&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;funcname&lt;/span&gt;&lt;/code&gt; values are simple &lt;abbr title="Regular Expression"&gt;RegEx&lt;/abbr&gt; to search for, so in the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ini&lt;/span&gt;&lt;/code&gt;
example it is searching for a line that begins with a &lt;code class="regexp docutils literal"&gt;&lt;span class=pre&gt;[&lt;/span&gt;&lt;/code&gt; and ends with
a &lt;code class="regexp docutils literal"&gt;&lt;span class=pre&gt;]&lt;/span&gt;&lt;/code&gt; as these are the common section headers.  And the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;adr&lt;/span&gt;&lt;/code&gt; matcher
just specifies a line that begins with a &lt;code class="regexp docutils literal"&gt;&lt;span class=pre&gt;#&lt;/span&gt;&lt;/code&gt;.  It is important to match
the entire string, as it is the matched content that is used in the diff hunk’s
output.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Fancy awesome theming</title><link href="/articles/tips/Fancy_awesome_theming.html" rel="alternate"></link><updated>2009-09-28T00:00:00Z</updated><id>/articles/tips/Fancy_awesome_theming.html</id><summary type="html">&lt;div id=fancy-awesome-theming class=section&gt;
&lt;h1&gt;Fancy awesome theming&lt;a title="Permalink to this headline" href=/articles/tips/Fancy_awesome_theming.html#fancy-awesome-theming class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;a href=/_static/2009-09-28-awesome_theming.png class="reference external image-reference"&gt;&lt;img src=/_images/2009-09-28-awesome_theming-mini.png class=align-right alt="Awesome screenshot"&gt;&lt;/a&gt;
&lt;p&gt;People, mostly named Neil Blake, who shouldn’t look over my shoulder ask:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;How do you make &lt;a href=http://awesome.naquadah.org/ class="reference external"&gt;awesome&lt;/a&gt; use &lt;em&gt;purdy&lt;/em&gt; pixmap backgrounds for the &lt;a href=http://awesome.naquadah.org/doc/api/modules/wibox.html class="reference external"&gt;wibox&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Simple answer today; cheat.&lt;/p&gt;
&lt;p&gt;As you can see in the screenshot on the right my wibox appears to be using the
same fancy pixmap background as the &lt;a href=http://www.gtk.org/ class="reference external"&gt;GTK+&lt;/a&gt; theme I’m using.  What is actually
happening is that I’ve pasted a copy of the background pixmap from the expose
theme on top of my wallpaper using &lt;a href=http://www.imagemagick.org/index.php class="reference external"&gt;ImageMagick&lt;/a&gt;, which is easily achievable on
a netbook without having to fire up the &lt;a href=http://www.gimp.org/ class="reference external"&gt;gimp&lt;/a&gt;.&lt;/p&gt;
&lt;div class=highlight-sh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;convert /home/jay/.themes/expose/gtk-2.0/bc.xpm -scale 1024x20! bc.png
composite  -gravity north bc.png backdrop.png backdrop_new.png
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198013 class="reference external"&gt;gist #198013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The initial &lt;strong class=command&gt;convert&lt;/strong&gt; command resizes &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;bc.xpm&lt;/span&gt;&lt;/code&gt; from the expose
theme to 1024x20 pixels, 1024 being the screen width and 20 being the height of
my main wibox in awesome.  We must suffix the &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-scale&lt;/span&gt;&lt;/code&gt; option’s
argument with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;!&lt;/span&gt;&lt;/code&gt; to tell &lt;strong class=command&gt;convert&lt;/strong&gt; to ignore the image’s aspect
ratio when resizing, without this the command will not produce an image at the
size we expect.&lt;/p&gt;
&lt;p&gt;The second command tells ImageMagick’s &lt;strong class=command&gt;composite&lt;/strong&gt; that we wish to
paste our newly generated image on top &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;backdrop.png&lt;/span&gt;&lt;/code&gt;, we could specify
any location we want with the &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-gravity&lt;/span&gt;&lt;/code&gt; option but I have my wibox on
the top of the screen so &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;north&lt;/span&gt;&lt;/code&gt; is correct for me.&lt;/p&gt;
&lt;p&gt;With that done we have an image with our normal wallpaper and wibox sized chunk
with our theme’s background.  All we need to do now is tell awesome to make our
wibox transparent and the final result is a wibox that appears to be using the
theme’s background.&lt;/p&gt;
&lt;div class=highlight-moon&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=n&gt;mywibox&lt;/span&gt;&lt;span class=kt&gt;[&lt;/span&gt;&lt;span class=n&gt;s&lt;/span&gt;&lt;span class=kt&gt;]&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;wibox&lt;/span&gt; &lt;span class=nv&gt;position:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;top&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nv&gt;fg:&lt;/span&gt; &lt;span class=n&gt;beautiful&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;fg_normal&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=nv&gt;bg:&lt;/span&gt; &lt;span class=s2&gt;"&lt;/span&gt;&lt;span class=s&gt;#00000000&lt;/span&gt;&lt;span class=s2&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198014 class="reference external"&gt;gist #198014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Colours are specified in the de facto standard format of
&lt;code class="samp docutils literal"&gt;&lt;span class=pre&gt;#[&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;red&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;green&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;blue&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;alpha&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;]`&lt;/span&gt;&lt;/code&gt;, the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;00&lt;/span&gt;&lt;/code&gt; value for alpha in the above example
means we want a fully transparent theme background.  You could include some
colour values and varying levels of alpha transparency to tint the background
image, however that could also be achieved with ImageMagick when building the
background image if it is desired.&lt;/p&gt;
&lt;p&gt;Click on the thumbnail image above to see the full desktop image and the effect
in full.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Bugzilla mail with real names</title><link href="/articles/tips/Bugzilla_real_names.html" rel="alternate"></link><updated>2009-09-27T00:00:00Z</updated><id>/articles/tips/Bugzilla_real_names.html</id><summary type="html">&lt;div id=bugzilla-mail-with-real-names class=section&gt;
&lt;h1&gt;Bugzilla mail with real names&lt;a title="Permalink to this headline" href=/articles/tips/Bugzilla_real_names.html#bugzilla-mail-with-real-names class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;John Bateman rants on the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;a href=http://www.bugzilla.org class="reference external"&gt;Bugzilla&lt;/a&gt; annoys the hell out of me, why I can’t just choose “spoof
&lt;em class=mailheader&gt;From&lt;/em&gt; address” in bugspam is beyond me.  It makes filtering
such a chore!!&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree, and I’ve long since decided to fix the problem locally.  There are
unfortunately a couple of small prerequisites for using my method that you may
not have.  The first is that you need to be able to filter the content of the
mail easily, and the second is that you install
&lt;a href=http://www.spinnaker.de/lbdb/ class="reference external"&gt;lbdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong class=command&gt;lbdb&lt;/strong&gt; is a small tool designed for handling mail addresses in &lt;a href=http://www.mutt.org class="reference external"&gt;mutt&lt;/a&gt;,
but it does not require you to use or even install &lt;strong class=command&gt;mutt&lt;/strong&gt;.  What we
are going to do is use &lt;strong class=command&gt;lbdb&lt;/strong&gt; and our own incoming mail to seed an
email-to-name database for our bugspam filtering.  We don’t even need to
configure lbdb to use it for our purposes, although I do recommend giving the
package a try even if you use another mail client.&lt;/p&gt;
&lt;p&gt;The &lt;strong class=command&gt;lbdb&lt;/strong&gt; tool we want to use is &lt;strong class=command&gt;lbdb-fetchaddr&lt;/strong&gt; which is
designed to generate an address search database for the &lt;strong class=command&gt;lbdb&lt;/strong&gt;
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;m_inmail&lt;/span&gt;&lt;/code&gt; method.  &lt;strong class=command&gt;lbdb-fetchaddr&lt;/strong&gt; keeps a text database of all
the names, addresses and the last seen date of every address we pass through
it.  This allows our Bugzilla filter to work without us having to generate our
own email-to-name list assuming we receive mail from the bug commenter either
personally or on a list, at the cost of increased(albeit still negligible)
processing time.  I use &lt;a href=http://www.courier-mta.org/maildrop/ class="reference external"&gt;maildrop&lt;/a&gt; to filter my mail and to tell the
&lt;strong class=command&gt;maildrop&lt;/strong&gt; &lt;abbr title="Mail Delivery Agent"&gt;MDA&lt;/abbr&gt; to update the
&lt;strong class=command&gt;lbdb&lt;/strong&gt; database we add a simple rule to our &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.mailfilter&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if ($SIZE &amp;lt; 32768)
    cc '| lbdb-fetchaddr -d "%FT%T%z"'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198021 class="reference external"&gt;gist #198021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tells &lt;strong class=command&gt;maildrop&lt;/strong&gt; to pass all mails less than 32k in size through
&lt;strong class=command&gt;lbdq-fetchaddr&lt;/strong&gt;, and we specify a nice &lt;abbr title="International Organization for Standardization"&gt;ISO&lt;/abbr&gt;-8601 time format for
easy sorting and parsing should the need arise.  Now every mail that is
delivered with &lt;strong class=command&gt;maildrop&lt;/strong&gt; and isn’t too large will have the sender
name and address recorded in &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.lbdb/m_inmail.list&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now on to the actual filtering script, which is is written in &lt;a href=http://www.python.org/ class="reference external"&gt;Python&lt;/a&gt;.  It only
uses modules from the Python standard library, so you don’t need to install
anything else.  I have tested it with 25000 unique entries in
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.lbdb/m_inmail.list&lt;/span&gt;&lt;/code&gt; and it still takes less than a thirtieth of
a second to run the filter on my desktop, so processing the database each time
we start up isn’t really an issue.  Also, the few small tests I’ve done suggest
that using “real” database engines doesn’t help and the only way to speed it up
significantly would be to write a small daemon to process the mail which seems
more than a little overkill to me.&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=ch&gt;#! /usr/bin/python3 -tt&lt;/span&gt;

&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;csv&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;reader&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;email&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;message_from_file&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;os.path&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;expanduser&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;sys&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;stdin&lt;/span&gt;

&lt;span class=k&gt;with&lt;/span&gt; &lt;span class=nb&gt;open&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;expanduser&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'~/.lbdb/m_inmail.list'&lt;/span&gt;&lt;span class=p&gt;))&lt;/span&gt; &lt;span class=k&gt;as&lt;/span&gt; &lt;span class=n&gt;f&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
    &lt;span class=n&gt;lbdb&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;reader&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;f&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;delimiter&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=se&gt;\t&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=n&gt;addresses&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=nb&gt;dict&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;rec&lt;/span&gt;&lt;span class=p&gt;[:&lt;/span&gt;&lt;span class=mi&gt;2&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt; &lt;span class=k&gt;for&lt;/span&gt; &lt;span class=n&gt;rec&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;lbdb&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;

&lt;span class=n&gt;message&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;message_from_file&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;stdin&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;

&lt;span class=n&gt;commenter&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=bp&gt;None&lt;/span&gt;
&lt;span class=k&gt;for&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;get_payload&lt;/span&gt;&lt;span class=p&gt;()&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;splitlines&lt;/span&gt;&lt;span class=p&gt;():&lt;/span&gt;
    &lt;span class=k&gt;if&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;endswith&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;' changed:'&lt;/span&gt;&lt;span class=p&gt;):&lt;/span&gt;
        &lt;span class=n&gt;commenter&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;split&lt;/span&gt;&lt;span class=p&gt;()[&lt;/span&gt;&lt;span class=mi&gt;0&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt;
        &lt;span class=k&gt;break&lt;/span&gt;
    &lt;span class=k&gt;elif&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;startswith&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'------- Comment #'&lt;/span&gt;&lt;span class=p&gt;):&lt;/span&gt;
        &lt;span class=n&gt;commenter&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;split&lt;/span&gt;&lt;span class=p&gt;()[&lt;/span&gt;&lt;span class=mi&gt;4&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt;
        &lt;span class=k&gt;break&lt;/span&gt;
    &lt;span class=k&gt;elif&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;startswith&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'        ReportedBy: '&lt;/span&gt;&lt;span class=p&gt;):&lt;/span&gt;
        &lt;span class=n&gt;commenter&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;line&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;split&lt;/span&gt;&lt;span class=p&gt;()[&lt;/span&gt;&lt;span class=mi&gt;1&lt;/span&gt;&lt;span class=p&gt;]&lt;/span&gt;
        &lt;span class=k&gt;break&lt;/span&gt;

&lt;span class=c1&gt;# You could also filter the message content at this point if you wished.&lt;/span&gt;
&lt;span class=c1&gt;# The following, for example, would remove the “https” link and some of&lt;/span&gt;
&lt;span class=c1&gt;# the blank lines in Gentoo bugspam&lt;/span&gt;
&lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;set_payload&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=se&gt;\n&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;join&lt;/span&gt;&lt;span class=p&gt;([&lt;/span&gt;&lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;get_payload&lt;/span&gt;&lt;span class=p&gt;()&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;splitlines&lt;/span&gt;&lt;span class=p&gt;()[&lt;/span&gt;&lt;span class=mi&gt;3&lt;/span&gt;&lt;span class=p&gt;],&lt;/span&gt; &lt;span class=p&gt;]&lt;/span&gt;
                            &lt;span class=o&gt;+&lt;/span&gt; &lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;get_payload&lt;/span&gt;&lt;span class=p&gt;()&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;splitlines&lt;/span&gt;&lt;span class=p&gt;()[&lt;/span&gt;&lt;span class=mi&gt;6&lt;/span&gt;&lt;span class=p&gt;:]))&lt;/span&gt;

&lt;span class=k&gt;if&lt;/span&gt; &lt;span class=n&gt;commenter&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;addresses&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
    &lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;replace_header&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'from'&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;
                           &lt;span class=s1&gt;'"&lt;/span&gt;&lt;span class=si&gt;%s&lt;/span&gt;&lt;span class=s1&gt;" &amp;lt;&lt;/span&gt;&lt;span class=si&gt;%s&lt;/span&gt;&lt;span class=s1&gt;&amp;gt;'&lt;/span&gt; &lt;span class=o&gt;%&lt;/span&gt; &lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;addresses&lt;/span&gt;&lt;span class=p&gt;[&lt;/span&gt;&lt;span class=n&gt;commenter&lt;/span&gt;&lt;span class=p&gt;],&lt;/span&gt; &lt;span class=n&gt;commenter&lt;/span&gt;&lt;span class=p&gt;))&lt;/span&gt;

&lt;span class=k&gt;print&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;message&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;as_string&lt;/span&gt;&lt;span class=p&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198022 class="reference external"&gt;gist #198022&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The final addition to our &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.mailfilter&lt;/span&gt;&lt;/code&gt; file enables our little Python
filter to process mail from Bugzilla and change its &lt;em class=mailheader&gt;From&lt;/em&gt; address
if we have the information in the &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.lbdb/m_inmail.list&lt;/span&gt;&lt;/code&gt; database.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if (/^From: bugzilla-daemon@/)
{
    xfilter "~/.mailfilter.d/rewrite-name.py"
    to Mail/Gentoo-bugs
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198023 class="reference external"&gt;gist #198023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And from now on, or at least once your &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;m_inmail.list&lt;/span&gt;&lt;/code&gt; is sufficiently seeded,
your bugspam will have the commenter’s name and email address, making it much
easier to filter and process it in your favourite mail client.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>“Kick me” birthday reminders</title><link href="/articles/tips/Kick_me_birthday_reminders.html" rel="alternate"></link><updated>2009-09-26T00:00:00Z</updated><id>/articles/tips/Kick_me_birthday_reminders.html</id><summary type="html">&lt;div id=kick-me-birthday-reminders class=section&gt;
&lt;h1&gt;“Kick me” birthday reminders&lt;a title="Permalink to this headline" href=/articles/tips/Kick_me_birthday_reminders.html#kick-me-birthday-reminders class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tony Collins asks on the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I almost forgot the wife’s birthday last week, not wanting to do that again
I’m turning to technology not deeper consideration.  So guys, how do you
manage it?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;My answer is to combine the excellent &lt;a href=http://abook.sourceforge.net/ class="reference external"&gt;abook&lt;/a&gt; and &lt;a href=http://www.roaringpenguin.com/products/remind class="reference external"&gt;remind&lt;/a&gt; tools in to a really
cool solution that nags you about birthdays every time you login.&lt;/p&gt;
&lt;p&gt;For those that haven’t used it, &lt;strong class=command&gt;abook&lt;/strong&gt; is a simple &lt;a href=http://dickey.his.com/ncurses/ class="reference external"&gt;ncurses&lt;/a&gt; based
address book.  For some years now I’ve been using &lt;strong class=command&gt;abook&lt;/strong&gt; to manage my
personal address book, as it is both small and quite featureful.  The address
file is in a standard &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ini&lt;/span&gt;&lt;/code&gt; format that I can easily import from and export
to practically anything with only a small &lt;a href=http://www.python.org/ class="reference external"&gt;Python&lt;/a&gt; script using
&lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/configparser.html#configparser.ConfigParser class="reference external"&gt;&lt;code class="xref py py-class docutils literal"&gt;&lt;span class=pre&gt;ConfigParser&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong class=command&gt;remind&lt;/strong&gt; is a functional &lt;strong&gt;to the point of insanity&lt;/strong&gt; text-based
reminder tool.  I use it mainly to remind me of tasks that need completing when
I login, although I do have a hook in &lt;a href=http://awesome.naquadah.org/ class="reference external"&gt;awesome&lt;/a&gt; to display the &lt;strong class=command&gt;remind&lt;/strong&gt;
output at other times.  Again the file format is quite sensible which makes
writing importers and exporters simple enough.  As an example, I generate my
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.reminders.d/meetings&lt;/span&gt;&lt;/code&gt; file from a &lt;a href=http://microformats.org/wiki/hcalendar class="reference external"&gt;hCalender&lt;/a&gt; page.&lt;/p&gt;
&lt;img src=/_images/2009-09-26-abook_screenshot-mini.png alt="abook displaying custom tab"&gt;
&lt;p&gt;Now the birthday trick is a cool one, &lt;strong class=command&gt;abook&lt;/strong&gt; has a number of custom
fields you can use for anything you like.  I use &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;customfield&lt;/span&gt; &lt;span class=pre&gt;2&lt;/span&gt;&lt;/code&gt; to store
birthdays in &lt;abbr title="International Organization for Standardization"&gt;ISO&lt;/abbr&gt;-8601 format as in “1974-04-12”.  So that we see the correct
field name in the user interface instead of just &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;Custom2&lt;/span&gt;&lt;/code&gt; add the following
to your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.abook/abookrc&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;customfield 2 Birthday
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198015 class="reference external"&gt;gist #198015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A little &lt;strong class=command&gt;python&lt;/strong&gt; script is all that is needed to generate
a &lt;strong class=command&gt;remind&lt;/strong&gt; input file from our address book now.&lt;/p&gt;
&lt;div class=highlight-python&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=ch&gt;#! /usr/bin/python3 -tt&lt;/span&gt;

&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;configparser&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;ConfigParser&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;NoOptionError&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;datetime&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;datetime&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;operator&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;attrgetter&lt;/span&gt;
&lt;span class=kn&gt;from&lt;/span&gt; &lt;span class=nn&gt;os&lt;/span&gt; &lt;span class=kn&gt;import&lt;/span&gt; &lt;span class=n&gt;path&lt;/span&gt;

&lt;span class=n&gt;tmpl&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=s1&gt;'REM {} +4 MSG {}’s [grn][_yr_num({})][nrm] Birthday %a'&lt;/span&gt;
&lt;span class=n&gt;data&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;ConfigParser&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;converters&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=p&gt;{&lt;/span&gt;
    &lt;span class=s1&gt;'isodate'&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=k&gt;lambda&lt;/span&gt; &lt;span class=n&gt;s&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=n&gt;datetime&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;strptime&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;s&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'%Y-%m-&lt;/span&gt;&lt;span class=si&gt;%d&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
&lt;span class=p&gt;})&lt;/span&gt;
&lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;read&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;path&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;expanduser&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'~/.abook/addressbook'&lt;/span&gt;&lt;span class=p&gt;))&lt;/span&gt;

&lt;span class=n&gt;birthdays&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=nb&gt;filter&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=k&gt;lambda&lt;/span&gt; &lt;span class=n&gt;x&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt; &lt;span class=s1&gt;'birthday'&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;options&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;x&lt;/span&gt;&lt;span class=p&gt;),&lt;/span&gt;
                   &lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;sections&lt;/span&gt;&lt;span class=p&gt;())&lt;/span&gt;

&lt;span class=k&gt;print&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'# THIS FILE IS AUTOGENERATED FROM ABOOK DATA'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;

&lt;span class=k&gt;for&lt;/span&gt; &lt;span class=n&gt;record&lt;/span&gt; &lt;span class=ow&gt;in&lt;/span&gt; &lt;span class=n&gt;birthdays&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
    &lt;span class=k&gt;try&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
        &lt;span class=n&gt;name&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;get&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;record&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'nick'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=k&gt;except&lt;/span&gt; &lt;span class=n&gt;NoOptionError&lt;/span&gt;&lt;span class=p&gt;:&lt;/span&gt;
        &lt;span class=n&gt;name&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;get&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;record&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'name'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=n&gt;birthdate&lt;/span&gt; &lt;span class=o&gt;=&lt;/span&gt; &lt;span class=n&gt;data&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;getisodate&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;record&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=s1&gt;'birthday'&lt;/span&gt;&lt;span class=p&gt;)&lt;/span&gt;
    &lt;span class=k&gt;print&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;tmpl&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;format&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=n&gt;birthdate&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;strftime&lt;/span&gt;&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s1&gt;'&lt;/span&gt;&lt;span class=si&gt;%d&lt;/span&gt;&lt;span class=s1&gt; %B'&lt;/span&gt;&lt;span class=p&gt;),&lt;/span&gt; &lt;span class=n&gt;name&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt; &lt;span class=n&gt;birthdate&lt;/span&gt;&lt;span class=o&gt;.&lt;/span&gt;&lt;span class=n&gt;year&lt;/span&gt;&lt;span class=p&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198018 class="reference external"&gt;gist #198018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use the following &lt;a href=http://www.gnu.org/software/make/make.html class="reference external"&gt;make&lt;/a&gt; snippet in my &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/Makefile&lt;/span&gt;&lt;/code&gt; to generate the
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.reminders.d/birthdays&lt;/span&gt;&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=highlight-make&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nf&gt;.reminders.d/birthdays&lt;/span&gt;&lt;span class=o&gt;:&lt;/span&gt; .&lt;span class=n&gt;abook&lt;/span&gt;/&lt;span class=n&gt;addressbook&lt;/span&gt; .&lt;span class=n&gt;reminders&lt;/span&gt;.&lt;span class=n&gt;d&lt;/span&gt;/&lt;span class=n&gt;birthdays&lt;/span&gt;.&lt;span class=n&gt;py&lt;/span&gt;
    &lt;span class=k&gt;$(&lt;/span&gt;info - Generating remind’s birthdays file&lt;span class=k&gt;)&lt;/span&gt;
    &lt;span class=k&gt;$(&lt;/span&gt;word &lt;span class=m&gt;2&lt;/span&gt;, $^&lt;span class=k&gt;)&lt;/span&gt; &amp;gt;&lt;span class=nv&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198019 class="reference external"&gt;gist #198019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And finally, we need to tell &lt;strong class=command&gt;remind&lt;/strong&gt; to include our newly created
file by editing &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.reminders&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INCLUDE /home/jay/.reminders.d/birthdays
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198020 class="reference external"&gt;gist #198020&lt;/a&gt;&lt;/p&gt;
&lt;img src=/_images/2009-09-26-remind_screenshot.png alt="shell login screenshot"&gt;
&lt;p&gt;You could trigger a rebuild in your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.bashrc&lt;/span&gt;&lt;/code&gt; before you call
&lt;strong class=command&gt;rem&lt;/strong&gt; to see the reminders, so they are always up to date at login.
Or, you could be like me and have a post commit hook for &lt;a href=http://www.git-scm.com/ class="reference external"&gt;git&lt;/a&gt; to manage this…
because you are keeping your home directory version controlled as a sanity
measure I hope!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Uber pink prompts</title><link href="/articles/tips/Uber_pink_prompts.html" rel="alternate"></link><updated>2009-09-25T00:00:00Z</updated><id>/articles/tips/Uber_pink_prompts.html</id><summary type="html">&lt;div id=uber-pink-prompts class=section&gt;
&lt;h1&gt;Uber pink prompts&lt;a title="Permalink to this headline" href=/articles/tips/Uber_pink_prompts.html#uber-pink-prompts class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;cookiemon5ter asks in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;#gentoo&lt;/span&gt;&lt;/code&gt; on Freenode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;anyone know where to get a list of color codes for &lt;strong class=command&gt;bash&lt;/strong&gt; or know
the code for pink :p&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;My first suggestion was to look at &lt;a href=http://kerneltrap.org/man/linux/man4/console_codes.4 class="reference external"&gt;console_codes(4)&lt;/a&gt; for the escapes, and note
that pink isn’t defined.  As a workaround I suggested changing the console
palette using &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;echo&lt;/span&gt; &lt;span class=pre&gt;"\e]PDff1493"&lt;/span&gt;&lt;/code&gt; which will make the normal magenta escape
in to a much deeper pink.  The syntax to change the console colour palette is
&lt;code class="samp docutils literal"&gt;&lt;span class=pre&gt;eP[&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;colour_number&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;red&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;green&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;][&lt;/span&gt;&lt;em&gt;&lt;span class=pre&gt;blue&lt;/span&gt;&lt;/em&gt;&lt;span class=pre&gt;]&lt;/span&gt;&lt;/code&gt;, so deconstructing the
above example we are setting colour code &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;D&lt;/span&gt;&lt;/code&gt; (or 13) to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;#ff1493&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, the idea cookiemon5ter had wasn’t to change the palette but just to use
a nice pink in the &lt;a href=http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html class="reference external"&gt;bash&lt;/a&gt; prompt under &lt;a href=http://materm.sourceforge.net/ class="reference external"&gt;mrxvt&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;i was just talking [about] editing the line in bashrc&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Using &lt;strong class=command&gt;mrxvt&lt;/strong&gt;, or any other terminal that supports the &lt;a href=https://invisible-island.net/xterm/ class="reference external"&gt;xterm&lt;/a&gt;’s 256
colour mode, we can actually pick a variety of pinks to use directly without
having to redefine the palette.  The prompt with a more gaudy pink can be
achieved with the following:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;export&lt;/span&gt; &lt;span class=nv&gt;PS1&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=s1&gt;'\[\e[01;33m\]\u@\h\[\e[38;5;199m\] \w\$\[\e[00m\] '&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198009 class="reference external"&gt;gist #198009&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important change here is the use of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;\e[38;5;199m&lt;/span&gt;&lt;/code&gt;, which tells mrxvt to
select colour 199 from its extended 256 colour range.  Colours 196 through 201
are varying levels of pink.  To see a quick table of the full colour range you
can use the following little loop:&lt;/p&gt;
&lt;div class=highlight-bash&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=k&gt;for&lt;/span&gt; i in &lt;span class=o&gt;{&lt;/span&gt;&lt;span class=m&gt;0&lt;/span&gt;..15&lt;span class=o&gt;}&lt;/span&gt;
&lt;span class=k&gt;do&lt;/span&gt;
    &lt;span class=k&gt;for&lt;/span&gt; j in &lt;span class=o&gt;{&lt;/span&gt;&lt;span class=m&gt;0&lt;/span&gt;..15&lt;span class=o&gt;}&lt;/span&gt;
    &lt;span class=k&gt;do&lt;/span&gt;
        &lt;span class=nv&gt;col&lt;/span&gt;&lt;span class=o&gt;=&lt;/span&gt;&lt;span class=k&gt;$((&lt;/span&gt;i*16+j&lt;span class=k&gt;))&lt;/span&gt;
        &lt;span class=nb&gt;printf&lt;/span&gt; &lt;span class=s2&gt;"\e[38;5;%im %03i"&lt;/span&gt; &lt;span class=nv&gt;$col&lt;/span&gt; &lt;span class=nv&gt;$col&lt;/span&gt;
    &lt;span class=k&gt;done&lt;/span&gt;
    &lt;span class=nb&gt;printf&lt;/span&gt; &lt;span class=s2&gt;"\n"&lt;/span&gt;
&lt;span class=k&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198010 class="reference external"&gt;gist #198010&lt;/a&gt;&lt;/p&gt;
&lt;img src=/_images/2009-09-25-256_colours.png alt="xterm's 256 colour palette"&gt;
&lt;p&gt;There is one other important point to make here, you must set the prompt based
on terminal type now as some terminals and the console won’t recognise the
sequences correctly.  Test the terminal type by checking &lt;span id=index-0 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;$TERM&lt;/span&gt;&lt;/code&gt; in
your startup scripts, or if you’re convinced all your terminals are 256 colour
capable you can simply check for &lt;span id=index-1 class=target&gt;&lt;/span&gt;&lt;code class="xref std std-envvar docutils literal"&gt;&lt;span class=pre&gt;$DISPLAY&lt;/span&gt;&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Changing the console palette and using 256 colour mode makes for two tips
today!!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Compiling C source in vim</title><link href="/articles/tips/Compiling_in_vim.html" rel="alternate"></link><updated>2009-09-24T00:00:00Z</updated><id>/articles/tips/Compiling_in_vim.html</id><summary type="html">&lt;div id=compiling-c-source-in-vim class=section&gt;
&lt;h1&gt;Compiling C source in vim&lt;a title="Permalink to this headline" href=/articles/tips/Compiling_in_vim.html#compiling-c-source-in-vim class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The fabulous Miss Biddulph asks via the EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Is there a way to make &lt;strong class=command&gt;vim&lt;/strong&gt; compile C files without
a &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;A quick phone call later and we know that Laura wishes to emulate &lt;a href=http://www.gnu.org/software/make/make.html class="reference external"&gt;make&lt;/a&gt;’s
behaviour where calling &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;make&lt;/span&gt; &lt;span class=pre&gt;my_code&lt;/span&gt;&lt;/code&gt; without a &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt; will
attempt to build &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;my_code&lt;/span&gt;&lt;/code&gt; from &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;my_code.c&lt;/span&gt;&lt;/code&gt;. &lt;a href=http://www.vim.org class="reference external"&gt;vim&lt;/a&gt;’s default
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;:make&lt;/span&gt;&lt;/code&gt; command doesn’t quite do the trick as it just calls &lt;strong class=command&gt;make&lt;/strong&gt;
without any arguments.&lt;/p&gt;
&lt;p&gt;&lt;strong class=command&gt;vim&lt;/strong&gt; allows us to set options for specific file types only using the
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;:autocmd&lt;/span&gt;&lt;/code&gt; command, and this is the perfect time to use it.  We will set the
value of &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;makeprg&lt;/span&gt;&lt;/code&gt;, which &lt;strong class=command&gt;vim&lt;/strong&gt; uses as the command to run with
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;:make&lt;/span&gt;&lt;/code&gt;, for all C and C++ files.&lt;/p&gt;
&lt;div class=highlight-vim&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autocmd &lt;span class=nb&gt;FileType&lt;/span&gt; &lt;span class=k&gt;c&lt;/span&gt;&lt;span class=p&gt;,&lt;/span&gt;cpp
    \ &lt;span class=k&gt;if&lt;/span&gt; empty&lt;span class=p&gt;(&lt;/span&gt;glob&lt;span class=p&gt;(&lt;/span&gt;&lt;span class=s2&gt;"[Mm]akefile"&lt;/span&gt;&lt;span class=p&gt;))&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt;
    \   &lt;span class=k&gt;setlocal&lt;/span&gt; &lt;span class=nb&gt;makeprg&lt;/span&gt;&lt;span class=p&gt;=&lt;/span&gt;&lt;span class=k&gt;make&lt;/span&gt;\ %&lt;span class=p&gt;&amp;lt;&lt;/span&gt; &lt;span class=p&gt;|&lt;/span&gt;
    \ &lt;span class=k&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198024 class="reference external"&gt;gist #198024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;%&amp;lt;&lt;/span&gt;&lt;/code&gt; in our &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;makeprg&lt;/span&gt;&lt;/code&gt; definition refers to the current file with its
extension stripped.  We specifically only change the behaviour if no
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;Makefile&lt;/span&gt;&lt;/code&gt; exists so that we don’t interfere with the normal usage of the
&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;:make&lt;/span&gt;&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Theming mutt</title><link href="/articles/tips/Theming_mutt.html" rel="alternate"></link><updated>2009-09-23T00:00:00Z</updated><id>/articles/tips/Theming_mutt.html</id><summary type="html">&lt;div id=theming-mutt class=section&gt;
&lt;h1&gt;Theming mutt&lt;a title="Permalink to this headline" href=/articles/tips/Theming_mutt.html#theming-mutt class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Jeff, a work colleague, asks via &lt;abbr title="Internet Relay Chat"&gt;IRC&lt;/abbr&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Can I make &lt;a href=http://www.mutt.org/ class="reference external"&gt;mutt&lt;/a&gt; use a blue statusbar in X and red in console? A different
colour would make it easier to read with a transparent urxvt.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=http://www.mutt.org/ class="reference external"&gt;mutt&lt;/a&gt; has access to environment variables when reading its configurations files,
so setting the theme based on term type is extremely easy.&lt;/p&gt;
&lt;p&gt;First separate all your common settings in to one file, say
&lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.mutt/colour_defaults.rc&lt;/span&gt;&lt;/code&gt;.  Then add your per-term settings to a file
named &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;~/.mutt/colour_$TERM.rc&lt;/span&gt;&lt;/code&gt;.  Telling mutt to use the correct theme is
now as simple as adding the following to your &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;~/.muttrc&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=highlight-sh&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=nb&gt;source&lt;/span&gt; ~/.mutt/colour_defaults.rc
&lt;span class=nb&gt;source&lt;/span&gt; ~/.mutt/colour_&lt;span class=nv&gt;$TERM&lt;/span&gt;.rc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See &lt;a href=http://gist.github.com/198012 class="reference external"&gt;gist #198012&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Introduction to &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;</title><link href="/articles/rcs.html" rel="alternate"></link><updated>2003-09-05T00:00:00Z</updated><id>/articles/rcs.html</id><summary type="html">&lt;div id=introduction-to-rcs class=section&gt;
&lt;h1&gt;Introduction to &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;&lt;a title="Permalink to this headline" href=/articles/rcs.html#introduction-to-rcs class=headerlink&gt;¶&lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition warning"&gt;
&lt;p class=admonition-title&gt;Warning&lt;/p&gt;
&lt;p&gt;I’ve resurrected this text from my old UKFSN site because a couple of people
asked me to, but I wouldn’t recommend using &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; to anyone at this point.
It is mainly to help people who need to understand &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; because they have
no choice, for example Gentoo users who are stuck with
&lt;strong class=command&gt;dispatch-conf&lt;/strong&gt; (or so my mails tell me).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=abstract class=section&gt;
&lt;h2&gt;Abstract&lt;a title="Permalink to this headline" href=/articles/rcs.html#abstract class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This introduction is aimed at people with no experience of a &lt;abbr title="Version Control System"&gt;VCS&lt;/abbr&gt; at all, but
who do have a need for an easy to use and non-intrusive way to backup, store
and annotate configuration files or 5000 file C source trees. This text is by
no means an in-depth &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; usage manual, it is a short and fast way to get
working with &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is great for small projects or managing the wealth of configuration files
in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;/etc&lt;/span&gt;&lt;/code&gt;. It provides a way to reduce the need for file backups(without
losing any backup quality or quantity), to annotate changes made to a file, to
allow other people to work on a file and an easy method to package patch/diff
files for distribution.&lt;/p&gt;
&lt;p&gt;If you want more in-depth information about using &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, or when you find you
need more functionality from &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, there is a HOW-TO at &lt;a href=http://www.tldp.org class="reference external"&gt;The Linux
Documentation Project&lt;/a&gt; (&lt;a href=http://tldp.org/HOWTO/RCS.html class="reference external"&gt;direct link&lt;/a&gt;) and fantastic documentation is
provided with the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=diving-in class=section&gt;
&lt;h2&gt;Diving in&lt;a title="Permalink to this headline" href=/articles/rcs.html#diving-in class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is that simple to use that I will jump straight in to an example.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; mkdir RCS
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; directory holds the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; control files, they contain all the data
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; needs to work.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; cat &amp;gt;myscript.sh &amp;lt;&amp;lt;EOF
&lt;span class=gp&gt;#&lt;/span&gt;! /bin/sh
&lt;span class=gp&gt;#&lt;/span&gt; &lt;span class=nv&gt;$Id&lt;/span&gt;$
&lt;span class=go&gt;echo "Hello World!"&lt;/span&gt;
&lt;span class=go&gt;exit 0&lt;/span&gt;
&lt;span class=go&gt;EOF&lt;/span&gt;

&lt;span class=gp&gt;$&lt;/span&gt; ci myscript.sh
&lt;span class=go&gt;RCS/myscript.sh,v  &amp;lt;--  myscript.sh&lt;/span&gt;
&lt;span class=go&gt;enter description, terminated with single '.' or end of file:&lt;/span&gt;
&lt;span class=go&gt;NOTE: This is NOT the log message!&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt; /bin/sh &lt;span class=s2&gt;"Hello World!"&lt;/span&gt; example
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt; .
&lt;span class=go&gt;initial revision: 1.1&lt;/span&gt;
&lt;span class=go&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;strong class=command&gt;ci&lt;/strong&gt; (check in) is where the magic of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; takes place.
We have decided we want to make a snapshot of our file, &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;myscript.sh&lt;/span&gt;&lt;/code&gt;,
and use &lt;strong class=command&gt;ci&lt;/strong&gt; to add the file to revision control.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; ls
&lt;span class=go&gt;RCS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The file we checked in appears to have disappeared, obviously it hasn’t but the
default behaviour of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is to remove the file we check in. You can choose to
keep a working copy with &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt; &lt;span class=pre&gt;-u&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt; &lt;span class=pre&gt;-l&lt;/span&gt;&lt;/code&gt; (covered below).&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; ls ./RCS/
&lt;span class=go&gt;myscript.sh,v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; directory a file now exists with the same name as our script plus
a &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;,v&lt;/span&gt;&lt;/code&gt;. This is the file &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses to store all of its data in.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; co myscript.sh
&lt;span class=go&gt;RCS/myscript.sh,v  --&amp;gt;  myscript.sh&lt;/span&gt;
&lt;span class=go&gt;revision 1.1&lt;/span&gt;
&lt;span class=go&gt;done&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; ls -l ./
&lt;span class=go&gt;drwxr-xr-x    2 james    james        1024 Nov  4 11:29 RCS&lt;/span&gt;
&lt;span class=go&gt;-r--r--r--    1 james    james          95 Nov  4 11:29 myscript.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;strong class=command&gt;co&lt;/strong&gt; (check out) pulls a current version(by default) from
the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; repository and places it in the current directory. Default behaviour
is to check out a read-only version of the file.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; co -l myscript.sh
&lt;span class=go&gt;./RCS/myscript.sh,v  --&amp;gt;  ./myscript.sh&lt;/span&gt;
&lt;span class=go&gt;revision 1.1 (locked)&lt;/span&gt;
&lt;span class=go&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/zipfile.html#cmdoption-zipfile-l class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option to &lt;strong class=command&gt;co&lt;/strong&gt; (and also &lt;strong class=command&gt;ci&lt;/strong&gt; ) is used to
lock the file. This file now becomes a working file, which is writable, and it
also means other people can’t edit it until you have released it or checked it
in again.&lt;/p&gt;
&lt;p&gt;Blindly using the &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/zipfile.html#cmdoption-zipfile-l class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-l&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option to &lt;strong class=command&gt;ci&lt;/strong&gt;/&lt;strong class=command&gt;co&lt;/strong&gt; is not
advisable, you should get in to the habit now of only locking files you are
working on.  &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses locking to block other users from checking in changes
and will cause much grief if you use &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; on multi-user projects. It is much
better to use &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/using/cmdline.html#cmdoption-u class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-u&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; (or unlocked) when you &lt;strong class=command&gt;ci&lt;/strong&gt; in new
files/changes this way you will have access to a read-only version of the file
and it will allow other users to edit it.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; cat myscript.sh
&lt;span class=gp&gt;#&lt;/span&gt;! /bin/sh
&lt;span class=gp&gt;#&lt;/span&gt; &lt;span class=nv&gt;$Id&lt;/span&gt;: myscript.sh,v &lt;span class=m&gt;1&lt;/span&gt;.1 &lt;span class=m&gt;2002&lt;/span&gt;/11/04 &lt;span class=m&gt;11&lt;/span&gt;:29:48 james Exp james $
&lt;span class=go&gt;echo "Hello World!"&lt;/span&gt;
&lt;span class=go&gt;exit 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you remember from the original file it contained &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt; on a commented
line, this &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt; is a keyword used by &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; that is substituted with
information about the current file. In this example the tag &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt; is
expanded to read the filename, the revision number, the date and time of the
check in, the person who checked in the file, the state of the file and the
owner of the lock(if any).&lt;/p&gt;
&lt;p&gt;There are many keywords available, including:&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Author$&lt;/span&gt;&lt;/code&gt; - the name of the person who did the check in&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Header$&lt;/span&gt;&lt;/code&gt; - the same as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt; but including the path for the file&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Log$&lt;/span&gt;&lt;/code&gt; - a full changelog for file from the &lt;strong class=command&gt;ci&lt;/strong&gt; annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although using &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Log$&lt;/span&gt;&lt;/code&gt; seems like a good idea it does mean the size of the
file is increased a huge amount. All the changelog data is available with the
&lt;strong class=command&gt;rlog&lt;/strong&gt; command at any time and without filling the source file.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; sed -ie &lt;span class=s1&gt;'s/World/${USER}/'&lt;/span&gt; myscript.sh
&lt;span class=gp&gt;$&lt;/span&gt; cat myscript.sh
&lt;span class=gp&gt;#&lt;/span&gt;! /bin/sh
&lt;span class=gp&gt;#&lt;/span&gt; &lt;span class=nv&gt;$Id&lt;/span&gt;: myscript.sh,v &lt;span class=m&gt;1&lt;/span&gt;.1 &lt;span class=m&gt;2002&lt;/span&gt;/11/04 &lt;span class=m&gt;11&lt;/span&gt;:29:48 james Exp james $
&lt;span class=go&gt;echo "Hello ${USER}!"&lt;/span&gt;
&lt;span class=go&gt;exit 0&lt;/span&gt;
&lt;span class=gp&gt;$&lt;/span&gt; sh ./myscript.sh
&lt;span class=go&gt;Hello james!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So we have decided to make some changes to the file, and then tested it
works.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; rcsdiff myscript.sh
&lt;span class=go&gt;===================================================================&lt;/span&gt;
&lt;span class=go&gt;RCS file: RCS/myscript.sh,v&lt;/span&gt;
&lt;span class=go&gt;retrieving revision 1.1&lt;/span&gt;
&lt;span class=go&gt;diff -r1.1 myscript.sh&lt;/span&gt;
&lt;span class=go&gt;3c3&lt;/span&gt;
&lt;span class=go&gt;&amp;lt; echo "Hello World!"&lt;/span&gt;
&lt;span class=go&gt;---&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt; &lt;span class=nb&gt;echo&lt;/span&gt; &lt;span class=s2&gt;"Hello &lt;/span&gt;&lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;USER&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt;&lt;span class=s2&gt;!"&lt;/span&gt;
&lt;span class=go&gt;TEST$  rcsdiff -u myscript.sh&lt;/span&gt;
&lt;span class=go&gt;===================================================================&lt;/span&gt;
&lt;span class=go&gt;RCS file: RCS/myscript.sh,v&lt;/span&gt;
&lt;span class=go&gt;retrieving revision 1.1&lt;/span&gt;
&lt;span class=go&gt;diff -u -r1.1 myscript.sh&lt;/span&gt;
&lt;span class=go&gt;--- myscript.sh 2002/11/04 11:57:51     1.1&lt;/span&gt;
&lt;span class=go&gt;+++ myscript.sh 2002/11/05 03:52:14&lt;/span&gt;
&lt;span class=go&gt;@@ -1,4 +1,4 @@&lt;/span&gt;
&lt;span class=gp&gt; #&lt;/span&gt;! /bin/sh
&lt;span class=gp&gt; #&lt;/span&gt; &lt;span class=nv&gt;$Id&lt;/span&gt;: myscript,v &lt;span class=m&gt;1&lt;/span&gt;.1 &lt;span class=m&gt;2002&lt;/span&gt;/11/04 &lt;span class=m&gt;11&lt;/span&gt;:29:48 james Exp james $
&lt;span class=go&gt;-echo "Hello World!"&lt;/span&gt;
&lt;span class=go&gt;+echo "Hello ${USER}!"&lt;/span&gt;
&lt;span class=go&gt; exit 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;strong class=command&gt;rcsdiff&lt;/strong&gt; supplies an easy way to check changes in a file.
Using &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/code&gt; will output a generic context-free diff(and a small
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; header to &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;stderr&lt;/span&gt;&lt;/code&gt; ), or you can pass normal &lt;strong class=command&gt;diff&lt;/strong&gt; options to
&lt;strong class=command&gt;rcsdiff&lt;/strong&gt;.  In the second &lt;strong class=command&gt;rcsdiff&lt;/strong&gt; command the
&lt;strong class=command&gt;diff&lt;/strong&gt; option &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/using/cmdline.html#cmdoption-u class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-u&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; is given to tell &lt;strong class=command&gt;rcsdiff&lt;/strong&gt; it
should output a unified context diff.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; ci -u ./myscript.sh
&lt;span class=go&gt;./RCS/myscript.sh,v  &amp;lt;--  ./myscript.sh&lt;/span&gt;
&lt;span class=go&gt;new revision: 1.2; previous revision: 1.1&lt;/span&gt;
&lt;span class=go&gt;enter log message, terminated with single '.' or end of file:&lt;/span&gt;
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt; Changed World to &lt;span class=si&gt;${&lt;/span&gt;&lt;span class=nv&gt;USER&lt;/span&gt;&lt;span class=si&gt;}&lt;/span&gt; to give a more personal feeling
&lt;span class=gp&gt;&amp;gt;&lt;/span&gt;&amp;gt; .
&lt;span class=go&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So now we have seen the changes made to the file, and are happy with them, we
check in our new revision.  &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; asks for a log entry, this will make our
changelog output later. You can cancel the check in using the normal &lt;code class="kbd docutils literal"&gt;&lt;span class=pre&gt;C-c&lt;/span&gt;&lt;/code&gt;
(control C) method.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; cat myscript.sh
&lt;span class=gp&gt;#&lt;/span&gt;! /bin/sh
&lt;span class=gp&gt;#&lt;/span&gt; &lt;span class=nv&gt;$Id&lt;/span&gt;: myscript,v &lt;span class=m&gt;1&lt;/span&gt;.2 &lt;span class=m&gt;2002&lt;/span&gt;/11/04 &lt;span class=m&gt;11&lt;/span&gt;:34:21 james Exp james $
&lt;span class=go&gt;echo "Hello ${USER}!"&lt;/span&gt;
&lt;span class=go&gt;exit 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can see above that when &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; checked in the new revision it also updated
the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class=highlight-console&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=gp&gt;$&lt;/span&gt; rlog ./myscript.sh

&lt;span class=go&gt;RCS file: ./RCS/myscript.sh,v&lt;/span&gt;
&lt;span class=go&gt;Working file: ./myscript.sh&lt;/span&gt;
&lt;span class=go&gt;head: 1.2&lt;/span&gt;
&lt;span class=go&gt;branch:&lt;/span&gt;
&lt;span class=go&gt;locks: strict&lt;/span&gt;
&lt;span class=go&gt;access list:&lt;/span&gt;
&lt;span class=go&gt;symbolic names:&lt;/span&gt;
&lt;span class=go&gt;keyword substitution: kv&lt;/span&gt;
&lt;span class=go&gt;total revisions: 2;     selected revisions: 2&lt;/span&gt;
&lt;span class=go&gt;description:&lt;/span&gt;
&lt;span class=go&gt;----------------------------&lt;/span&gt;
&lt;span class=go&gt;revision 1.2&lt;/span&gt;
&lt;span class=go&gt;date: 2002/11/05 04:01:13;  author: james;  state: Exp;  lines: +2 -2&lt;/span&gt;
&lt;span class=go&gt;Changed World to ${USER} to give a more personal feeling&lt;/span&gt;
&lt;span class=go&gt;----------------------------&lt;/span&gt;
&lt;span class=go&gt;revision 1.1&lt;/span&gt;
&lt;span class=go&gt;date: 2002/11/04 11:57:51;  author: james;  state: Exp;&lt;/span&gt;
&lt;span class=go&gt;Initial revision&lt;/span&gt;
&lt;span class=go&gt;=============================================================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;strong class=command&gt;rlog&lt;/strong&gt; provides quick access to revision history for
files, it accepts multiple files per command line(using normal shell
wild-carding) and provides all the information &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; has on a file. Should you
ever need to only know the changes that were made to the current revision you
can use the &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/trace.html#cmdoption-trace-r class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option as in &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt; &lt;span class=pre&gt;-r&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/code&gt;. You can also check
changes between revisions of files using the command like &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rlog&lt;/span&gt; &lt;span class=pre&gt;-r1.1,1.2&lt;/span&gt;
&lt;span class=pre&gt;filename&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/trace.html#cmdoption-trace-r class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; option of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is one of its most powerful, it is available
in all the commands and shares the same semantics throughout. If &lt;a title="(in Python v3.6)" href=https://docs.python.org/3/library/trace.html#cmdoption-trace-r class="reference external"&gt;&lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;-r&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
is used with &lt;strong class=command&gt;ci&lt;/strong&gt; it forces a bump, for example &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;ci&lt;/span&gt; &lt;span class=pre&gt;-r1.7&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/code&gt;
will force &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; to check in filename as revision 1.7. Used with &lt;strong class=command&gt;co&lt;/strong&gt;
you can pull any revision of the file from &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; history. Used with
&lt;strong class=command&gt;rcsdiff&lt;/strong&gt; you can create a diff between any revision under &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt;, for
example &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;rcsdiff&lt;/span&gt; &lt;span class=pre&gt;-r1.1,1.8&lt;/span&gt; &lt;span class=pre&gt;-u&lt;/span&gt; &lt;span class=pre&gt;filename&lt;/span&gt;&lt;/code&gt; will output a unified context diff of
the changes from revision
1.1 to 1.8.&lt;/p&gt;
&lt;p&gt;&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; really is that simple to use, it does have many more options that are not
covered here(see the man pages) but the power of &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; is how simple it is to
use.  It takes almost no time to setup, and probably less time then you
currently spend on arranging backups. The command syntax is simple, and stable
across the separate commands. It provides an immensely powerful way to control
configuration files, source code, even revisions of binary files and of course
silly little shell Hello World examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=recap class=section&gt;
&lt;h2&gt;Recap&lt;a title="Permalink to this headline" href=/articles/rcs.html#recap class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To recap on &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; usage&lt;/p&gt;
&lt;ul class=simple&gt;
&lt;li&gt;&lt;p&gt;Make the &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;RCS&lt;/span&gt;&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Insert &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; tags, such as &lt;code class="docutils literal"&gt;&lt;span class=pre&gt;$Id$&lt;/span&gt;&lt;/code&gt;, in to your original files to help you
keep track.  - Edit your files.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong class=command&gt;ci&lt;/strong&gt; to commit your revisions to the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; history and annotate
changes made. You can also use &lt;strong class=command&gt;rcsdiff&lt;/strong&gt; to see what changes you
have made, maybe to help you build your changelog information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=advanced class=section&gt;
&lt;h2&gt;Advanced&lt;a title="Permalink to this headline" href=/articles/rcs.html#advanced class=headerlink&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class=figure&gt;
&lt;a href=/_images/rcsi.png class="reference internal image-reference"&gt;&lt;img style="width: 500px; height: 114px;" src=/_images/rcsi.png alt="rcsi screenshot"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;There are many tools available that can help you to manage your &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; files,
including the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; status monitor &lt;a href=http://www.colinbrough.pwp.blueyonder.co.uk/rcsi.README.html class="reference external"&gt;rcsi&lt;/a&gt; and &lt;a href=http://blame.sourceforge.net/ class="reference external"&gt;blame&lt;/a&gt; &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; file annotator.&lt;/p&gt;
&lt;p&gt;&lt;strong class=command&gt;rcsi&lt;/strong&gt; will display information about the files within a directory.&lt;/p&gt;
&lt;p&gt;The screenshot to the right shows &lt;strong class=command&gt;rcsi&lt;/strong&gt; in use on a sample partially
&lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; controlled directory.  All the information it contains should be fairly
self explanatory, and even if it isn’t the package comes with a comprehensive
man page and &lt;code class="file docutils literal"&gt;&lt;span class=pre&gt;README&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=highlight-text&gt;&lt;div class=highlight&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1.2          (root     21-Aug-05):             eval find . -xdev -depth ${exceptions}   -type d -empty -exec rmdir '{}' \\';'
1.2          (root     21-Aug-05):             eend 0
1.2          (root     21-Aug-05):         else
1.1          (root     16-Jul-05):             ebegin "Cleaning /tmp directory"
1.4          (root     21-Jan-06):             {
1.2          (root     21-Aug-05):                 rm -f /tmp/.X*-lock /tmp/esrv* /tmp/kio* /tmp/jpsock.* /tmp/.fam*
1.2          (root     21-Aug-05):                 rm -rf /tmp/.esd* /tmp/orbit-* /tmp/ssh-* /tmp/ksocket-* /tmp/.*-unix
1.4          (root     21-Jan-06):                 # Make sure our X11 stuff have the correct permissions
1.4          (root     21-Jan-06):                 mkdir -p /tmp/.{ICE,X11}-unix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above excerpt is a sample of the output from &lt;a href=http://blame.sourceforge.net/ class="reference external"&gt;blame&lt;/a&gt; being run against
a config file which is maintained using &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; by Gentoo’s
&lt;strong class=command&gt;dispatch-conf&lt;/strong&gt; tool.  It allows you to simply see which revision
introduced a change to a specific line.  You can also choose to annotate
specific &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; revisions using the &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;--revision&lt;/span&gt;&lt;/code&gt; option, or specific
dates with &lt;code class="xref std std-option docutils literal"&gt;&lt;span class=pre&gt;--date&lt;/span&gt;&lt;/code&gt; option.  &lt;a href=http://blame.sourceforge.net/ class="reference external"&gt;blame&lt;/a&gt; has also has a very comprehensive
manual page included with it which you should read if you want to enjoy its
full power.&lt;/p&gt;
&lt;p&gt;There are many other tools available which use &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; as a backend, and as long
as you can access the &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; data files blame can help to understand what is
happening with them too.&lt;/p&gt;
&lt;p&gt;If you know of any interesting &lt;abbr title="GNU Revision Control System"&gt;RCS&lt;/abbr&gt; uses please drop me a mail, and I hope
this short text has been helpful to you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>