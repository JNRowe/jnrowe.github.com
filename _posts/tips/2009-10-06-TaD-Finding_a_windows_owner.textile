---
layout: post
title: Tip-a-day - Finding a window's owner
description: Tracking down windows
categories: [tad, tips, _NET_WM_PID, WM_COMMAND, xprop]
---

Rach Holmes asks on our Linux list:

bq. How do I find out what app keeps opening that annoying window in gnome?

Jack McIntyre made a couple of outstanding correct guesses, but predictably Rach still wanted to know a generic solution and I offer this tip in response.

h3. The easy way

Many windows define a @WM_COMMAND@ property that is set to the command name of the application, if that exists all we have to do is read it:

{% highlight text %}
0 jay@kate ~/Desktop/jnrowe.github.com (master) $ xprop  | grep WM_COMMAND
WM_COMMAND(STRING) = { "urxvt", "-cd", "/home/jay/Desktop" }
{% endhighlight %}

However, not all applications set this property.  Examples of applications that don't set this property include "firefox":http://www.mozilla.com/firefox and "gimp":http://www.gimp.org/.  In fact, many of the modern applications you find on desktop systems don't set this property at all.

h3. The other way

"EWMH(Extended Window Manager Hints)":http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html defines a property called @_NET_WM_PID@ that, if defined, is the process id of the application that opened the window.  We have a couple of options to access that property, my favourite would be "wmctrl":http://sweb.cz/tripie/utils/wmctrl/ and another would be "xprop":http://www.xfree86.org/current/xprop.1.html which is often installed by default.

{% highlight text %}
0 jay@kate ~/Desktop/jnrowe.github.com (master) $ wmctrl -lp
0x01200003  2 13398  kate 2009-10-06-TaD-Finding_a_windows_owner.textile [+] - gvim
0x01000006  3 9992   kate Irssi: [JNR___@freenode] [#github]
0x00c00005  1 10134  kate SpotMe - Opera
0x00600019  0 9992   kate jay@kate:~/Desktop/jnrowe.github.com
0 jay@kate ~/Desktop/jnrowe.github.com (master) $ xprop | awk '/_NET_WM_PID/ {print $NF}'
9992
0 jay@kate ~/Desktop/jnrowe.github.com (master) $ tr '\000'  ' ' < /proc/9992/cmdline
/usr/bin/urxvtd -q -f -o
{% endhighlight %}

The @wmctrl@ output has five aligned columns.  The first is the window id, the second the desktop is visible on, the third is the process id, the fourth is the client machine and the fifth is the window's title string.  And with the @xprop@ example we must select a window with the mouse when calling @xprop@, and then we pluck the process id from the output.

The @cmdline@ value for the process from "procfs":http://blogs.sun.com/eschrock/entry/the_power_of_proc is finally read.  The @tr@ command is needed because options are separated by null terminators.

h3. The problems

Back to the original question and Rach was looking for a way to stop the window from showing up, the immediate response to the annoying window problem is to find its process id and send it a @SIGTERM@.  It seems like a reasonable idea, but I've been choosing the @urxvtd@ examples on purpose to prove a point.

@urxvtd@ is the terminal daemon provided by "rxvt-unicode":http://software.schmorp.de/, all terminals that are spawned by it will have the same @_NET_WM_PID@ value and @WM_COMMAND@ string.  This isn't just an issue with @urxvtd@ either, it happens with all applications that operate in this way.  Sending a @SIGTERM@ to every terminal opened by @urxvtd@ probably isn't what we would want to do, so you should always think very carefully before sending terminate signals.

