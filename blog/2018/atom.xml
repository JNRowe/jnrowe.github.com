<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">JNRowe - Posted in 2018</title>
  <id>https://jnrowe.github.io/blog/2018/atom.xml</id>
  <updated>2018-11-13T00:00:00Z</updated>
  <link href="https://jnrowe.github.io/" />
  <link href="https://jnrowe.github.io/blog/2018/atom.xml" rel="self" />
  <subtitle type="text">Ramblings of a tired mind</subtitle>
  <generator uri="http://ablog.readthedocs.org" version="0.9.2">ABlog</generator>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">Visualising the progress of time</title>
    <id>https://jnrowe.github.io/articles/march_toward_death.html</id>
    <updated>2018-11-13T00:00:00Z</updated>
    <published>2018-11-13T00:00:00Z</published>
    <link href="https://jnrowe.github.io/articles/march_toward_death.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;visualising-the-progress-of-time&quot;&gt;

&lt;a class=&quot;reference external image-reference&quot; href=&quot;https://www.progressbarosx.com/&quot;&gt;&lt;img alt=&quot;Screenshot of Progress Bar OSX in action&quot; src=&quot;../_images/time_progress.jpg&quot; /&gt;&lt;/a&gt;
&lt;p&gt;A co-worker was demoing a user session today, and pointed out a neat tool for
MacOS that displays the “continual march toward death”.  That tool was
&lt;a class=&quot;reference external&quot; href=&quot;https://www.progressbarosx.com/&quot;&gt;Progress Bar OSX&lt;/a&gt;, and it is pretty cool.  Sadly it is only available for
MacOS, so we’ll need to make something similar.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All&lt;/em&gt; popup problems on Linux should be solved with &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/robm/dzen&quot;&gt;dzen&lt;/a&gt;, it is awesome.  You
know this because it comes equipped with the option to produce &lt;abbr title=&quot;Knight Industries Two Thousand&quot;&gt;KITT&lt;/abbr&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://en.m.wikipedia.org/wiki/KITT&quot;&gt;Anamorphic Equalizer&lt;/a&gt; emulation.&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;id5&quot;&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;../_static/kitt.gif&quot;&gt;&lt;img alt=&quot;Multi-band scanner in action&quot; src=&quot;../_images/kitt06.png&quot; /&gt;&lt;/a&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span class=&quot;caption-text&quot;&gt;Click the image for an animated GIF, I’ll spare you the flashing lights in
case you wish to read on.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-one&quot;&gt;
&lt;h2&gt;Step one&lt;/h2&gt;
&lt;p&gt;First we’ll want to display the year:&lt;/p&gt;
&lt;div class=&quot;highlight-sh notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gdbar -w &lt;span class=&quot;m&quot;&gt;1500&lt;/span&gt; -h &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(($(&lt;/span&gt;date +%j&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date -d&lt;span class=&quot;s1&quot;&gt;&amp;#39;Dec 31&amp;#39;&lt;/span&gt; +%j&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.0 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; dzen2 -p &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which results in:&lt;/p&gt;
&lt;img alt=&quot;Screenshot of simple day of year bar on 2018-11-13&quot; src=&quot;../_images/day_bar.png&quot; /&gt;
&lt;p&gt;The logic should be simple enough to follow:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;year&lt;/span&gt;&lt;/code&gt;&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; / &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;year&lt;/span&gt;&lt;/code&gt;&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt; * &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;100&lt;/span&gt;&lt;/code&gt; for
position in year as percentage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate the &lt;strong class=&quot;command&quot;&gt;dzen2&lt;/strong&gt; markup for a bar of &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;1500&lt;/span&gt;&lt;/code&gt; pixels wide and
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;20&lt;/span&gt;&lt;/code&gt; pixels high&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display it for for &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;5&lt;/span&gt;&lt;/code&gt; seconds&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can repeat the same process for day ratio; using &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;&amp;quot;00:00&amp;quot;&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;+%s&lt;/span&gt;&lt;/code&gt; to
calculate number of seconds passed from the 86400 we’ll see today.  And then
simply using &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;+%m&lt;/span&gt;&lt;/code&gt; to get today’s month as a number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-two&quot;&gt;
&lt;h2&gt;Step two&lt;/h2&gt;
&lt;p&gt;We can definitely up our game here.  Why not use colours?  We’ll switch to
&lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; now, as the gigantic standard library allows us to be lazy.&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pcnt_colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{min(int(n*256), 255):02x}&amp;#39;&lt;/span&gt;
                         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorsys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hls_to_rgb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The function above converts a percentage value in to a hex triplet across
a green to red gradient, we use &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/colorsys.html#colorsys.hls_to_rgb&quot; title=&quot;(in Python v3.7)&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;hls_to_rgb()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; here as the &lt;a class=&quot;reference external&quot; href=&quot;https://en.m.wikipedia.org/wiki/HLS_color_space&quot;&gt;HLS
colour space&lt;/a&gt; is more amenable to generating smooth gradients.&lt;/p&gt;
&lt;p&gt;Now that we’re using &lt;a class=&quot;reference external&quot; href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; we may as well take advantage of its
&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/calendar.html#module-calendar&quot; title=&quot;(in Python v3.7)&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;calendar&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module:&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;month_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monthrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/calendar.html#calendar.monthrange&quot; title=&quot;(in Python v3.7)&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;monthrange()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; function returns a tuple where the second item
is the number of days in the current month.&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;days_in_year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isleap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;366&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3/library/calendar.html#calendar.isleap&quot; title=&quot;(in Python v3.7)&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;isleap()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; allows us to offload figuring out whether 2700 is
a leap year once senility begins to set in.&lt;/p&gt;
&lt;div class=&quot;highlight-default notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gdbar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;-fg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;pcnt_colour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll also create a utility function to generate the &lt;strong class=&quot;command&quot;&gt;dzen2&lt;/strong&gt; markup
required to output our little blocks of data.&lt;/p&gt;
&lt;p&gt;Putting it altogether we can display our pretty little blocks with something
like the following:&lt;/p&gt;
&lt;div class=&quot;highlight-shell notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./time_progress.py -w &lt;span class=&quot;m&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; dzen2 -l &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; -p &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; -fn monospace-15 -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;onstart=uncollapse&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This creates the markup and makes &lt;strong class=&quot;command&quot;&gt;dzen2&lt;/strong&gt; display the output for
3 seconds.&lt;/p&gt;
&lt;img alt=&quot;Screenshot of colourful progress in time&quot; src=&quot;../_images/progress_bar.png&quot; /&gt;
&lt;p&gt;The &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;onstart=uncollapse&lt;/span&gt;&lt;/code&gt; attribute tell &lt;strong class=&quot;command&quot;&gt;dzen2&lt;/strong&gt; that we want to see
the full output on startup, without it we’d see just the title bar until we
moved our pointer over the header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step-four&quot;&gt;
&lt;h2&gt;Step four&lt;/h2&gt;
&lt;p&gt;You can find the script I used &lt;a class=&quot;reference download internal&quot; download=&quot;&quot; href=&quot;../_downloads/532537fa2e75eea4fdea920b6b2b7bb0/time_progress.py&quot;&gt;&lt;code class=&quot;xref download docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;here&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.  It isn’t
pretty, but it will do.  If I come to depend on it I’m sure that I’ll make
something better.&lt;/p&gt;
&lt;p&gt;I think it is important to note that if you’ve got this far and you’re thinking
about doing this yourself you should consider buying the &lt;a class=&quot;reference external&quot; href=&quot;https://www.progressbarosx.com/&quot;&gt;Progress Bar OSX&lt;/a&gt;
app.  This document wouldn’t exist without it and rewarding creators is
important, even when they ignore your chosen platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;step&quot;&gt;
&lt;h2&gt;Step ∞&lt;/h2&gt;
&lt;p&gt;As always with any code that touches dates &lt;a class=&quot;reference external&quot; href=&quot;https://en.m.wikipedia.org/wiki/Here_be_dragons&quot;&gt;“Here be dragons”&lt;/a&gt;.  For example,
I’ll leave it as an exercise for the reader how to handle calculations for days
with &lt;abbr title=&quot;Daylight Saving Time&quot;&gt;DST&lt;/abbr&gt; transitions.&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;id3&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;strong class=&quot;command&quot;&gt;date&lt;/strong&gt;’s &lt;code class=&quot;xref std std-option docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;%j&lt;/span&gt;&lt;/code&gt; format gives us the day of year, see
&lt;em class=&quot;manpage&quot;&gt;strftime(3)&lt;/em&gt; if this is new to you.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id4&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Calculating the day of year for December 31ˢᵗ allows to work in leap
years.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">Evil Emacs steals my heart</title>
    <id>https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html</id>
    <updated>2018-11-05T00:00:00Z</updated>
    <published>2018-11-05T00:00:00Z</published>
    <link href="https://jnrowe.github.io/articles/evil_emacs_steals_my_heart.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;evil-emacs-steals-my-heart&quot;&gt;

&lt;p&gt;&lt;em&gt;Many&lt;/em&gt; of my co-workers use &lt;a class=&quot;reference external&quot; href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;emacs&lt;/a&gt;, it is probably the most popular editor on
our team and I understand why.&lt;/p&gt;
&lt;img alt=&quot;Editor icons&quot; class=&quot;align-right&quot; src=&quot;../_images/standoff.png&quot; /&gt;
&lt;p&gt;I was an &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; user — via &lt;a class=&quot;reference external&quot; href=&quot;ftp://ftp.cs.helsinki.fi/pub/Software/Local/uEmacs-PK/&quot;&gt;MicroEMACS&lt;/a&gt; and later &lt;a class=&quot;reference external&quot; href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;GNU Emacs&lt;/a&gt; — for many
years but at some point I switched to &lt;a class=&quot;reference external&quot; href=&quot;https://vim.sourceforge.io/&quot;&gt;vim&lt;/a&gt;.  I can’t even remember the exact
catalyst for change, but I am pretty fickle so it may not have even been all
that important.&lt;/p&gt;
&lt;p&gt;Lately, I’ve found myself diving back in to &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt;.  In large part this is
because of &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil&lt;/a&gt;; I can be &lt;em&gt;in&lt;/em&gt; &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt;, but &lt;em&gt;live&lt;/em&gt; &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;evil-isnt-always-evil&quot;&gt;
&lt;h2&gt;Evil isn’t always evil&lt;/h2&gt;
&lt;p&gt;So, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;evil-mode&lt;/span&gt;&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; awesome.&lt;/p&gt;
&lt;p&gt;The kindest thing I can think to say about it is this: You’ll be angry when it
doesn’t work&lt;/p&gt;
&lt;p&gt;This isn’t because it often breaks, quite the contrary.  It is simply because
it feels largely seamless.  I’ll give an example that mimics a recent session
to make my point.  For example, you’re hovering over a number you need to
change:&lt;/p&gt;
&lt;div class=&quot;highlight-c notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;magic_const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;974&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt;, you can execute &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;ciw&amp;lt;C-r&amp;gt;=&amp;#64;&amp;quot;/2&amp;lt;CR&amp;gt;&lt;/kbd&gt; to cleave the number.  The
command itself is saying:&lt;/p&gt;
&lt;dl class=&quot;simple&quot;&gt;
&lt;dt&gt;&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;ciw&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Change the word my cursor is on(&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;c&lt;/kbd&gt;hange &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;i&lt;/kbd&gt;nner &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;w&lt;/kbd&gt;ord)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;&amp;lt;C-r&amp;gt;=&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Insert the result of an expression(see &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:h&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;i_CTRL-R_=&lt;/span&gt;&lt;/code&gt; for awesomeness)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;&amp;#64;&amp;quot;&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the text from last filled register, ie the text we just marked to be
changed&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;/2&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Half it&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;&amp;lt;CR&amp;gt;&lt;/kbd&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Wow.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&quot;highlight-c notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;magic_const&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;487&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Whilst performing the same task thing in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;evil-mode&lt;/span&gt;&lt;/code&gt; I receive an error.
Emacs — quite rightly — expects you to write an &lt;a class=&quot;reference external&quot; href=&quot;https://en.m.wikipedia.org/wiki/Elisp&quot;&gt;elisp&lt;/a&gt; expression.  There is
nothing wrong with this, but it is a sign of how good &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is.  It is
literally &lt;em&gt;so&lt;/em&gt; good I forget I’m not using &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Oftentimes a tool’s &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; emulation can be summed up as needing to press
a key that kind of matches what something in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; might be, assuming you
didn’t really know what the key might be or when you’d use it.  Be that
&lt;a class=&quot;reference external&quot; href=&quot;https://www.sublimetext.com&quot;&gt;sublimetext&lt;/a&gt;’s &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vintage&lt;/span&gt;&lt;/code&gt; package that isn’t much more than normal and insert
mode, or &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/gentoo/elogv&quot;&gt;elogv&lt;/a&gt;’s bindings that mean you have to issue &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;dd&lt;/kbd&gt; to kill an
entry.  Frankly, many of the emulation layers often feel like you’re just
doubling the number of keys you have to press without any benefits&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id4&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;quirking-the-quirky&quot;&gt;
&lt;h2&gt;Quirking the quirky&lt;/h2&gt;
&lt;img alt=&quot;Emacs screenshot&quot; class=&quot;align-right&quot; src=&quot;../_images/evil_emacs.png&quot; style=&quot;width: 407.5px; height: 270.0px;&quot; /&gt;
&lt;p&gt;I’ll freely admit I’ve &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt;ified my &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt;.  I use &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/emacs-evil/evil&quot;&gt;evil&lt;/a&gt;, my mode line
uses &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/milkypostman/powerline/&quot;&gt;powerline&lt;/a&gt; to match &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/vim-airline/vim-airline&quot;&gt;vim-airline&lt;/a&gt;.  I have &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;zap-up-to-char&lt;/span&gt;&lt;/code&gt; mapped so
that I can mimic &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;dt&lt;/kbd&gt; when &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;evil-mode&lt;/span&gt;&lt;/code&gt; is disabled.&lt;/p&gt;
&lt;p&gt;Screenshots for &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; really aren’t all that useful, because it
is the workflow that makes these tools powerful… but, above is my current
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; and below is my current &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt=&quot;vim screenshot&quot; class=&quot;align-left&quot; src=&quot;../_images/delinquent_vim.png&quot; style=&quot;width: 422.0px; height: 263.5px;&quot; /&gt;
&lt;p&gt;The big thing you’ll notice is the fonts.  In &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; I’m using scaled text
for headings in &lt;a class=&quot;reference external&quot; href=&quot;http://docutils.sourceforge.net/docs/user/rst/&quot;&gt;reST&lt;/a&gt; files.  I’m close to believing that headings,
proportional fonts for comments and the occasional inline image are enough to
switch to &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;img alt=&quot;Inline images in Emacs&quot; class=&quot;align-right&quot; src=&quot;../_images/misfeasant_emacs.png&quot; style=&quot;width: 398.5px; height: 225.0px;&quot; /&gt;
&lt;p&gt;In the third image you can see &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; is &lt;em&gt;displaying&lt;/em&gt; the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt;
screenshot in the buffer for &lt;em&gt;this&lt;/em&gt; post.  This example may be quite pointless&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id5&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt;, but it can be nice to have &lt;a class=&quot;reference external&quot; href=&quot;https://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt; output class hierarchies in to
a buffer or database schema popups(like below).&lt;/p&gt;
&lt;img alt=&quot;Schema diagram&quot; class=&quot;align-left&quot; src=&quot;../_images/immoral_model.png&quot; style=&quot;width: 174.5px; height: 141.5px;&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;walking-the-branches&quot;&gt;
&lt;h2&gt;Walking the branches&lt;/h2&gt;
&lt;p&gt;I’ve decided to really dig in this time, not just switch on a whim.  I’m using
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt; &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; for a month, followed by &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; and &lt;em&gt;only&lt;/em&gt;
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; for a month.  I’m busily writing a document of bugbears about both&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id6&quot; id=&quot;id3&quot;&gt;3&lt;/a&gt;, and then figuring out which I want to fully invest in to.  I need to stop
flip-flopping.&lt;/p&gt;
&lt;p&gt;I will say that there isn’t much in it.  With a converging setup there are
fewer and fewer differences to care about.  Things like the expression register
usage above, or built-in versus external HTML preview for documents like this.&lt;/p&gt;
&lt;p&gt;I’m actually wondering whether a &lt;a class=&quot;reference external&quot; href=&quot;https://neovim.io&quot;&gt;neovim&lt;/a&gt; client &lt;em&gt;in&lt;/em&gt; a &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;emacs&lt;/span&gt;&lt;/code&gt; frame would be
the golden option.  If you know of such a thing or a better option, drop me
a &lt;a class=&quot;reference external&quot; href=&quot;mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com&quot;&gt;mail&lt;/a&gt;!&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;id4&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/gentoo/elogv&quot;&gt;elogv&lt;/a&gt; for Gentoo is probably the worst example of this, as &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;d&lt;/kbd&gt;
&lt;em&gt;almost&lt;/em&gt; works like &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; but nothing else does.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id5&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Okay, completely pointless.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id6&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://www.orgmode.org/&quot;&gt;org-mode&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/jceb/vim-orgmode&quot;&gt;vim-orgmode&lt;/a&gt; allows me to keep this across editors.  There
is very little point publishing it, as it can be summed up as “James
pressed &lt;kbd class=&quot;kbd docutils literal notranslate&quot;&gt;&amp;lt;C-x&amp;gt;$something&lt;/kbd&gt; and was surprised.”&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">File renaming for the lazy</title>
    <id>https://jnrowe.github.io/articles/tips/readline_rename_imv.html</id>
    <updated>2018-10-26T00:00:00Z</updated>
    <published>2018-10-26T00:00:00Z</published>
    <link href="https://jnrowe.github.io/articles/tips/readline_rename_imv.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;file-renaming-for-the-lazy&quot;&gt;

&lt;p&gt;Over at HN in a &lt;a class=&quot;reference external&quot; href=&quot;https://news.ycombinator.com/item?id=18290344&quot;&gt;stolen topic&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;however, i miss one feature for which i’d use a filemanager: in-place file
renaming. in most cases when i want to rename a file, i want to change
a small part of it, and i don’t want to have to retype the whole filename.&lt;/p&gt;
&lt;p&gt;i have yet to find a commandline utility (emacs doesn’t count ;-) that
offers that.&lt;/p&gt;
&lt;p class=&quot;attribution&quot;&gt;—em-bee&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;There a few interesting replies there, but I want to flesh out my replies
a little after the fact.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-new-tool-solution&quot;&gt;
&lt;h2&gt;The new tool solution&lt;/h2&gt;
&lt;p&gt;My initial reply was&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If I’m understanding you correctly, then &lt;a class=&quot;reference external&quot; href=&quot;http://www.nongnu.org/renameutils/&quot;&gt;renameutils&lt;/a&gt;’s &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt;&lt;/code&gt; is a great
tool for this.  &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;$filename&lt;/span&gt;&lt;/code&gt; pops you in to a &lt;a class=&quot;reference external&quot; href=&quot;http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html&quot;&gt;readline&lt;/a&gt; enabled prompt
to edit &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;$filename&lt;/span&gt;&lt;/code&gt;.  Given that it is &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;readline&lt;/span&gt;&lt;/code&gt; you can even add
extra options in your &lt;code class=&quot;file docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt; to add additional features to it,
I have mappings for custom directory prefixes for example.&lt;/p&gt;
&lt;p&gt;It also comes with &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;qmv&lt;/span&gt;&lt;/code&gt;, which will pop open an editor for you to
perform inplace edits on filenames.   Which is kinda like &lt;a class=&quot;reference external&quot; href=&quot;https://en.m.wikipedia.org/wiki/Dired&quot;&gt;dired&lt;/a&gt; as an
&lt;a class=&quot;reference external&quot; href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;emacs&lt;/a&gt; comparison, at least if you squint an awful lot.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;I recommend &lt;a class=&quot;reference external&quot; href=&quot;http://www.nongnu.org/renameutils/&quot;&gt;renameutils&lt;/a&gt; a lot.  I’ve given talks that have digressed in to
“why you should use &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;qmv&lt;/span&gt;&lt;/code&gt;”, I’ve mocked co-workers when I’ve spotted them
doing things &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt;&lt;/code&gt; would be a billion times better for, and it looks like
I even &lt;a class=&quot;reference external&quot; href=&quot;https://bugs.gentoo.org/show_bug.cgi?id=64479&quot;&gt;pimped it&lt;/a&gt; to distro folks in the past&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I sped across the usage in the HN comment, but there is some interesting
functionality hidden in there.  As stated, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt;&lt;/code&gt; uses &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;readline&lt;/span&gt;&lt;/code&gt; so you
have an enormous amount of &lt;a class=&quot;reference external&quot; href=&quot;https://tiswww.cwru.edu/php/chet/readline/rluserman.html&quot;&gt;editing power&lt;/a&gt; at your disposal, and it is all the
same stuff you have in your shell; &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;M-{b,f}&amp;gt;&lt;/span&gt;&lt;/code&gt; word jumps, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;M-C-]&amp;gt;&lt;/span&gt;&lt;/code&gt;
character searches, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;C-t&amp;gt;&lt;/span&gt;&lt;/code&gt; to transpose typo fixes, &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;M-[count]&amp;gt;&lt;/span&gt;&lt;/code&gt; repeats,
and many more.&lt;/p&gt;
&lt;p&gt;I also hinted at config file support.  &lt;code class=&quot;file docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.inputrc`&lt;/span&gt;&lt;/code&gt;, or whatever
&lt;span class=&quot;target&quot; id=&quot;index-0&quot;&gt;&lt;/span&gt;&lt;code class=&quot;xref std std-envvar docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;$INPUTRC&lt;/span&gt;&lt;/code&gt; points at, can be used to change the behaviour of all
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;readline&lt;/span&gt;&lt;/code&gt; using tools.  Excitingly though, it can also be used to change the
behaviour of specific tools only.&lt;/p&gt;
&lt;p&gt;For example, I often find myself writing throwaway scripts that I suddenly
decide I’ll want again in the future.  When that happens they move to
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and I can do that with &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt;&lt;/code&gt; by tapping &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; at the
prompt.  This is really useful when I want to rename &lt;code class=&quot;file docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;foo.sh&lt;/span&gt;&lt;/code&gt; to
&lt;code class=&quot;file docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.local/bin/change_the_world.sh&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight-text notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$if imv
    set expand-tilde on
    C-v: &amp;#39;\C-a~/.local/bin\C-i&amp;#39;
$endif
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The above snippet might deserve a little explanation.  The &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;C-v&amp;gt;&lt;/span&gt;&lt;/code&gt; mapping
inputs &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;C-a&amp;gt;&lt;/span&gt;&lt;/code&gt; to move to the beginning of the line, the literal string
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;, and finally the tab character(&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;&amp;lt;C-i&amp;gt;&lt;/span&gt;&lt;/code&gt;)  to expand the tilde
for me.&lt;/p&gt;
&lt;p&gt;Obviously, you can place whatever you want in there.  And if you take advantage
of the application guard as above, you can even override bindings that you
won’t find yourself using in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;imv&lt;/span&gt;&lt;/code&gt; without breaking your shell or other
tools.&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;id5&quot;&gt;
&lt;a class=&quot;reference external image-reference&quot; href=&quot;https://xkcd.com/1806/&quot;&gt;&lt;img alt=&quot;Borrow Your Laptop&quot; src=&quot;../_images/borrow_your_laptop.png&quot; style=&quot;width: 167.0px; height: 246.5px;&quot; /&gt;&lt;/a&gt;
&lt;p class=&quot;caption&quot;&gt;&lt;span class=&quot;caption-text&quot;&gt;As always, &lt;a class=&quot;reference external&quot; href=&quot;https://xkcd.com/&quot;&gt;xkcd&lt;/a&gt; has a pre-canned explanation for why you shouldn’t listen
to me.  Image: &lt;a class=&quot;reference external&quot; href=&quot;http://creativecommons.org/licenses/by-nc/2.5/&quot;&gt;CC by-nc&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-old-tool-solution&quot;&gt;
&lt;h2&gt;The old tool solution&lt;/h2&gt;
&lt;p&gt;My other comment there was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;If you’re a &lt;a class=&quot;reference external&quot; href=&quot;https://www.zsh.org/&quot;&gt;zsh&lt;/a&gt; user you can also use the other &lt;a class=&quot;reference external&quot; href=&quot;https://linux.die.net/man/1/zshexpn&quot;&gt;zshexpn(1)&lt;/a&gt; stuff too.
Like &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;file.ext{,(:r)}&lt;/span&gt;&lt;/code&gt; to perform &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;file.ext&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;file&lt;/span&gt;&lt;/code&gt;, or &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:l&lt;/span&gt;&lt;/code&gt; to
lowercase a filename, or any number of other sometimes useful(and often
pointless things).  I’ve used &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:l&lt;/span&gt;&lt;/code&gt; a number of times, but &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:s&lt;/span&gt;&lt;/code&gt; for
substitution is probably the most useful in general.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;If you’re already using &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;zsh&lt;/span&gt;&lt;/code&gt; (and you should be!), you have an enormously
powerful suite of functionality at your fingertips for every task including
simple renames.&lt;/p&gt;
&lt;p&gt;I’ll show a few examples from a &lt;a class=&quot;reference external&quot; href=&quot;https://linux.die.net/man/1/script&quot;&gt;quick interactive session&lt;/a&gt; to hopefully make
the point.&lt;/p&gt;
&lt;div class=&quot;highlight-zsh notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$   &lt;span class=&quot;c1&quot;&gt;# Real file names from my shared tips folder; co-workers look at&lt;/span&gt;
$   &lt;span class=&quot;c1&quot;&gt;# ``~JNRowe/public/tips`` for the actual content ;)&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; xclip.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:r&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Remove extension&lt;/span&gt;
xclip.rst xclip
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; tile_in_60_seconds.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:u&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Change to all caps&lt;/span&gt;
tile_in_60_seconds.rst TILE_IN_60_SECONDS.RST
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; fzf_pkg_manager.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:u:A&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Change to all caps, and make path absolute&lt;/span&gt;
fzf_pkg_manager.rst /home/jay/export/public/tips/FZF_PKG_MANAGER.RST
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; dc.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:e&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Extract only extension&lt;/span&gt;
dc.rst rst
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ogrmerge_layer_cake.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:A:h:h&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Extract parent directory from file&lt;/span&gt;
ogrmerge_layer_cake.rst /home/jay/export/public
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; xclip.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:s/clip/sel&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Apply substitution of “clip” to “sel”&lt;/span&gt;
xclip.rst xsel.rst
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:s/e/X&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Apply subtitution of “e” to “X”&lt;/span&gt;
emacs_explore.rst Xmacs_explore.rst
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; emacs_explore.rst&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:gs/e/X&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# … add the g flag for global replace&lt;/span&gt;
emacs_explore.rst Xmacs_XxplorX.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;Order matters.  For example: in the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;(:u:A)&lt;/span&gt;&lt;/code&gt; example above we apply the
uppercase filter first, and then convert to an absolute path.  If we’d
reversed the modifiers the &lt;em&gt;entire&lt;/em&gt; path would be converted to uppercase.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The modifiers are &lt;em&gt;hugely&lt;/em&gt; powerful, and are definitely worth the effort to
learn in my opinion.  Combined with the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;readline&lt;/span&gt;&lt;/code&gt; emulation that &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;zsh&lt;/span&gt;&lt;/code&gt;
provides you can do some amazing things at the prompt.&lt;/p&gt;
&lt;p&gt;They’re also available in non-interactive mode when writing scripts, and that
is probably when they’re at their most useful as you can apply them to other
constructs such as arrays as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;thoughts&quot;&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;Small tools that do incredible things are &lt;em&gt;everywhere&lt;/em&gt;, I clearly love
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;renameutils&lt;/span&gt;&lt;/code&gt; but I’d also like to hear about those things you enjoy too.
Drop me a &lt;a class=&quot;reference external&quot; href=&quot;mailto:jnrowe&amp;#37;&amp;#52;&amp;#48;gmail&amp;#46;com&quot;&gt;mail&lt;/a&gt;, link me a blog post or stop me in the corridor to tell me
about them.&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;id3&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lightly edited, because useful markup exists outside of HN.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id4&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;So long ago that &lt;em&gt;I&lt;/em&gt; was surprised to find that out from a &lt;a class=&quot;reference external&quot; href=&quot;http://www.rpcurnow.force9.co.uk/mairix/&quot;&gt;mairix&lt;/a&gt;
search to look for times when I’ve mentioned it.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">Tiling vs tabbing</title>
    <id>https://jnrowe.github.io/articles/tiling_vs_tabbing.html</id>
    <updated>2018-10-08T00:00:00Z</updated>
    <published>2018-10-08T00:00:00Z</published>
    <link href="https://jnrowe.github.io/articles/tiling_vs_tabbing.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;tiling-vs-tabbing&quot;&gt;

&lt;p&gt;A fairly large chunk of my developer friends fawn over &lt;a class=&quot;reference external&quot; href=&quot;https://tmux.github.io/&quot;&gt;tmux&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://tools.suckless.org/tabbed&quot;&gt;tabbed&lt;/a&gt;.
These tools can give &lt;em&gt;the effect&lt;/em&gt; of a multiple window interface to your
terminal sessions, or apply a tabbed interface to any &lt;a class=&quot;reference external&quot; href=&quot;https://standards.freedesktop.org/xembed-spec/xembed-spec-latest.html&quot;&gt;xembed&lt;/a&gt; supporting
application respectively.  I’ll freely admit they’re pretty awesome at what
they do&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id5&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, I’ve never been a fan of them or the plethora of tools like them.
They feel, to me, like they’re attacking the problem from entirely the wrong
side.  Instead of configuring individual applications to behave in a tabbed and
custom way, why not just rely on that behaviour globally?  Allow me to
illustrate with the following examples.&lt;/p&gt;
&lt;img alt=&quot;Example of awesomewm’s tile.right layout&quot; src=&quot;../_images/2018-10-08-tiling.jpg&quot; /&gt;
&lt;p&gt;If I want two terminals next to each other I’ll just switch to a layout that
supports that(in &lt;a class=&quot;reference external&quot; href=&quot;https://awesomewm.org/&quot;&gt;awesomewm&lt;/a&gt; I’d probably choose &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tile.right&lt;/span&gt;&lt;/code&gt;) .  If I want
various image viewer windows open and a nice tabbed interface to access them,
I’ll just tag them all and enable a layout that supports that(such as &lt;a class=&quot;reference external&quot; href=&quot;https://dwm.suckless.org/&quot;&gt;dwm&lt;/a&gt;’s
monocle&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id6&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt;).  If I want to vertically split a terminal window and then
horizontally split that to include a &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; instance, I can just tag those
three windows and enable a layout that supports it&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id7&quot; id=&quot;id3&quot;&gt;3&lt;/a&gt;.  I think the basic
message should be clear by now.&lt;/p&gt;
&lt;div class=&quot;sidebar&quot;&gt;
&lt;p class=&quot;sidebar-title&quot;&gt;Window manager choice&lt;/p&gt;
&lt;p&gt;I’ve used both &lt;a class=&quot;reference external&quot; href=&quot;https://awesomewm.org/&quot;&gt;awesomewm&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;https://dwm.suckless.org/&quot;&gt;dwm&lt;/a&gt; as examples here because I use both
depending on what machine I’m in front of.&lt;/p&gt;
&lt;p&gt;However, you can achieve the same effect with any number of tiling window
managers, or with tools like &lt;a class=&quot;reference external&quot; href=&quot;https://launchpad.net/winwrangler&quot;&gt;winwrangler&lt;/a&gt;&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id8&quot; id=&quot;id4&quot;&gt;4&lt;/a&gt; if your favourite window
manager has weaker layout management.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can go further too.  Say you want &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; and a browser window side by side
while reading documentation but need that &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; instance next to a terminal
for running tests, then you can simply apply two tags to the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; instance
and switch between both layouts with a rattle of the keyboard.  The exact same
interface you’d use for any other layout change too, not one that is specific
to &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tmux&lt;/span&gt;&lt;/code&gt; or &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tabbed&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It seems strange to me that given the option to performs tasks like this at the
window manager level people would &lt;em&gt;choose&lt;/em&gt; to insert an extra layer in the
middle that does less.  By using actual windows you sidestep the problems with
mouse selection in pseudo-windows in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tmux&lt;/span&gt;&lt;/code&gt;, and you can change your mind
about your preference for tabs or tiling mid-session unlike with &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tabbed&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also abuse other excellent things like &lt;a class=&quot;reference external&quot; href=&quot;http://www.semicomplete.com/projects/xdotool/&quot;&gt;xdotool&lt;/a&gt; to fiddle with your
layout or interact with specific clients instead of needing to do application
specific things depending on whether you’re in a &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tmux&lt;/span&gt;&lt;/code&gt; session or not.&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;id5&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I’m especially impressed with &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;tabbed&lt;/span&gt;&lt;/code&gt;, as it feels somehow obvious
yet magical.  A rare combination in my eyes.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id6&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You’ll probably want a patch such as &lt;a class=&quot;reference external&quot; href=&quot;http://dwm.suckless.org/patches/fancybar/&quot;&gt;fancybar&lt;/a&gt; if you want to emulate
the appearance of having a tab bar in &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;dwm&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id7&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;And using the window manager’s functionality means that &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vim&lt;/span&gt;&lt;/code&gt; session
can be a &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;gvim&lt;/span&gt;&lt;/code&gt; instance with nice colourful PNGs for &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/sign.html&quot;&gt;signs&lt;/a&gt; instead
of just characters too.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id8&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You can find a quick patch to remove the daemon support and along with
it the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;gtkhotkey&lt;/span&gt;&lt;/code&gt; dependency &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/JNRowe/jnrowe-misc/commit/a9249166b917110ecb69714ca08d8ff28870a9c7&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">Vim with day/night colourschemes</title>
    <id>https://jnrowe.github.io/articles/tips/vim_day_night_colourscheme.html</id>
    <updated>2018-09-15T00:00:00Z</updated>
    <published>2018-09-15T00:00:00Z</published>
    <link href="https://jnrowe.github.io/articles/tips/vim_day_night_colourscheme.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;vim-with-day-night-colourschemes&quot;&gt;

&lt;p&gt;The fabulous Miss Biddulph asks via our EADS Linux list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;I lurve &lt;a class=&quot;reference external&quot; href=&quot;https://www.vim.org/scripts/script.php?script_id=594&quot;&gt;taqua&lt;/a&gt; in &lt;a class=&quot;reference external&quot; href=&quot;http://www.vim.org&quot;&gt;vim&lt;/a&gt; during the day, but now the days are getting shorter
it is beginning to destroy me.  Is there a way to make &lt;strong class=&quot;command&quot;&gt;vim&lt;/strong&gt; use
different colourschemes depending on time?&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;So, like most things this can either be &lt;em&gt;really&lt;/em&gt; simple or horribly convoluted
depending on where you wish to draw the usability line.  Because Laura is
asking, we’ll scratch the surface of a few odd ways to do this.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-simple-solution&quot;&gt;
&lt;h2&gt;The simple solution&lt;/h2&gt;
&lt;p&gt;In many ways this is related to my &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/JNRowe/awesome-timed-wallpaper/&quot;&gt;awesome-timed-wallpaper&lt;/a&gt; hack, and to start
with I’m going to proceed in a similar way.&lt;/p&gt;
&lt;p&gt;The snippet below will configure the &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/options.html#'background'&quot;&gt;background&lt;/a&gt; and &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/syntax.html#:colorscheme&quot;&gt;colourscheme&lt;/a&gt; depending on
the time of day.  You can change the bounds in any way you see fit&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight-vim notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; hour &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; strftime&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%H&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; hour &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dark&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;colorscheme&lt;/span&gt; jnrowe  &lt;span class=&quot;c&quot;&gt;&amp;quot; Best theme&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; hour &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;light&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;colorscheme&lt;/span&gt; taqua
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;    &amp;quot; Midnight to 08:59&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dark&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;colorscheme&lt;/span&gt; monokai
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you (re-)start &lt;strong class=&quot;command&quot;&gt;vim&lt;/strong&gt; regularly this is all you’ll probably need.
If — like me — you have &lt;em&gt;very&lt;/em&gt; long running &lt;strong class=&quot;command&quot;&gt;vim&lt;/strong&gt; sessions, you’ll have
to put in some more effort to make it work:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;&lt;p&gt;The easiest option would be &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/map.html#:nmap&quot;&gt;binding it to a key&lt;/a&gt; and triggering it when you
notice eye strain&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use vim 8’s new asynchronous timer support, see &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:h&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;timer&lt;/span&gt;&lt;/code&gt;&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#id4&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support pre-v8 vim by adding an &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/autocmd.html#:autocmd&quot;&gt;autocmd&lt;/a&gt; on &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/autocmd.html#CursorHold&quot;&gt;CursorHold&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Script vim externally using vim’s &lt;a class=&quot;reference external&quot; href=&quot;http://vimdoc.sourceforge.net/htmldoc/remote.html#--remote-send&quot;&gt;client server support&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a &lt;a class=&quot;reference external&quot; href=&quot;https://www.freedesktop.org/wiki/Software/systemd&quot;&gt;systemd&lt;/a&gt; user timer that triggers at a given time ;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-ridiculous-solution&quot;&gt;
&lt;h2&gt;The ridiculous solution&lt;/h2&gt;
&lt;p&gt;We’ll need to figure out the actual daylight state.  There are an enormous
number of options available.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;with-python&quot;&gt;
&lt;h3&gt;With Python&lt;/h3&gt;
&lt;p&gt;My &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/upoints/&quot;&gt;upoints&lt;/a&gt; package can calculate sunrise and sunset:&lt;/p&gt;
&lt;div class=&quot;highlight-python notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;upoints.point&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sun_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# UTC results&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(datetime.time(5, 32), datetime.time(18, 15))&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sun_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zenith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;civil&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# twilight&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(datetime.time(4, 58), datetime.time(18, 49))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;with-redshift&quot;&gt;
&lt;h3&gt;With &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;redshift&lt;/span&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If you already use &lt;a class=&quot;reference external&quot; href=&quot;http://jonls.dk/redshift/&quot;&gt;redshift&lt;/a&gt; — and you should — getting the current state is
quite easy.  Below is example output, and a quick &lt;a class=&quot;reference external&quot; href=&quot;http://sed.sourceforge.net/&quot;&gt;sed&lt;/a&gt;-based method to parse the
output for script usage:&lt;/p&gt;
&lt;div class=&quot;highlight-sh notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redshift -p
Waiting &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; current location to become available...
Location: &lt;span class=&quot;m&quot;&gt;52&lt;/span&gt;.2 N, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.2 E
Period: Night
Colour temperature: 4500K
Brightness: &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.00
$ redshift -p &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&amp;gt;/dev/null &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -n &lt;span class=&quot;s1&quot;&gt;&amp;#39;/^Period/s,\(.*\): \(.*\),\U\1=\L\2,p&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PERIOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;night
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another option might be to use &lt;strong class=&quot;command&quot;&gt;redshift&lt;/strong&gt;’s hook support, see the man
page for how to configure hooks.&lt;/p&gt;
&lt;div class=&quot;highlight-sh notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;#!/bin/zsh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;period-changed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;day&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; notify-send &lt;span class=&quot;s2&quot;&gt;&amp;quot;Make bright&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;night&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; notify-send &lt;span class=&quot;s2&quot;&gt;&amp;quot;Make dark&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;camera-input&quot;&gt;
&lt;h3&gt;Camera input&lt;/h3&gt;
&lt;p&gt;Assuming you have access to either a very good or &lt;em&gt;very&lt;/em&gt; bad webcam you could
even script support that takes in to account cloud cover, or occultation caused
by buildings and trees.&lt;/p&gt;
&lt;p&gt;For example, &lt;a class=&quot;reference external&quot; href=&quot;https://www.imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt; can be used to &lt;a class=&quot;reference external&quot; href=&quot;https://www.imagemagick.org/script/escape.php&quot;&gt;extract brightness&lt;/a&gt; from an image.&lt;/p&gt;
&lt;div class=&quot;highlight-shell-session notranslate&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl &lt;span class=&quot;nv&quot;&gt;$cam_url&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; convert - -colorspace Gray -format &lt;span class=&quot;s2&quot;&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class=&quot;go&quot;&gt;38244.2&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; convert pattern:GRAY0 -format &lt;span class=&quot;s2&quot;&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class=&quot;go&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; convert pattern:GRAY100 -format &lt;span class=&quot;s2&quot;&gt;&amp;quot;%[fx:quantumrange*image.mean]&amp;quot;&lt;/span&gt; info:
&lt;span class=&quot;go&quot;&gt;65535&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;As can be seen from the black(&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;GRAY0&lt;/span&gt;&lt;/code&gt;) and white(&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;GRAY100&lt;/span&gt;&lt;/code&gt;) examples,
the result on &lt;em&gt;my&lt;/em&gt; system is a value between 0 and 65535.  You should take
note that &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;quantumrange&lt;/span&gt;&lt;/code&gt; is a compile time depth setting; it can be
queried with the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;%q&lt;/span&gt;&lt;/code&gt; escape, or by checking the &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;Q&lt;/span&gt;&lt;/code&gt; value in the
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;pre&quot;&gt;--version&lt;/span&gt;&lt;/code&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The above will only really work with very poor webcams that don’t attempt to
autobalance their images, with reasonable devices it will be close to useless.&lt;/p&gt;
&lt;p&gt;However, if you have a good quality camera image you may be able to extract the
balancing data used from the image tags, and use that to infer the light level.
&lt;a class=&quot;reference external&quot; href=&quot;http://www.exiv2.org/&quot;&gt;exiv2&lt;/a&gt; is great option to extract that data when available, and also supports
&lt;a class=&quot;reference external&quot; href=&quot;https://wiki.gnome.org/Projects/GObjectIntrospection&quot;&gt;gobject introspection&lt;/a&gt; making it possible to use it with &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/pavouk/lgi&quot;&gt;lgi&lt;/a&gt; in &lt;a class=&quot;reference external&quot; href=&quot;https://awesomewm.org/&quot;&gt;awesome&lt;/a&gt; for
desktop colours too!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;thoughts&quot;&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;That is definitely enough of that rabbit hole for me right now… I’m really
looking forward to seeing people code golf some other solutions, be they useful
or [hopefully] intriguing variations.&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;id3&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;If add more branches you can also wonder why &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;vimscript&lt;/span&gt;&lt;/code&gt; doesn’t have
a switch statement.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;label&quot; id=&quot;id4&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;No HTML link, as vimdoc is still on vim 7.3&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://jnrowe.github.io/blog/2018/atom.xml">
    <title type="text">brexit through the gift shop</title>
    <id>https://jnrowe.github.io/thoughts/brexit_through_the_gift_shop.html</id>
    <updated>2018-06-08T00:00:00Z</updated>
    <published>2018-06-08T00:00:00Z</published>
    <link href="https://jnrowe.github.io/thoughts/brexit_through_the_gift_shop.html" />
    <author>
      <name>James Rowe</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;brexit-through-the-gift-shop&quot;&gt;

&lt;div class=&quot;admonition note&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;This is a public letter to my co-workers, which probably shouldn’t be
public.&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;epigraph&quot;&gt;
&lt;div&gt;&lt;p&gt;If there were in the world today any large number of people who desired
their own happiness more than they desired the unhappiness of others, we
could have a paradise in a few years.&lt;/p&gt;
&lt;p class=&quot;attribution&quot;&gt;—Bertrand Russell&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;On Monday morning, a friend and co-worker stood up and rage quit.  And I really
do mean rage quit, it even included a short stand up quarrel in the car park.
Obviously, nobody has spoke about &lt;em&gt;anything&lt;/em&gt; else since…&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;background&quot;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;We used to work in an environment where we could &lt;span class=&quot;xref std std-doc&quot;&gt;reject projects&lt;/span&gt; on moral grounds with ease.  In fact, &lt;abbr title=&quot;Institutional Review Board&quot;&gt;IRBs&lt;/abbr&gt; exist for that exact reason.  Times were good,
projects were plentiful, and it was just the ways things were.&lt;/p&gt;
&lt;p&gt;This is definitely no longer true.  As we continue to rearrange some projects
for their move to the continent, and lose access to many of the future projects
we have prepared for, there has been a significant push back on personal project
choice.&lt;/p&gt;
&lt;p&gt;To some extent it should be expected.  We’ve lost fifteen percent of our
&lt;abbr title=&quot;Research and Development&quot;&gt;R&amp;amp;D&lt;/abbr&gt; workforce to the European offices
already, in many ways those of us that remain(for example: &lt;em&gt;me&lt;/em&gt;) are the less
valued employees.  Yes, this is harsh, but it also the reality.  Just because
you don’t like it, doesn’t change the reality.&lt;/p&gt;
&lt;p&gt;So, there are quite a few people further down the ladder who can no longer rely
on the more valued workers to object-in-unity to immoral works.  And there are
a fair few who have only just discovered they were never holding the chips, and
being let go is a real possibility(we’re &lt;em&gt;way&lt;/em&gt; beyond the pool of voluntary
redundancies at this point).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;collective-bargaining&quot;&gt;
&lt;h2&gt;Collective bargaining&lt;/h2&gt;
&lt;p&gt;So, object-in-unity is pretty much dead.  And it has really surprised me quite
how fractious some of the arguments now are.  Given that people are basically
fighting for scraps the gloves have well and truly come off, which I suppose
should be expected.  However, I thought — or at least hoped — we were better
than this.&lt;/p&gt;
&lt;p&gt;With some people, quite rightly, being concerned for their own careers there has
been some real vitriol aimed at the exitter.  I understand their argument; his
rage quit &lt;em&gt;will&lt;/em&gt; mean that project is dead&lt;a class=&quot;footnote-reference brackets&quot; href=&quot;#s1&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;, and with it the work of the
peripheral workers has gone too.&lt;/p&gt;
&lt;p&gt;It isn’t helped by the fact that it turns out this particular worker is — we’ve
just found out — independently wealthy through the sale of a &lt;span class=&quot;xref std std-doc&quot;&gt;side project&lt;/span&gt; about five years ago.  Seemingly, a minority of people believe
it would be okay if someone’s morals put them in the poor house, but less
so if they have a cushion to soften the blow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;whats-coming-next&quot;&gt;
&lt;h2&gt;Whats coming next?&lt;/h2&gt;
&lt;blockquote class=&quot;epigraph&quot;&gt;
&lt;div&gt;&lt;p&gt;Lisa is a sellout! Lisa is a sellout! Lisa, what’s a sellout?&lt;/p&gt;
&lt;p class=&quot;attribution&quot;&gt;—Ralph Wiggum&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Clearly this is going to continue for the foreseeable future.  There are a few
of us who, to put it frankly, are basically on gardening leave while this mess
is being sorted out.  The outcome is either you’ll find yourself doing different
work in a years time, or you’ll be made redundant.  It could be much, &lt;em&gt;much&lt;/em&gt;
worse.&lt;/p&gt;
&lt;p&gt;I, for one, haven’t had a tier-one project since August 2016, haven’t published
a notable work since October 2017, and have only been cited once this year.  If
anybody understands the feeling that your career is dead, then surely it is me.
However, now is not the time to be turning on your co-workers(and in many cases
close friends).&lt;/p&gt;
&lt;p&gt;My career is over in its current form, my future is close to non-existent at
this point, and I mourn what now feels like a wasted twenty years of my life.
Not one of those things would be less true if somebody was now grinding on
projects that they believed to be reprehensible.  In fact, they’d remain true
and I’d feel far worse for having to live with the damage I’m doing to that
person.&lt;/p&gt;
&lt;p&gt;Please, I beg of you, consider the outcome we’ve seen in some other cases over
the past few months.  Nobody you deal with is happy with this, we’re just doing
what can to get through it as best we know how.&lt;/p&gt;
&lt;p class=&quot;rubric&quot;&gt;Footnotes&lt;/p&gt;
&lt;dl class=&quot;footnote brackets&quot;&gt;
&lt;dt class=&quot;label&quot; id=&quot;s1&quot;&gt;&lt;span class=&quot;brackets&quot;&gt;&lt;a class=&quot;fn-backref&quot; href=&quot;#id1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Yes, that is a terrible bus-factor problem.  The powers that be
&lt;em&gt;should&lt;/em&gt; have seen it coming, but probably missed the point where the
other people with the necessary skills have been moved to Germany.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
